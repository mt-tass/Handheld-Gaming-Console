
Handheld-Nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006094  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0005d130  08006234  08006234  00007234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08063364  08063364  00065084  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08063364  08063364  00064364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0806336c  0806336c  00065084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0806336c  0806336c  0006436c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08063370  08063370  00064370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000084  20000000  08063374  00065000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005c8  20000084  080633f8  00065084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000064c  080633f8  0006564c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00065084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c342  00000000  00000000  000650b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002318  00000000  00000000  000713f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c30  00000000  00000000  00073710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000093b  00000000  00000000  00074340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018788  00000000  00000000  00074c7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001069f  00000000  00000000  0008d403  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095272  00000000  00000000  0009daa2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00132d14  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a44  00000000  00000000  00132d58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  0013679c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000084 	.word	0x20000084
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800621c 	.word	0x0800621c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000088 	.word	0x20000088
 80001dc:	0800621c 	.word	0x0800621c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b0:	f001 fc96 	bl	8001ee0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b4:	f000 faf2 	bl	8000b9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b8:	f000 fc06 	bl	8000dc8 <MX_GPIO_Init>
  MX_ADC1_Init();
 80005bc:	f000 fb4e 	bl	8000c5c <MX_ADC1_Init>
  MX_I2C1_Init();
 80005c0:	f000 fb9e 	bl	8000d00 <MX_I2C1_Init>
  MX_SPI1_Init();
 80005c4:	f000 fbca 	bl	8000d5c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  ILI9341_Init();
 80005c8:	f004 fb6a 	bl	8004ca0 <ILI9341_Init>
    MPU6050_Init();
 80005cc:	f001 fbdc 	bl	8001d88 <MPU6050_Init>
    drawIntroScreen();
 80005d0:	f000 f822 	bl	8000618 <drawIntroScreen>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  handleInput();
 80005d4:	f000 f8ec 	bl	80007b0 <handleInput>
	  	      /* USER CODE END WHILE */
	  	  	  switch (currentState) {
 80005d8:	4b0e      	ldr	r3, [pc, #56]	@ (8000614 <main+0x68>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	3b01      	subs	r3, #1
 80005de:	2b03      	cmp	r3, #3
 80005e0:	d816      	bhi.n	8000610 <main+0x64>
 80005e2:	a201      	add	r2, pc, #4	@ (adr r2, 80005e8 <main+0x3c>)
 80005e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005e8:	080005f9 	.word	0x080005f9
 80005ec:	080005ff 	.word	0x080005ff
 80005f0:	08000605 	.word	0x08000605
 80005f4:	0800060b 	.word	0x0800060b
	  	  	              case STATE_MENU:
	  	  	                  drawMenuScreen();
 80005f8:	f000 f846 	bl	8000688 <drawMenuScreen>
	  	  	                  break;
 80005fc:	e009      	b.n	8000612 <main+0x66>
	  	  	              case STATE_GAME_SNAKE:
	  	  	                  runSnakeGame();
 80005fe:	f000 f9a7 	bl	8000950 <runSnakeGame>
	  	  	                  break;
 8000602:	e006      	b.n	8000612 <main+0x66>
	  	  	              case STATE_GAME_PONG:
	  	  	                  runPingPongGame();
 8000604:	f000 fa44 	bl	8000a90 <runPingPongGame>
	  	  	                  break;
 8000608:	e003      	b.n	8000612 <main+0x66>
	  	  	              case STATE_GAME_OVER:
	  	  	                  drawGameOverScreen();
 800060a:	f000 f88f 	bl	800072c <drawGameOverScreen>
	  	  	                  break;
 800060e:	e000      	b.n	8000612 <main+0x66>
	  	  	              default:
	  	  	                  break;
 8000610:	bf00      	nop
	  handleInput();
 8000612:	e7df      	b.n	80005d4 <main+0x28>
 8000614:	20000194 	.word	0x20000194

08000618 <drawIntroScreen>:

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
void drawIntroScreen(void) {
 8000618:	b5b0      	push	{r4, r5, r7, lr}
 800061a:	b08a      	sub	sp, #40	@ 0x28
 800061c:	af04      	add	r7, sp, #16
    ILI9341_FillScreen(ILI9341_BLACK);
 800061e:	2000      	movs	r0, #0
 8000620:	f004 fd98 	bl	8005154 <ILI9341_FillScreen>
    ILI9341_DrawImage(128, 40, 64, 64, intro);
 8000624:	4b14      	ldr	r3, [pc, #80]	@ (8000678 <drawIntroScreen+0x60>)
 8000626:	9300      	str	r3, [sp, #0]
 8000628:	2340      	movs	r3, #64	@ 0x40
 800062a:	2240      	movs	r2, #64	@ 0x40
 800062c:	2128      	movs	r1, #40	@ 0x28
 800062e:	2080      	movs	r0, #128	@ 0x80
 8000630:	f004 fda2 	bl	8005178 <ILI9341_DrawImage>
    char temp_msg[] = "HANDHELD-CONSOLE";
 8000634:	4b11      	ldr	r3, [pc, #68]	@ (800067c <drawIntroScreen+0x64>)
 8000636:	1d3c      	adds	r4, r7, #4
 8000638:	461d      	mov	r5, r3
 800063a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800063c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800063e:	682b      	ldr	r3, [r5, #0]
 8000640:	7023      	strb	r3, [r4, #0]
    ILI9341_WriteString(32, 204,temp_msg, Font_16x26, ILI9341_WHITE, ILI9341_BLACK);
 8000642:	4b0f      	ldr	r3, [pc, #60]	@ (8000680 <drawIntroScreen+0x68>)
 8000644:	1d39      	adds	r1, r7, #4
 8000646:	2200      	movs	r2, #0
 8000648:	9202      	str	r2, [sp, #8]
 800064a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800064e:	9201      	str	r2, [sp, #4]
 8000650:	685a      	ldr	r2, [r3, #4]
 8000652:	9200      	str	r2, [sp, #0]
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	460a      	mov	r2, r1
 8000658:	21cc      	movs	r1, #204	@ 0xcc
 800065a:	2020      	movs	r0, #32
 800065c:	f004 fcc0 	bl	8004fe0 <ILI9341_WriteString>
    HAL_Delay(2000);
 8000660:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000664:	f001 fcae 	bl	8001fc4 <HAL_Delay>
    currentState = STATE_MENU;
 8000668:	4b06      	ldr	r3, [pc, #24]	@ (8000684 <drawIntroScreen+0x6c>)
 800066a:	2201      	movs	r2, #1
 800066c:	601a      	str	r2, [r3, #0]
}
 800066e:	bf00      	nop
 8000670:	3718      	adds	r7, #24
 8000672:	46bd      	mov	sp, r7
 8000674:	bdb0      	pop	{r4, r5, r7, pc}
 8000676:	bf00      	nop
 8000678:	08041a88 	.word	0x08041a88
 800067c:	08006234 	.word	0x08006234
 8000680:	20000020 	.word	0x20000020
 8000684:	20000194 	.word	0x20000194

08000688 <drawMenuScreen>:
void drawMenuScreen(void) {
 8000688:	b580      	push	{r7, lr}
 800068a:	b088      	sub	sp, #32
 800068c:	af04      	add	r7, sp, #16
    ILI9341_FillScreen(ILI9341_BLACK);
 800068e:	2000      	movs	r0, #0
 8000690:	f004 fd60 	bl	8005154 <ILI9341_FillScreen>
    char temp_msg[] = "SELECT GAME";
 8000694:	4a1e      	ldr	r2, [pc, #120]	@ (8000710 <drawMenuScreen+0x88>)
 8000696:	1d3b      	adds	r3, r7, #4
 8000698:	ca07      	ldmia	r2, {r0, r1, r2}
 800069a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    ILI9341_WriteString(72, 10, temp_msg, Font_16x26, ILI9341_WHITE, ILI9341_BLACK);
 800069e:	4b1d      	ldr	r3, [pc, #116]	@ (8000714 <drawMenuScreen+0x8c>)
 80006a0:	1d39      	adds	r1, r7, #4
 80006a2:	2200      	movs	r2, #0
 80006a4:	9202      	str	r2, [sp, #8]
 80006a6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80006aa:	9201      	str	r2, [sp, #4]
 80006ac:	685a      	ldr	r2, [r3, #4]
 80006ae:	9200      	str	r2, [sp, #0]
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	460a      	mov	r2, r1
 80006b4:	210a      	movs	r1, #10
 80006b6:	2048      	movs	r0, #72	@ 0x48
 80006b8:	f004 fc92 	bl	8004fe0 <ILI9341_WriteString>

    if (menuSelection == 0) {
 80006bc:	4b16      	ldr	r3, [pc, #88]	@ (8000718 <drawMenuScreen+0x90>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d110      	bne.n	80006e6 <drawMenuScreen+0x5e>
        ILI9341_DrawImage(80, 56, 160, 40, menu1_2); // Highlighted Snake
 80006c4:	4b15      	ldr	r3, [pc, #84]	@ (800071c <drawMenuScreen+0x94>)
 80006c6:	9300      	str	r3, [sp, #0]
 80006c8:	2328      	movs	r3, #40	@ 0x28
 80006ca:	22a0      	movs	r2, #160	@ 0xa0
 80006cc:	2138      	movs	r1, #56	@ 0x38
 80006ce:	2050      	movs	r0, #80	@ 0x50
 80006d0:	f004 fd52 	bl	8005178 <ILI9341_DrawImage>
        ILI9341_DrawImage(80, 116, 160, 40, menu2_1); // Unhighlighted Pong
 80006d4:	4b12      	ldr	r3, [pc, #72]	@ (8000720 <drawMenuScreen+0x98>)
 80006d6:	9300      	str	r3, [sp, #0]
 80006d8:	2328      	movs	r3, #40	@ 0x28
 80006da:	22a0      	movs	r2, #160	@ 0xa0
 80006dc:	2174      	movs	r1, #116	@ 0x74
 80006de:	2050      	movs	r0, #80	@ 0x50
 80006e0:	f004 fd4a 	bl	8005178 <ILI9341_DrawImage>
    } else {
        ILI9341_DrawImage(80, 56, 160, 40, menu1_1); // Unhighlighted Snake
        ILI9341_DrawImage(80, 116, 160, 40, menu2_2); // Highlighted Pong
    }
}
 80006e4:	e00f      	b.n	8000706 <drawMenuScreen+0x7e>
        ILI9341_DrawImage(80, 56, 160, 40, menu1_1); // Unhighlighted Snake
 80006e6:	4b0f      	ldr	r3, [pc, #60]	@ (8000724 <drawMenuScreen+0x9c>)
 80006e8:	9300      	str	r3, [sp, #0]
 80006ea:	2328      	movs	r3, #40	@ 0x28
 80006ec:	22a0      	movs	r2, #160	@ 0xa0
 80006ee:	2138      	movs	r1, #56	@ 0x38
 80006f0:	2050      	movs	r0, #80	@ 0x50
 80006f2:	f004 fd41 	bl	8005178 <ILI9341_DrawImage>
        ILI9341_DrawImage(80, 116, 160, 40, menu2_2); // Highlighted Pong
 80006f6:	4b0c      	ldr	r3, [pc, #48]	@ (8000728 <drawMenuScreen+0xa0>)
 80006f8:	9300      	str	r3, [sp, #0]
 80006fa:	2328      	movs	r3, #40	@ 0x28
 80006fc:	22a0      	movs	r2, #160	@ 0xa0
 80006fe:	2174      	movs	r1, #116	@ 0x74
 8000700:	2050      	movs	r0, #80	@ 0x50
 8000702:	f004 fd39 	bl	8005178 <ILI9341_DrawImage>
}
 8000706:	bf00      	nop
 8000708:	3710      	adds	r7, #16
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	08006248 	.word	0x08006248
 8000714:	20000020 	.word	0x20000020
 8000718:	20000198 	.word	0x20000198
 800071c:	08043a88 	.word	0x08043a88
 8000720:	08049e88 	.word	0x08049e88
 8000724:	08046c88 	.word	0x08046c88
 8000728:	0804d088 	.word	0x0804d088

0800072c <drawGameOverScreen>:
void drawGameOverScreen(void) {
 800072c:	b5b0      	push	{r4, r5, r7, lr}
 800072e:	b08e      	sub	sp, #56	@ 0x38
 8000730:	af04      	add	r7, sp, #16
    ILI9341_FillScreen(ILI9341_BLACK);
 8000732:	2000      	movs	r0, #0
 8000734:	f004 fd0e 	bl	8005154 <ILI9341_FillScreen>
    char temp_msg1[] = "Game Over";
 8000738:	4a19      	ldr	r2, [pc, #100]	@ (80007a0 <drawGameOverScreen+0x74>)
 800073a:	f107 031c 	add.w	r3, r7, #28
 800073e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000740:	c303      	stmia	r3!, {r0, r1}
 8000742:	801a      	strh	r2, [r3, #0]
    char temp_msg2[] = "Press Select to retry";
 8000744:	4b17      	ldr	r3, [pc, #92]	@ (80007a4 <drawGameOverScreen+0x78>)
 8000746:	1d3c      	adds	r4, r7, #4
 8000748:	461d      	mov	r5, r3
 800074a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800074c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800074e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000752:	6020      	str	r0, [r4, #0]
 8000754:	3404      	adds	r4, #4
 8000756:	8021      	strh	r1, [r4, #0]
    ILI9341_WriteString(ILI9341_WIDTH / 2 - 50, ILI9341_HEIGHT / 2, temp_msg1, Font_16x26, ILI9341_RED, ILI9341_BLACK);
 8000758:	4b13      	ldr	r3, [pc, #76]	@ (80007a8 <drawGameOverScreen+0x7c>)
 800075a:	f107 011c 	add.w	r1, r7, #28
 800075e:	2200      	movs	r2, #0
 8000760:	9202      	str	r2, [sp, #8]
 8000762:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8000766:	9201      	str	r2, [sp, #4]
 8000768:	685a      	ldr	r2, [r3, #4]
 800076a:	9200      	str	r2, [sp, #0]
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	460a      	mov	r2, r1
 8000770:	2178      	movs	r1, #120	@ 0x78
 8000772:	206e      	movs	r0, #110	@ 0x6e
 8000774:	f004 fc34 	bl	8004fe0 <ILI9341_WriteString>
    ILI9341_WriteString(ILI9341_WIDTH / 2 - 80, ILI9341_HEIGHT / 2 + 30, temp_msg2, Font_7x10, ILI9341_WHITE, ILI9341_BLACK);
 8000778:	4b0c      	ldr	r3, [pc, #48]	@ (80007ac <drawGameOverScreen+0x80>)
 800077a:	1d39      	adds	r1, r7, #4
 800077c:	2200      	movs	r2, #0
 800077e:	9202      	str	r2, [sp, #8]
 8000780:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000784:	9201      	str	r2, [sp, #4]
 8000786:	685a      	ldr	r2, [r3, #4]
 8000788:	9200      	str	r2, [sp, #0]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	460a      	mov	r2, r1
 800078e:	2196      	movs	r1, #150	@ 0x96
 8000790:	2050      	movs	r0, #80	@ 0x50
 8000792:	f004 fc25 	bl	8004fe0 <ILI9341_WriteString>
}
 8000796:	bf00      	nop
 8000798:	3728      	adds	r7, #40	@ 0x28
 800079a:	46bd      	mov	sp, r7
 800079c:	bdb0      	pop	{r4, r5, r7, pc}
 800079e:	bf00      	nop
 80007a0:	08006254 	.word	0x08006254
 80007a4:	08006260 	.word	0x08006260
 80007a8:	20000020 	.word	0x20000020
 80007ac:	20000018 	.word	0x20000018

080007b0 <handleInput>:
void handleInput(void) {
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b084      	sub	sp, #16
 80007b4:	af02      	add	r7, sp, #8
    //bool selectButtonPressed = (HAL_GPIO_ReadPin(JOYSTICK_BUTTON_PORT, JOYSTICK_BUTTON_PIN) == GPIO_PIN_SET);

    if ((HAL_GPIO_ReadPin(GPIOA , GPIO_PIN_10)==GPIO_PIN_RESET) ) {
 80007b6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80007ba:	4850      	ldr	r0, [pc, #320]	@ (80008fc <handleInput+0x14c>)
 80007bc:	f002 fa72 	bl	8002ca4 <HAL_GPIO_ReadPin>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d175      	bne.n	80008b2 <handleInput+0x102>
        if (currentState == STATE_MENU) {
 80007c6:	4b4e      	ldr	r3, [pc, #312]	@ (8000900 <handleInput+0x150>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	2b01      	cmp	r3, #1
 80007cc:	d147      	bne.n	800085e <handleInput+0xae>
            if (menuSelection ==  0) {
 80007ce:	4b4d      	ldr	r3, [pc, #308]	@ (8000904 <handleInput+0x154>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d136      	bne.n	8000844 <handleInput+0x94>
            	 ILI9341_FillScreen(ILI9341_BLACK);
 80007d6:	2000      	movs	r0, #0
 80007d8:	f004 fcbc 	bl	8005154 <ILI9341_FillScreen>
                 ILI9341_DrawImage(40,0,240,240,snake_intro);
 80007dc:	4b4a      	ldr	r3, [pc, #296]	@ (8000908 <handleInput+0x158>)
 80007de:	9300      	str	r3, [sp, #0]
 80007e0:	23f0      	movs	r3, #240	@ 0xf0
 80007e2:	22f0      	movs	r2, #240	@ 0xf0
 80007e4:	2100      	movs	r1, #0
 80007e6:	2028      	movs	r0, #40	@ 0x28
 80007e8:	f004 fcc6 	bl	8005178 <ILI9341_DrawImage>
                 ILI9341_FillScreen(ILI9341_BLACK);
 80007ec:	2000      	movs	r0, #0
 80007ee:	f004 fcb1 	bl	8005154 <ILI9341_FillScreen>
                 ILI9341_DrawImage(0,0,320,35,bg_final_top);
 80007f2:	4b46      	ldr	r3, [pc, #280]	@ (800090c <handleInput+0x15c>)
 80007f4:	9300      	str	r3, [sp, #0]
 80007f6:	2323      	movs	r3, #35	@ 0x23
 80007f8:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80007fc:	2100      	movs	r1, #0
 80007fe:	2000      	movs	r0, #0
 8000800:	f004 fcba 	bl	8005178 <ILI9341_DrawImage>
                 ILI9341_DrawImage(0,205,320,35,bg_final_bottom);
 8000804:	4b42      	ldr	r3, [pc, #264]	@ (8000910 <handleInput+0x160>)
 8000806:	9300      	str	r3, [sp, #0]
 8000808:	2323      	movs	r3, #35	@ 0x23
 800080a:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800080e:	21cd      	movs	r1, #205	@ 0xcd
 8000810:	2000      	movs	r0, #0
 8000812:	f004 fcb1 	bl	8005178 <ILI9341_DrawImage>
                 ILI9341_DrawImage(0,35,47,170,bg_final_left);
 8000816:	4b3f      	ldr	r3, [pc, #252]	@ (8000914 <handleInput+0x164>)
 8000818:	9300      	str	r3, [sp, #0]
 800081a:	23aa      	movs	r3, #170	@ 0xaa
 800081c:	222f      	movs	r2, #47	@ 0x2f
 800081e:	2123      	movs	r1, #35	@ 0x23
 8000820:	2000      	movs	r0, #0
 8000822:	f004 fca9 	bl	8005178 <ILI9341_DrawImage>
                 ILI9341_DrawImage(274,35,46,170,bg_final_right);
 8000826:	4b3c      	ldr	r3, [pc, #240]	@ (8000918 <handleInput+0x168>)
 8000828:	9300      	str	r3, [sp, #0]
 800082a:	23aa      	movs	r3, #170	@ 0xaa
 800082c:	222e      	movs	r2, #46	@ 0x2e
 800082e:	2123      	movs	r1, #35	@ 0x23
 8000830:	f44f 7089 	mov.w	r0, #274	@ 0x112
 8000834:	f004 fca0 	bl	8005178 <ILI9341_DrawImage>
                SNAKE_Init();
 8000838:	f000 fe0e 	bl	8001458 <SNAKE_Init>
                currentState = STATE_GAME_SNAKE;
 800083c:	4b30      	ldr	r3, [pc, #192]	@ (8000900 <handleInput+0x150>)
 800083e:	2202      	movs	r2, #2
 8000840:	601a      	str	r2, [r3, #0]
 8000842:	e036      	b.n	80008b2 <handleInput+0x102>
            } else if (menuSelection == 1) {
 8000844:	4b2f      	ldr	r3, [pc, #188]	@ (8000904 <handleInput+0x154>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	2b01      	cmp	r3, #1
 800084a:	d132      	bne.n	80008b2 <handleInput+0x102>
                currentState = STATE_GAME_PONG;
 800084c:	4b2c      	ldr	r3, [pc, #176]	@ (8000900 <handleInput+0x150>)
 800084e:	2203      	movs	r2, #3
 8000850:	601a      	str	r2, [r3, #0]
                ILI9341_FillScreen(ILI9341_BLACK);
 8000852:	2000      	movs	r0, #0
 8000854:	f004 fc7e 	bl	8005154 <ILI9341_FillScreen>
                PingPong_Init();
 8000858:	f001 f892 	bl	8001980 <PingPong_Init>
 800085c:	e029      	b.n	80008b2 <handleInput+0x102>
            }
        } else if (currentState == STATE_GAME_OVER) {
 800085e:	4b28      	ldr	r3, [pc, #160]	@ (8000900 <handleInput+0x150>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	2b04      	cmp	r3, #4
 8000864:	d105      	bne.n	8000872 <handleInput+0xc2>
            currentState = STATE_MENU;
 8000866:	4b26      	ldr	r3, [pc, #152]	@ (8000900 <handleInput+0x150>)
 8000868:	2201      	movs	r2, #1
 800086a:	601a      	str	r2, [r3, #0]
            drawMenuScreen();
 800086c:	f7ff ff0c 	bl	8000688 <drawMenuScreen>
 8000870:	e01f      	b.n	80008b2 <handleInput+0x102>
        } else {
            isMpuControl = !isMpuControl;
 8000872:	4b2a      	ldr	r3, [pc, #168]	@ (800091c <handleInput+0x16c>)
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	b2db      	uxtb	r3, r3
 8000878:	2b00      	cmp	r3, #0
 800087a:	bf14      	ite	ne
 800087c:	2301      	movne	r3, #1
 800087e:	2300      	moveq	r3, #0
 8000880:	b2db      	uxtb	r3, r3
 8000882:	f083 0301 	eor.w	r3, r3, #1
 8000886:	b2db      	uxtb	r3, r3
 8000888:	f003 0301 	and.w	r3, r3, #1
 800088c:	b2da      	uxtb	r2, r3
 800088e:	4b23      	ldr	r3, [pc, #140]	@ (800091c <handleInput+0x16c>)
 8000890:	701a      	strb	r2, [r3, #0]
            if (isMpuControl) {
 8000892:	4b22      	ldr	r3, [pc, #136]	@ (800091c <handleInput+0x16c>)
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	b2db      	uxtb	r3, r3
 8000898:	2b00      	cmp	r3, #0
 800089a:	d005      	beq.n	80008a8 <handleInput+0xf8>
                HAL_GPIO_WritePin(MPU_LED_PORT, MPU_LED_PIN, GPIO_PIN_SET);
 800089c:	2201      	movs	r2, #1
 800089e:	2102      	movs	r1, #2
 80008a0:	481f      	ldr	r0, [pc, #124]	@ (8000920 <handleInput+0x170>)
 80008a2:	f002 fa17 	bl	8002cd4 <HAL_GPIO_WritePin>
 80008a6:	e004      	b.n	80008b2 <handleInput+0x102>
            } else {
                HAL_GPIO_WritePin(MPU_LED_PORT, MPU_LED_PIN, GPIO_PIN_RESET);
 80008a8:	2200      	movs	r2, #0
 80008aa:	2102      	movs	r1, #2
 80008ac:	481c      	ldr	r0, [pc, #112]	@ (8000920 <handleInput+0x170>)
 80008ae:	f002 fa11 	bl	8002cd4 <HAL_GPIO_WritePin>
            }
        }
    }

    if (currentState == STATE_MENU) {
 80008b2:	4b13      	ldr	r3, [pc, #76]	@ (8000900 <handleInput+0x150>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	2b01      	cmp	r3, #1
 80008b8:	d11b      	bne.n	80008f2 <handleInput+0x142>
        uint16_t xVal = getADC(JOYSTICK_X_ADC_CHANNEL);
 80008ba:	200f      	movs	r0, #15
 80008bc:	f000 f940 	bl	8000b40 <getADC>
 80008c0:	4603      	mov	r3, r0
 80008c2:	80fb      	strh	r3, [r7, #6]
        if (HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_11)==GPIO_PIN_RESET) { // Joystick UP
 80008c4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80008c8:	480c      	ldr	r0, [pc, #48]	@ (80008fc <handleInput+0x14c>)
 80008ca:	f002 f9eb 	bl	8002ca4 <HAL_GPIO_ReadPin>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d103      	bne.n	80008dc <handleInput+0x12c>
            menuSelection = 0;
 80008d4:	4b0b      	ldr	r3, [pc, #44]	@ (8000904 <handleInput+0x154>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]
        } else if (HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_12)==GPIO_PIN_RESET) { // Joystick DOWN
            menuSelection = 1;
        }
    }
}
 80008da:	e00a      	b.n	80008f2 <handleInput+0x142>
        } else if (HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_12)==GPIO_PIN_RESET) { // Joystick DOWN
 80008dc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80008e0:	4806      	ldr	r0, [pc, #24]	@ (80008fc <handleInput+0x14c>)
 80008e2:	f002 f9df 	bl	8002ca4 <HAL_GPIO_ReadPin>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d102      	bne.n	80008f2 <handleInput+0x142>
            menuSelection = 1;
 80008ec:	4b05      	ldr	r3, [pc, #20]	@ (8000904 <handleInput+0x154>)
 80008ee:	2201      	movs	r2, #1
 80008f0:	601a      	str	r2, [r3, #0]
}
 80008f2:	bf00      	nop
 80008f4:	3708      	adds	r7, #8
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	40020000 	.word	0x40020000
 8000900:	20000194 	.word	0x20000194
 8000904:	20000198 	.word	0x20000198
 8000908:	08009688 	.word	0x08009688
 800090c:	08050288 	.word	0x08050288
 8000910:	08055a08 	.word	0x08055a08
 8000914:	0805b188 	.word	0x0805b188
 8000918:	0805eff4 	.word	0x0805eff4
 800091c:	2000019c 	.word	0x2000019c
 8000920:	40020800 	.word	0x40020800

08000924 <isButtonHeld>:
bool isButtonHeld(GPIO_TypeDef *port, uint16_t pin) {
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
 800092c:	460b      	mov	r3, r1
 800092e:	807b      	strh	r3, [r7, #2]
    return (HAL_GPIO_ReadPin(port, pin) == GPIO_PIN_RESET);
 8000930:	887b      	ldrh	r3, [r7, #2]
 8000932:	4619      	mov	r1, r3
 8000934:	6878      	ldr	r0, [r7, #4]
 8000936:	f002 f9b5 	bl	8002ca4 <HAL_GPIO_ReadPin>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	bf0c      	ite	eq
 8000940:	2301      	moveq	r3, #1
 8000942:	2300      	movne	r3, #0
 8000944:	b2db      	uxtb	r3, r3
}
 8000946:	4618      	mov	r0, r3
 8000948:	3708      	adds	r7, #8
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
	...

08000950 <runSnakeGame>:
void runSnakeGame(void) {
 8000950:	b580      	push	{r7, lr}
 8000952:	b084      	sub	sp, #16
 8000954:	af02      	add	r7, sp, #8
    if (SNAKE_getOver()) {
 8000956:	f000 ffdb 	bl	8001910 <SNAKE_getOver>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d019      	beq.n	8000994 <runSnakeGame+0x44>
    	ILI9341_FillScreen(ILI9341_BLACK);
 8000960:	2000      	movs	r0, #0
 8000962:	f004 fbf7 	bl	8005154 <ILI9341_FillScreen>
    	ILI9341_DrawImage(40, 0, 240, 240, snake_outro);
 8000966:	4b42      	ldr	r3, [pc, #264]	@ (8000a70 <runSnakeGame+0x120>)
 8000968:	9300      	str	r3, [sp, #0]
 800096a:	23f0      	movs	r3, #240	@ 0xf0
 800096c:	22f0      	movs	r2, #240	@ 0xf0
 800096e:	2100      	movs	r1, #0
 8000970:	2028      	movs	r0, #40	@ 0x28
 8000972:	f004 fc01 	bl	8005178 <ILI9341_DrawImage>
    	HAL_Delay(500);
 8000976:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800097a:	f001 fb23 	bl	8001fc4 <HAL_Delay>
        if(isButtonHeld(JOYSTICK_BUTTON_PORT,JOYSTICK_BUTTON_PIN)) currentState = STATE_MENU;
 800097e:	2110      	movs	r1, #16
 8000980:	483c      	ldr	r0, [pc, #240]	@ (8000a74 <runSnakeGame+0x124>)
 8000982:	f7ff ffcf 	bl	8000924 <isButtonHeld>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d06c      	beq.n	8000a66 <runSnakeGame+0x116>
 800098c:	4b3a      	ldr	r3, [pc, #232]	@ (8000a78 <runSnakeGame+0x128>)
 800098e:	2201      	movs	r2, #1
 8000990:	601a      	str	r2, [r3, #0]
        return;
 8000992:	e068      	b.n	8000a66 <runSnakeGame+0x116>
    }
    int direction;
    if (snake_first_draw){
 8000994:	4b39      	ldr	r3, [pc, #228]	@ (8000a7c <runSnakeGame+0x12c>)
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	b2db      	uxtb	r3, r3
 800099a:	2b00      	cmp	r3, #0
 800099c:	d004      	beq.n	80009a8 <runSnakeGame+0x58>
    	direction = 1;
 800099e:	2301      	movs	r3, #1
 80009a0:	607b      	str	r3, [r7, #4]
    	snake_first_draw = false;
 80009a2:	4b36      	ldr	r3, [pc, #216]	@ (8000a7c <runSnakeGame+0x12c>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	701a      	strb	r2, [r3, #0]

    }


    if (isMpuControl) {
 80009a8:	4b35      	ldr	r3, [pc, #212]	@ (8000a80 <runSnakeGame+0x130>)
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	b2db      	uxtb	r3, r3
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d025      	beq.n	80009fe <runSnakeGame+0xae>
        MPU6050_Read_Accel(&mpu_x, &mpu_y, &mpu_z);
 80009b2:	4a34      	ldr	r2, [pc, #208]	@ (8000a84 <runSnakeGame+0x134>)
 80009b4:	4934      	ldr	r1, [pc, #208]	@ (8000a88 <runSnakeGame+0x138>)
 80009b6:	4835      	ldr	r0, [pc, #212]	@ (8000a8c <runSnakeGame+0x13c>)
 80009b8:	f001 fa4a 	bl	8001e50 <MPU6050_Read_Accel>
        if (mpu_x > MPU_ACCEL_X_UP_THRESHOLD) direction = 4; // Up
 80009bc:	4b33      	ldr	r3, [pc, #204]	@ (8000a8c <runSnakeGame+0x13c>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 80009c4:	4293      	cmp	r3, r2
 80009c6:	dd01      	ble.n	80009cc <runSnakeGame+0x7c>
 80009c8:	2304      	movs	r3, #4
 80009ca:	607b      	str	r3, [r7, #4]
        if (mpu_x < MPU_ACCEL_X_DOWN_THRESHOLD) direction = 2; // Down
 80009cc:	4b2f      	ldr	r3, [pc, #188]	@ (8000a8c <runSnakeGame+0x13c>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	f240 52db 	movw	r2, #1499	@ 0x5db
 80009d4:	4293      	cmp	r3, r2
 80009d6:	dc01      	bgt.n	80009dc <runSnakeGame+0x8c>
 80009d8:	2302      	movs	r3, #2
 80009da:	607b      	str	r3, [r7, #4]
        if (mpu_y > MPU_ACCEL_Y_RIGHT_THRESHOLD) direction = 1; // Right
 80009dc:	4b2a      	ldr	r3, [pc, #168]	@ (8000a88 <runSnakeGame+0x138>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 80009e4:	4293      	cmp	r3, r2
 80009e6:	dd01      	ble.n	80009ec <runSnakeGame+0x9c>
 80009e8:	2301      	movs	r3, #1
 80009ea:	607b      	str	r3, [r7, #4]
        if (mpu_y < MPU_ACCEL_Y_LEFT_THRESHOLD) direction = 3; // Left
 80009ec:	4b26      	ldr	r3, [pc, #152]	@ (8000a88 <runSnakeGame+0x138>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	f240 52db 	movw	r2, #1499	@ 0x5db
 80009f4:	4293      	cmp	r3, r2
 80009f6:	dc28      	bgt.n	8000a4a <runSnakeGame+0xfa>
 80009f8:	2303      	movs	r3, #3
 80009fa:	607b      	str	r3, [r7, #4]
 80009fc:	e025      	b.n	8000a4a <runSnakeGame+0xfa>
    } else {
        uint16_t xVal = getADC(JOYSTICK_X_ADC_CHANNEL);
 80009fe:	200f      	movs	r0, #15
 8000a00:	f000 f89e 	bl	8000b40 <getADC>
 8000a04:	4603      	mov	r3, r0
 8000a06:	807b      	strh	r3, [r7, #2]
        uint16_t yVal = getADC(JOYSTICK_Y_ADC_CHANNEL);
 8000a08:	2008      	movs	r0, #8
 8000a0a:	f000 f899 	bl	8000b40 <getADC>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	803b      	strh	r3, [r7, #0]

        if (xVal > JOYSTICK_THRESHOLD) direction = 4; // Up
 8000a12:	887b      	ldrh	r3, [r7, #2]
 8000a14:	f640 52ac 	movw	r2, #3500	@ 0xdac
 8000a18:	4293      	cmp	r3, r2
 8000a1a:	d901      	bls.n	8000a20 <runSnakeGame+0xd0>
 8000a1c:	2304      	movs	r3, #4
 8000a1e:	607b      	str	r3, [r7, #4]
        if (xVal < 4095 - JOYSTICK_THRESHOLD) direction = 2; // Down
 8000a20:	887b      	ldrh	r3, [r7, #2]
 8000a22:	f240 2252 	movw	r2, #594	@ 0x252
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d801      	bhi.n	8000a2e <runSnakeGame+0xde>
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	607b      	str	r3, [r7, #4]
        if (yVal > JOYSTICK_THRESHOLD) direction = 1; // Right
 8000a2e:	883b      	ldrh	r3, [r7, #0]
 8000a30:	f640 52ac 	movw	r2, #3500	@ 0xdac
 8000a34:	4293      	cmp	r3, r2
 8000a36:	d901      	bls.n	8000a3c <runSnakeGame+0xec>
 8000a38:	2301      	movs	r3, #1
 8000a3a:	607b      	str	r3, [r7, #4]
        if (yVal < 4095 - JOYSTICK_THRESHOLD) direction = 3; // Left
 8000a3c:	883b      	ldrh	r3, [r7, #0]
 8000a3e:	f240 2252 	movw	r2, #594	@ 0x252
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d801      	bhi.n	8000a4a <runSnakeGame+0xfa>
 8000a46:	2303      	movs	r3, #3
 8000a48:	607b      	str	r3, [r7, #4]
    }

    if (direction != 0) {
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d002      	beq.n	8000a56 <runSnakeGame+0x106>
        SNAKE_ChangeDirection(direction);
 8000a50:	6878      	ldr	r0, [r7, #4]
 8000a52:	f000 ff2b 	bl	80018ac <SNAKE_ChangeDirection>
    }

    SNAKE_updateGame();
 8000a56:	f000 fd3b 	bl	80014d0 <SNAKE_updateGame>
    SNAKE_drawGame();
 8000a5a:	f000 fe19 	bl	8001690 <SNAKE_drawGame>
    HAL_Delay(100);
 8000a5e:	2064      	movs	r0, #100	@ 0x64
 8000a60:	f001 fab0 	bl	8001fc4 <HAL_Delay>
 8000a64:	e000      	b.n	8000a68 <runSnakeGame+0x118>
        return;
 8000a66:	bf00      	nop
}
 8000a68:	3708      	adds	r7, #8
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	08025888 	.word	0x08025888
 8000a74:	40020800 	.word	0x40020800
 8000a78:	20000194 	.word	0x20000194
 8000a7c:	20000000 	.word	0x20000000
 8000a80:	2000019c 	.word	0x2000019c
 8000a84:	200001a8 	.word	0x200001a8
 8000a88:	200001a4 	.word	0x200001a4
 8000a8c:	200001a0 	.word	0x200001a0

08000a90 <runPingPongGame>:
void runPingPongGame(void) {
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
    if (PingPong_IsGameOver()) {
 8000a96:	f001 f96b 	bl	8001d70 <PingPong_IsGameOver>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d003      	beq.n	8000aa8 <runPingPongGame+0x18>
        currentState = STATE_GAME_OVER;
 8000aa0:	4b22      	ldr	r3, [pc, #136]	@ (8000b2c <runPingPongGame+0x9c>)
 8000aa2:	2204      	movs	r2, #4
 8000aa4:	601a      	str	r2, [r3, #0]
        return;
 8000aa6:	e03e      	b.n	8000b26 <runPingPongGame+0x96>
    }

    bool upPressed = false;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	71fb      	strb	r3, [r7, #7]
    bool downPressed = false;
 8000aac:	2300      	movs	r3, #0
 8000aae:	71bb      	strb	r3, [r7, #6]

    if (isMpuControl) {
 8000ab0:	4b1f      	ldr	r3, [pc, #124]	@ (8000b30 <runPingPongGame+0xa0>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	b2db      	uxtb	r3, r3
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d016      	beq.n	8000ae8 <runPingPongGame+0x58>
        MPU6050_Read_Accel(&mpu_x, &mpu_y, &mpu_z);
 8000aba:	4a1e      	ldr	r2, [pc, #120]	@ (8000b34 <runPingPongGame+0xa4>)
 8000abc:	491e      	ldr	r1, [pc, #120]	@ (8000b38 <runPingPongGame+0xa8>)
 8000abe:	481f      	ldr	r0, [pc, #124]	@ (8000b3c <runPingPongGame+0xac>)
 8000ac0:	f001 f9c6 	bl	8001e50 <MPU6050_Read_Accel>
        if (mpu_x > MPU_ACCEL_X_UP_THRESHOLD) upPressed = true;
 8000ac4:	4b1d      	ldr	r3, [pc, #116]	@ (8000b3c <runPingPongGame+0xac>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8000acc:	4293      	cmp	r3, r2
 8000ace:	dd02      	ble.n	8000ad6 <runPingPongGame+0x46>
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	71fb      	strb	r3, [r7, #7]
 8000ad4:	e01c      	b.n	8000b10 <runPingPongGame+0x80>
        else if (mpu_x < MPU_ACCEL_X_DOWN_THRESHOLD) downPressed = true;
 8000ad6:	4b19      	ldr	r3, [pc, #100]	@ (8000b3c <runPingPongGame+0xac>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	f240 52db 	movw	r2, #1499	@ 0x5db
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	dc16      	bgt.n	8000b10 <runPingPongGame+0x80>
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	71bb      	strb	r3, [r7, #6]
 8000ae6:	e013      	b.n	8000b10 <runPingPongGame+0x80>
    } else {
        uint16_t xVal = getADC(JOYSTICK_X_ADC_CHANNEL);
 8000ae8:	200f      	movs	r0, #15
 8000aea:	f000 f829 	bl	8000b40 <getADC>
 8000aee:	4603      	mov	r3, r0
 8000af0:	80bb      	strh	r3, [r7, #4]
        if (xVal > JOYSTICK_THRESHOLD) upPressed = true;
 8000af2:	88bb      	ldrh	r3, [r7, #4]
 8000af4:	f640 52ac 	movw	r2, #3500	@ 0xdac
 8000af8:	4293      	cmp	r3, r2
 8000afa:	d902      	bls.n	8000b02 <runPingPongGame+0x72>
 8000afc:	2301      	movs	r3, #1
 8000afe:	71fb      	strb	r3, [r7, #7]
 8000b00:	e006      	b.n	8000b10 <runPingPongGame+0x80>
        else if (xVal < 4095 - JOYSTICK_THRESHOLD) downPressed = true;
 8000b02:	88bb      	ldrh	r3, [r7, #4]
 8000b04:	f240 2252 	movw	r2, #594	@ 0x252
 8000b08:	4293      	cmp	r3, r2
 8000b0a:	d801      	bhi.n	8000b10 <runPingPongGame+0x80>
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	71bb      	strb	r3, [r7, #6]
    }

    PingPong_Update(upPressed, downPressed);
 8000b10:	79ba      	ldrb	r2, [r7, #6]
 8000b12:	79fb      	ldrb	r3, [r7, #7]
 8000b14:	4611      	mov	r1, r2
 8000b16:	4618      	mov	r0, r3
 8000b18:	f000 ff6c 	bl	80019f4 <PingPong_Update>
    PingPong_Draw();
 8000b1c:	f001 f8a0 	bl	8001c60 <PingPong_Draw>
    HAL_Delay(20);
 8000b20:	2014      	movs	r0, #20
 8000b22:	f001 fa4f 	bl	8001fc4 <HAL_Delay>
}
 8000b26:	3708      	adds	r7, #8
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	20000194 	.word	0x20000194
 8000b30:	2000019c 	.word	0x2000019c
 8000b34:	200001a8 	.word	0x200001a8
 8000b38:	200001a4 	.word	0x200001a4
 8000b3c:	200001a0 	.word	0x200001a0

08000b40 <getADC>:

uint16_t getADC(uint32_t channel){
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b088      	sub	sp, #32
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
    ADC_ChannelConfTypeDef adc_confg = {0};
 8000b48:	f107 030c 	add.w	r3, r7, #12
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]
 8000b50:	605a      	str	r2, [r3, #4]
 8000b52:	609a      	str	r2, [r3, #8]
 8000b54:	60da      	str	r2, [r3, #12]
    adc_confg.Channel = channel;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	60fb      	str	r3, [r7, #12]
    adc_confg.Rank = 1;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	613b      	str	r3, [r7, #16]
    adc_confg.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8000b5e:	2303      	movs	r3, #3
 8000b60:	617b      	str	r3, [r7, #20]
    HAL_ADC_ConfigChannel(&hadc1,&adc_confg);
 8000b62:	f107 030c 	add.w	r3, r7, #12
 8000b66:	4619      	mov	r1, r3
 8000b68:	480b      	ldr	r0, [pc, #44]	@ (8000b98 <getADC+0x58>)
 8000b6a:	f001 fc13 	bl	8002394 <HAL_ADC_ConfigChannel>
    HAL_ADC_Start(&hadc1);
 8000b6e:	480a      	ldr	r0, [pc, #40]	@ (8000b98 <getADC+0x58>)
 8000b70:	f001 fa90 	bl	8002094 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1 , HAL_MAX_DELAY);
 8000b74:	f04f 31ff 	mov.w	r1, #4294967295
 8000b78:	4807      	ldr	r0, [pc, #28]	@ (8000b98 <getADC+0x58>)
 8000b7a:	f001 fb72 	bl	8002262 <HAL_ADC_PollForConversion>
    uint16_t val = HAL_ADC_GetValue(&hadc1);
 8000b7e:	4806      	ldr	r0, [pc, #24]	@ (8000b98 <getADC+0x58>)
 8000b80:	f001 fbfa 	bl	8002378 <HAL_ADC_GetValue>
 8000b84:	4603      	mov	r3, r0
 8000b86:	83fb      	strh	r3, [r7, #30]
    HAL_ADC_Stop(&hadc1);
 8000b88:	4803      	ldr	r0, [pc, #12]	@ (8000b98 <getADC+0x58>)
 8000b8a:	f001 fb37 	bl	80021fc <HAL_ADC_Stop>
    return val;
 8000b8e:	8bfb      	ldrh	r3, [r7, #30]
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	3720      	adds	r7, #32
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	200000a0 	.word	0x200000a0

08000b9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b094      	sub	sp, #80	@ 0x50
 8000ba0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ba2:	f107 0320 	add.w	r3, r7, #32
 8000ba6:	2230      	movs	r2, #48	@ 0x30
 8000ba8:	2100      	movs	r1, #0
 8000baa:	4618      	mov	r0, r3
 8000bac:	f004 fc9d 	bl	80054ea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bb0:	f107 030c 	add.w	r3, r7, #12
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]
 8000bb8:	605a      	str	r2, [r3, #4]
 8000bba:	609a      	str	r2, [r3, #8]
 8000bbc:	60da      	str	r2, [r3, #12]
 8000bbe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	60bb      	str	r3, [r7, #8]
 8000bc4:	4b23      	ldr	r3, [pc, #140]	@ (8000c54 <SystemClock_Config+0xb8>)
 8000bc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bc8:	4a22      	ldr	r2, [pc, #136]	@ (8000c54 <SystemClock_Config+0xb8>)
 8000bca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bce:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bd0:	4b20      	ldr	r3, [pc, #128]	@ (8000c54 <SystemClock_Config+0xb8>)
 8000bd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bd4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bd8:	60bb      	str	r3, [r7, #8]
 8000bda:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000bdc:	2300      	movs	r3, #0
 8000bde:	607b      	str	r3, [r7, #4]
 8000be0:	4b1d      	ldr	r3, [pc, #116]	@ (8000c58 <SystemClock_Config+0xbc>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000be8:	4a1b      	ldr	r2, [pc, #108]	@ (8000c58 <SystemClock_Config+0xbc>)
 8000bea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000bee:	6013      	str	r3, [r2, #0]
 8000bf0:	4b19      	ldr	r3, [pc, #100]	@ (8000c58 <SystemClock_Config+0xbc>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000bf8:	607b      	str	r3, [r7, #4]
 8000bfa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c00:	2301      	movs	r3, #1
 8000c02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c04:	2310      	movs	r3, #16
 8000c06:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c0c:	f107 0320 	add.w	r3, r7, #32
 8000c10:	4618      	mov	r0, r3
 8000c12:	f003 f89d 	bl	8003d50 <HAL_RCC_OscConfig>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000c1c:	f000 f962 	bl	8000ee4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c20:	230f      	movs	r3, #15
 8000c22:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c24:	2300      	movs	r3, #0
 8000c26:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c30:	2300      	movs	r3, #0
 8000c32:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c34:	f107 030c 	add.w	r3, r7, #12
 8000c38:	2100      	movs	r1, #0
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f003 fb00 	bl	8004240 <HAL_RCC_ClockConfig>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000c46:	f000 f94d 	bl	8000ee4 <Error_Handler>
  }
}
 8000c4a:	bf00      	nop
 8000c4c:	3750      	adds	r7, #80	@ 0x50
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	40023800 	.word	0x40023800
 8000c58:	40007000 	.word	0x40007000

08000c5c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b084      	sub	sp, #16
 8000c60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c62:	463b      	mov	r3, r7
 8000c64:	2200      	movs	r2, #0
 8000c66:	601a      	str	r2, [r3, #0]
 8000c68:	605a      	str	r2, [r3, #4]
 8000c6a:	609a      	str	r2, [r3, #8]
 8000c6c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000c6e:	4b21      	ldr	r3, [pc, #132]	@ (8000cf4 <MX_ADC1_Init+0x98>)
 8000c70:	4a21      	ldr	r2, [pc, #132]	@ (8000cf8 <MX_ADC1_Init+0x9c>)
 8000c72:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000c74:	4b1f      	ldr	r3, [pc, #124]	@ (8000cf4 <MX_ADC1_Init+0x98>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c7a:	4b1e      	ldr	r3, [pc, #120]	@ (8000cf4 <MX_ADC1_Init+0x98>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000c80:	4b1c      	ldr	r3, [pc, #112]	@ (8000cf4 <MX_ADC1_Init+0x98>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c86:	4b1b      	ldr	r3, [pc, #108]	@ (8000cf4 <MX_ADC1_Init+0x98>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c8c:	4b19      	ldr	r3, [pc, #100]	@ (8000cf4 <MX_ADC1_Init+0x98>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c94:	4b17      	ldr	r3, [pc, #92]	@ (8000cf4 <MX_ADC1_Init+0x98>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c9a:	4b16      	ldr	r3, [pc, #88]	@ (8000cf4 <MX_ADC1_Init+0x98>)
 8000c9c:	4a17      	ldr	r2, [pc, #92]	@ (8000cfc <MX_ADC1_Init+0xa0>)
 8000c9e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ca0:	4b14      	ldr	r3, [pc, #80]	@ (8000cf4 <MX_ADC1_Init+0x98>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000ca6:	4b13      	ldr	r3, [pc, #76]	@ (8000cf4 <MX_ADC1_Init+0x98>)
 8000ca8:	2201      	movs	r2, #1
 8000caa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000cac:	4b11      	ldr	r3, [pc, #68]	@ (8000cf4 <MX_ADC1_Init+0x98>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cb4:	4b0f      	ldr	r3, [pc, #60]	@ (8000cf4 <MX_ADC1_Init+0x98>)
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cba:	480e      	ldr	r0, [pc, #56]	@ (8000cf4 <MX_ADC1_Init+0x98>)
 8000cbc:	f001 f9a6 	bl	800200c <HAL_ADC_Init>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000cc6:	f000 f90d 	bl	8000ee4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000cca:	230f      	movs	r3, #15
 8000ccc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cd6:	463b      	mov	r3, r7
 8000cd8:	4619      	mov	r1, r3
 8000cda:	4806      	ldr	r0, [pc, #24]	@ (8000cf4 <MX_ADC1_Init+0x98>)
 8000cdc:	f001 fb5a 	bl	8002394 <HAL_ADC_ConfigChannel>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000ce6:	f000 f8fd 	bl	8000ee4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000cea:	bf00      	nop
 8000cec:	3710      	adds	r7, #16
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	200000a0 	.word	0x200000a0
 8000cf8:	40012000 	.word	0x40012000
 8000cfc:	0f000001 	.word	0x0f000001

08000d00 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d04:	4b12      	ldr	r3, [pc, #72]	@ (8000d50 <MX_I2C1_Init+0x50>)
 8000d06:	4a13      	ldr	r2, [pc, #76]	@ (8000d54 <MX_I2C1_Init+0x54>)
 8000d08:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000d0a:	4b11      	ldr	r3, [pc, #68]	@ (8000d50 <MX_I2C1_Init+0x50>)
 8000d0c:	4a12      	ldr	r2, [pc, #72]	@ (8000d58 <MX_I2C1_Init+0x58>)
 8000d0e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d10:	4b0f      	ldr	r3, [pc, #60]	@ (8000d50 <MX_I2C1_Init+0x50>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000d16:	4b0e      	ldr	r3, [pc, #56]	@ (8000d50 <MX_I2C1_Init+0x50>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000d50 <MX_I2C1_Init+0x50>)
 8000d1e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000d22:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d24:	4b0a      	ldr	r3, [pc, #40]	@ (8000d50 <MX_I2C1_Init+0x50>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000d2a:	4b09      	ldr	r3, [pc, #36]	@ (8000d50 <MX_I2C1_Init+0x50>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d30:	4b07      	ldr	r3, [pc, #28]	@ (8000d50 <MX_I2C1_Init+0x50>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d36:	4b06      	ldr	r3, [pc, #24]	@ (8000d50 <MX_I2C1_Init+0x50>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d3c:	4804      	ldr	r0, [pc, #16]	@ (8000d50 <MX_I2C1_Init+0x50>)
 8000d3e:	f001 ffe3 	bl	8002d08 <HAL_I2C_Init>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000d48:	f000 f8cc 	bl	8000ee4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d4c:	bf00      	nop
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	200000e8 	.word	0x200000e8
 8000d54:	40005400 	.word	0x40005400
 8000d58:	000186a0 	.word	0x000186a0

08000d5c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000d60:	4b17      	ldr	r3, [pc, #92]	@ (8000dc0 <MX_SPI1_Init+0x64>)
 8000d62:	4a18      	ldr	r2, [pc, #96]	@ (8000dc4 <MX_SPI1_Init+0x68>)
 8000d64:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d66:	4b16      	ldr	r3, [pc, #88]	@ (8000dc0 <MX_SPI1_Init+0x64>)
 8000d68:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000d6c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d6e:	4b14      	ldr	r3, [pc, #80]	@ (8000dc0 <MX_SPI1_Init+0x64>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d74:	4b12      	ldr	r3, [pc, #72]	@ (8000dc0 <MX_SPI1_Init+0x64>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d7a:	4b11      	ldr	r3, [pc, #68]	@ (8000dc0 <MX_SPI1_Init+0x64>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d80:	4b0f      	ldr	r3, [pc, #60]	@ (8000dc0 <MX_SPI1_Init+0x64>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d86:	4b0e      	ldr	r3, [pc, #56]	@ (8000dc0 <MX_SPI1_Init+0x64>)
 8000d88:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d8c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d8e:	4b0c      	ldr	r3, [pc, #48]	@ (8000dc0 <MX_SPI1_Init+0x64>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d94:	4b0a      	ldr	r3, [pc, #40]	@ (8000dc0 <MX_SPI1_Init+0x64>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d9a:	4b09      	ldr	r3, [pc, #36]	@ (8000dc0 <MX_SPI1_Init+0x64>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000da0:	4b07      	ldr	r3, [pc, #28]	@ (8000dc0 <MX_SPI1_Init+0x64>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000da6:	4b06      	ldr	r3, [pc, #24]	@ (8000dc0 <MX_SPI1_Init+0x64>)
 8000da8:	220a      	movs	r2, #10
 8000daa:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000dac:	4804      	ldr	r0, [pc, #16]	@ (8000dc0 <MX_SPI1_Init+0x64>)
 8000dae:	f003 fc13 	bl	80045d8 <HAL_SPI_Init>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000db8:	f000 f894 	bl	8000ee4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000dbc:	bf00      	nop
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	2000013c 	.word	0x2000013c
 8000dc4:	40013000 	.word	0x40013000

08000dc8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b08a      	sub	sp, #40	@ 0x28
 8000dcc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dce:	f107 0314 	add.w	r3, r7, #20
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	601a      	str	r2, [r3, #0]
 8000dd6:	605a      	str	r2, [r3, #4]
 8000dd8:	609a      	str	r2, [r3, #8]
 8000dda:	60da      	str	r2, [r3, #12]
 8000ddc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dde:	2300      	movs	r3, #0
 8000de0:	613b      	str	r3, [r7, #16]
 8000de2:	4b3c      	ldr	r3, [pc, #240]	@ (8000ed4 <MX_GPIO_Init+0x10c>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000de6:	4a3b      	ldr	r2, [pc, #236]	@ (8000ed4 <MX_GPIO_Init+0x10c>)
 8000de8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000dec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dee:	4b39      	ldr	r3, [pc, #228]	@ (8000ed4 <MX_GPIO_Init+0x10c>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000df2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000df6:	613b      	str	r3, [r7, #16]
 8000df8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	60fb      	str	r3, [r7, #12]
 8000dfe:	4b35      	ldr	r3, [pc, #212]	@ (8000ed4 <MX_GPIO_Init+0x10c>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e02:	4a34      	ldr	r2, [pc, #208]	@ (8000ed4 <MX_GPIO_Init+0x10c>)
 8000e04:	f043 0304 	orr.w	r3, r3, #4
 8000e08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e0a:	4b32      	ldr	r3, [pc, #200]	@ (8000ed4 <MX_GPIO_Init+0x10c>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e0e:	f003 0304 	and.w	r3, r3, #4
 8000e12:	60fb      	str	r3, [r7, #12]
 8000e14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e16:	2300      	movs	r3, #0
 8000e18:	60bb      	str	r3, [r7, #8]
 8000e1a:	4b2e      	ldr	r3, [pc, #184]	@ (8000ed4 <MX_GPIO_Init+0x10c>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e1e:	4a2d      	ldr	r2, [pc, #180]	@ (8000ed4 <MX_GPIO_Init+0x10c>)
 8000e20:	f043 0301 	orr.w	r3, r3, #1
 8000e24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e26:	4b2b      	ldr	r3, [pc, #172]	@ (8000ed4 <MX_GPIO_Init+0x10c>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e2a:	f003 0301 	and.w	r3, r3, #1
 8000e2e:	60bb      	str	r3, [r7, #8]
 8000e30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e32:	2300      	movs	r3, #0
 8000e34:	607b      	str	r3, [r7, #4]
 8000e36:	4b27      	ldr	r3, [pc, #156]	@ (8000ed4 <MX_GPIO_Init+0x10c>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e3a:	4a26      	ldr	r2, [pc, #152]	@ (8000ed4 <MX_GPIO_Init+0x10c>)
 8000e3c:	f043 0302 	orr.w	r3, r3, #2
 8000e40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e42:	4b24      	ldr	r3, [pc, #144]	@ (8000ed4 <MX_GPIO_Init+0x10c>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e46:	f003 0302 	and.w	r3, r3, #2
 8000e4a:	607b      	str	r3, [r7, #4]
 8000e4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8000e4e:	2200      	movs	r2, #0
 8000e50:	2102      	movs	r1, #2
 8000e52:	4821      	ldr	r0, [pc, #132]	@ (8000ed8 <MX_GPIO_Init+0x110>)
 8000e54:	f001 ff3e 	bl	8002cd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4, GPIO_PIN_RESET);
 8000e58:	2200      	movs	r2, #0
 8000e5a:	2113      	movs	r1, #19
 8000e5c:	481f      	ldr	r0, [pc, #124]	@ (8000edc <MX_GPIO_Init+0x114>)
 8000e5e:	f001 ff39 	bl	8002cd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000e62:	2302      	movs	r3, #2
 8000e64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e66:	2301      	movs	r3, #1
 8000e68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e72:	f107 0314 	add.w	r3, r7, #20
 8000e76:	4619      	mov	r1, r3
 8000e78:	4817      	ldr	r0, [pc, #92]	@ (8000ed8 <MX_GPIO_Init+0x110>)
 8000e7a:	f001 fd8f 	bl	800299c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 8000e7e:	2313      	movs	r3, #19
 8000e80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e82:	2301      	movs	r3, #1
 8000e84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e86:	2300      	movs	r3, #0
 8000e88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e8e:	f107 0314 	add.w	r3, r7, #20
 8000e92:	4619      	mov	r1, r3
 8000e94:	4811      	ldr	r0, [pc, #68]	@ (8000edc <MX_GPIO_Init+0x114>)
 8000e96:	f001 fd81 	bl	800299c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ea6:	f107 0314 	add.w	r3, r7, #20
 8000eaa:	4619      	mov	r1, r3
 8000eac:	480c      	ldr	r0, [pc, #48]	@ (8000ee0 <MX_GPIO_Init+0x118>)
 8000eae:	f001 fd75 	bl	800299c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10 PA11 PA12 PA13 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8000eb2:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8000eb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec0:	f107 0314 	add.w	r3, r7, #20
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	4805      	ldr	r0, [pc, #20]	@ (8000edc <MX_GPIO_Init+0x114>)
 8000ec8:	f001 fd68 	bl	800299c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000ecc:	bf00      	nop
 8000ece:	3728      	adds	r7, #40	@ 0x28
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	40023800 	.word	0x40023800
 8000ed8:	40020800 	.word	0x40020800
 8000edc:	40020000 	.word	0x40020000
 8000ee0:	40020400 	.word	0x40020400

08000ee4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ee8:	b672      	cpsid	i
}
 8000eea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000eec:	bf00      	nop
 8000eee:	e7fd      	b.n	8000eec <Error_Handler+0x8>

08000ef0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	607b      	str	r3, [r7, #4]
 8000efa:	4b10      	ldr	r3, [pc, #64]	@ (8000f3c <HAL_MspInit+0x4c>)
 8000efc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000efe:	4a0f      	ldr	r2, [pc, #60]	@ (8000f3c <HAL_MspInit+0x4c>)
 8000f00:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f04:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f06:	4b0d      	ldr	r3, [pc, #52]	@ (8000f3c <HAL_MspInit+0x4c>)
 8000f08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f0e:	607b      	str	r3, [r7, #4]
 8000f10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f12:	2300      	movs	r3, #0
 8000f14:	603b      	str	r3, [r7, #0]
 8000f16:	4b09      	ldr	r3, [pc, #36]	@ (8000f3c <HAL_MspInit+0x4c>)
 8000f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f1a:	4a08      	ldr	r2, [pc, #32]	@ (8000f3c <HAL_MspInit+0x4c>)
 8000f1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f20:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f22:	4b06      	ldr	r3, [pc, #24]	@ (8000f3c <HAL_MspInit+0x4c>)
 8000f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f2a:	603b      	str	r3, [r7, #0]
 8000f2c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f2e:	bf00      	nop
 8000f30:	370c      	adds	r7, #12
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	40023800 	.word	0x40023800

08000f40 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b08a      	sub	sp, #40	@ 0x28
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f48:	f107 0314 	add.w	r3, r7, #20
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	605a      	str	r2, [r3, #4]
 8000f52:	609a      	str	r2, [r3, #8]
 8000f54:	60da      	str	r2, [r3, #12]
 8000f56:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a24      	ldr	r2, [pc, #144]	@ (8000ff0 <HAL_ADC_MspInit+0xb0>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d141      	bne.n	8000fe6 <HAL_ADC_MspInit+0xa6>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f62:	2300      	movs	r3, #0
 8000f64:	613b      	str	r3, [r7, #16]
 8000f66:	4b23      	ldr	r3, [pc, #140]	@ (8000ff4 <HAL_ADC_MspInit+0xb4>)
 8000f68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f6a:	4a22      	ldr	r2, [pc, #136]	@ (8000ff4 <HAL_ADC_MspInit+0xb4>)
 8000f6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f70:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f72:	4b20      	ldr	r3, [pc, #128]	@ (8000ff4 <HAL_ADC_MspInit+0xb4>)
 8000f74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f7a:	613b      	str	r3, [r7, #16]
 8000f7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f7e:	2300      	movs	r3, #0
 8000f80:	60fb      	str	r3, [r7, #12]
 8000f82:	4b1c      	ldr	r3, [pc, #112]	@ (8000ff4 <HAL_ADC_MspInit+0xb4>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f86:	4a1b      	ldr	r2, [pc, #108]	@ (8000ff4 <HAL_ADC_MspInit+0xb4>)
 8000f88:	f043 0304 	orr.w	r3, r3, #4
 8000f8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f8e:	4b19      	ldr	r3, [pc, #100]	@ (8000ff4 <HAL_ADC_MspInit+0xb4>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f92:	f003 0304 	and.w	r3, r3, #4
 8000f96:	60fb      	str	r3, [r7, #12]
 8000f98:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	60bb      	str	r3, [r7, #8]
 8000f9e:	4b15      	ldr	r3, [pc, #84]	@ (8000ff4 <HAL_ADC_MspInit+0xb4>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fa2:	4a14      	ldr	r2, [pc, #80]	@ (8000ff4 <HAL_ADC_MspInit+0xb4>)
 8000fa4:	f043 0302 	orr.w	r3, r3, #2
 8000fa8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000faa:	4b12      	ldr	r3, [pc, #72]	@ (8000ff4 <HAL_ADC_MspInit+0xb4>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fae:	f003 0302 	and.w	r3, r3, #2
 8000fb2:	60bb      	str	r3, [r7, #8]
 8000fb4:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000fb6:	2320      	movs	r3, #32
 8000fb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fba:	2303      	movs	r3, #3
 8000fbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fc2:	f107 0314 	add.w	r3, r7, #20
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	480b      	ldr	r0, [pc, #44]	@ (8000ff8 <HAL_ADC_MspInit+0xb8>)
 8000fca:	f001 fce7 	bl	800299c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fda:	f107 0314 	add.w	r3, r7, #20
 8000fde:	4619      	mov	r1, r3
 8000fe0:	4806      	ldr	r0, [pc, #24]	@ (8000ffc <HAL_ADC_MspInit+0xbc>)
 8000fe2:	f001 fcdb 	bl	800299c <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000fe6:	bf00      	nop
 8000fe8:	3728      	adds	r7, #40	@ 0x28
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	40012000 	.word	0x40012000
 8000ff4:	40023800 	.word	0x40023800
 8000ff8:	40020800 	.word	0x40020800
 8000ffc:	40020400 	.word	0x40020400

08001000 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b08a      	sub	sp, #40	@ 0x28
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001008:	f107 0314 	add.w	r3, r7, #20
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	605a      	str	r2, [r3, #4]
 8001012:	609a      	str	r2, [r3, #8]
 8001014:	60da      	str	r2, [r3, #12]
 8001016:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a19      	ldr	r2, [pc, #100]	@ (8001084 <HAL_I2C_MspInit+0x84>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d12c      	bne.n	800107c <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001022:	2300      	movs	r3, #0
 8001024:	613b      	str	r3, [r7, #16]
 8001026:	4b18      	ldr	r3, [pc, #96]	@ (8001088 <HAL_I2C_MspInit+0x88>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800102a:	4a17      	ldr	r2, [pc, #92]	@ (8001088 <HAL_I2C_MspInit+0x88>)
 800102c:	f043 0302 	orr.w	r3, r3, #2
 8001030:	6313      	str	r3, [r2, #48]	@ 0x30
 8001032:	4b15      	ldr	r3, [pc, #84]	@ (8001088 <HAL_I2C_MspInit+0x88>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001036:	f003 0302 	and.w	r3, r3, #2
 800103a:	613b      	str	r3, [r7, #16]
 800103c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800103e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001042:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001044:	2312      	movs	r3, #18
 8001046:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001048:	2300      	movs	r3, #0
 800104a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800104c:	2303      	movs	r3, #3
 800104e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001050:	2304      	movs	r3, #4
 8001052:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001054:	f107 0314 	add.w	r3, r7, #20
 8001058:	4619      	mov	r1, r3
 800105a:	480c      	ldr	r0, [pc, #48]	@ (800108c <HAL_I2C_MspInit+0x8c>)
 800105c:	f001 fc9e 	bl	800299c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001060:	2300      	movs	r3, #0
 8001062:	60fb      	str	r3, [r7, #12]
 8001064:	4b08      	ldr	r3, [pc, #32]	@ (8001088 <HAL_I2C_MspInit+0x88>)
 8001066:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001068:	4a07      	ldr	r2, [pc, #28]	@ (8001088 <HAL_I2C_MspInit+0x88>)
 800106a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800106e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001070:	4b05      	ldr	r3, [pc, #20]	@ (8001088 <HAL_I2C_MspInit+0x88>)
 8001072:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001074:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001078:	60fb      	str	r3, [r7, #12]
 800107a:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800107c:	bf00      	nop
 800107e:	3728      	adds	r7, #40	@ 0x28
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	40005400 	.word	0x40005400
 8001088:	40023800 	.word	0x40023800
 800108c:	40020400 	.word	0x40020400

08001090 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b08a      	sub	sp, #40	@ 0x28
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001098:	f107 0314 	add.w	r3, r7, #20
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	605a      	str	r2, [r3, #4]
 80010a2:	609a      	str	r2, [r3, #8]
 80010a4:	60da      	str	r2, [r3, #12]
 80010a6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a19      	ldr	r2, [pc, #100]	@ (8001114 <HAL_SPI_MspInit+0x84>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d12b      	bne.n	800110a <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010b2:	2300      	movs	r3, #0
 80010b4:	613b      	str	r3, [r7, #16]
 80010b6:	4b18      	ldr	r3, [pc, #96]	@ (8001118 <HAL_SPI_MspInit+0x88>)
 80010b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ba:	4a17      	ldr	r2, [pc, #92]	@ (8001118 <HAL_SPI_MspInit+0x88>)
 80010bc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80010c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80010c2:	4b15      	ldr	r3, [pc, #84]	@ (8001118 <HAL_SPI_MspInit+0x88>)
 80010c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010c6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80010ca:	613b      	str	r3, [r7, #16]
 80010cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ce:	2300      	movs	r3, #0
 80010d0:	60fb      	str	r3, [r7, #12]
 80010d2:	4b11      	ldr	r3, [pc, #68]	@ (8001118 <HAL_SPI_MspInit+0x88>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010d6:	4a10      	ldr	r2, [pc, #64]	@ (8001118 <HAL_SPI_MspInit+0x88>)
 80010d8:	f043 0301 	orr.w	r3, r3, #1
 80010dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80010de:	4b0e      	ldr	r3, [pc, #56]	@ (8001118 <HAL_SPI_MspInit+0x88>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e2:	f003 0301 	and.w	r3, r3, #1
 80010e6:	60fb      	str	r3, [r7, #12]
 80010e8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80010ea:	23e0      	movs	r3, #224	@ 0xe0
 80010ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ee:	2302      	movs	r3, #2
 80010f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f2:	2300      	movs	r3, #0
 80010f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010f6:	2303      	movs	r3, #3
 80010f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010fa:	2305      	movs	r3, #5
 80010fc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010fe:	f107 0314 	add.w	r3, r7, #20
 8001102:	4619      	mov	r1, r3
 8001104:	4805      	ldr	r0, [pc, #20]	@ (800111c <HAL_SPI_MspInit+0x8c>)
 8001106:	f001 fc49 	bl	800299c <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 800110a:	bf00      	nop
 800110c:	3728      	adds	r7, #40	@ 0x28
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	40013000 	.word	0x40013000
 8001118:	40023800 	.word	0x40023800
 800111c:	40020000 	.word	0x40020000

08001120 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001124:	bf00      	nop
 8001126:	e7fd      	b.n	8001124 <NMI_Handler+0x4>

08001128 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800112c:	bf00      	nop
 800112e:	e7fd      	b.n	800112c <HardFault_Handler+0x4>

08001130 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001134:	bf00      	nop
 8001136:	e7fd      	b.n	8001134 <MemManage_Handler+0x4>

08001138 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800113c:	bf00      	nop
 800113e:	e7fd      	b.n	800113c <BusFault_Handler+0x4>

08001140 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001144:	bf00      	nop
 8001146:	e7fd      	b.n	8001144 <UsageFault_Handler+0x4>

08001148 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800114c:	bf00      	nop
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr

08001156 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001156:	b480      	push	{r7}
 8001158:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800115a:	bf00      	nop
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr

08001164 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001168:	bf00      	nop
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr

08001172 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001172:	b580      	push	{r7, lr}
 8001174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001176:	f000 ff05 	bl	8001f84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800117a:	bf00      	nop
 800117c:	bd80      	pop	{r7, pc}

0800117e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800117e:	b480      	push	{r7}
 8001180:	af00      	add	r7, sp, #0
  return 1;
 8001182:	2301      	movs	r3, #1
}
 8001184:	4618      	mov	r0, r3
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr

0800118e <_kill>:

int _kill(int pid, int sig)
{
 800118e:	b580      	push	{r7, lr}
 8001190:	b082      	sub	sp, #8
 8001192:	af00      	add	r7, sp, #0
 8001194:	6078      	str	r0, [r7, #4]
 8001196:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001198:	f004 f9f6 	bl	8005588 <__errno>
 800119c:	4603      	mov	r3, r0
 800119e:	2216      	movs	r2, #22
 80011a0:	601a      	str	r2, [r3, #0]
  return -1;
 80011a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}

080011ae <_exit>:

void _exit (int status)
{
 80011ae:	b580      	push	{r7, lr}
 80011b0:	b082      	sub	sp, #8
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80011b6:	f04f 31ff 	mov.w	r1, #4294967295
 80011ba:	6878      	ldr	r0, [r7, #4]
 80011bc:	f7ff ffe7 	bl	800118e <_kill>
  while (1) {}    /* Make sure we hang here */
 80011c0:	bf00      	nop
 80011c2:	e7fd      	b.n	80011c0 <_exit+0x12>

080011c4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b086      	sub	sp, #24
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	60f8      	str	r0, [r7, #12]
 80011cc:	60b9      	str	r1, [r7, #8]
 80011ce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011d0:	2300      	movs	r3, #0
 80011d2:	617b      	str	r3, [r7, #20]
 80011d4:	e00a      	b.n	80011ec <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80011d6:	f3af 8000 	nop.w
 80011da:	4601      	mov	r1, r0
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	1c5a      	adds	r2, r3, #1
 80011e0:	60ba      	str	r2, [r7, #8]
 80011e2:	b2ca      	uxtb	r2, r1
 80011e4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	3301      	adds	r3, #1
 80011ea:	617b      	str	r3, [r7, #20]
 80011ec:	697a      	ldr	r2, [r7, #20]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	dbf0      	blt.n	80011d6 <_read+0x12>
  }

  return len;
 80011f4:	687b      	ldr	r3, [r7, #4]
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3718      	adds	r7, #24
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}

080011fe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80011fe:	b580      	push	{r7, lr}
 8001200:	b086      	sub	sp, #24
 8001202:	af00      	add	r7, sp, #0
 8001204:	60f8      	str	r0, [r7, #12]
 8001206:	60b9      	str	r1, [r7, #8]
 8001208:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800120a:	2300      	movs	r3, #0
 800120c:	617b      	str	r3, [r7, #20]
 800120e:	e009      	b.n	8001224 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	1c5a      	adds	r2, r3, #1
 8001214:	60ba      	str	r2, [r7, #8]
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	4618      	mov	r0, r3
 800121a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	3301      	adds	r3, #1
 8001222:	617b      	str	r3, [r7, #20]
 8001224:	697a      	ldr	r2, [r7, #20]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	429a      	cmp	r2, r3
 800122a:	dbf1      	blt.n	8001210 <_write+0x12>
  }
  return len;
 800122c:	687b      	ldr	r3, [r7, #4]
}
 800122e:	4618      	mov	r0, r3
 8001230:	3718      	adds	r7, #24
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}

08001236 <_close>:

int _close(int file)
{
 8001236:	b480      	push	{r7}
 8001238:	b083      	sub	sp, #12
 800123a:	af00      	add	r7, sp, #0
 800123c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800123e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001242:	4618      	mov	r0, r3
 8001244:	370c      	adds	r7, #12
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr

0800124e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800124e:	b480      	push	{r7}
 8001250:	b083      	sub	sp, #12
 8001252:	af00      	add	r7, sp, #0
 8001254:	6078      	str	r0, [r7, #4]
 8001256:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800125e:	605a      	str	r2, [r3, #4]
  return 0;
 8001260:	2300      	movs	r3, #0
}
 8001262:	4618      	mov	r0, r3
 8001264:	370c      	adds	r7, #12
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr

0800126e <_isatty>:

int _isatty(int file)
{
 800126e:	b480      	push	{r7}
 8001270:	b083      	sub	sp, #12
 8001272:	af00      	add	r7, sp, #0
 8001274:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001276:	2301      	movs	r3, #1
}
 8001278:	4618      	mov	r0, r3
 800127a:	370c      	adds	r7, #12
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr

08001284 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001284:	b480      	push	{r7}
 8001286:	b085      	sub	sp, #20
 8001288:	af00      	add	r7, sp, #0
 800128a:	60f8      	str	r0, [r7, #12]
 800128c:	60b9      	str	r1, [r7, #8]
 800128e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001290:	2300      	movs	r3, #0
}
 8001292:	4618      	mov	r0, r3
 8001294:	3714      	adds	r7, #20
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
	...

080012a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b086      	sub	sp, #24
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012a8:	4a14      	ldr	r2, [pc, #80]	@ (80012fc <_sbrk+0x5c>)
 80012aa:	4b15      	ldr	r3, [pc, #84]	@ (8001300 <_sbrk+0x60>)
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012b4:	4b13      	ldr	r3, [pc, #76]	@ (8001304 <_sbrk+0x64>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d102      	bne.n	80012c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012bc:	4b11      	ldr	r3, [pc, #68]	@ (8001304 <_sbrk+0x64>)
 80012be:	4a12      	ldr	r2, [pc, #72]	@ (8001308 <_sbrk+0x68>)
 80012c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012c2:	4b10      	ldr	r3, [pc, #64]	@ (8001304 <_sbrk+0x64>)
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4413      	add	r3, r2
 80012ca:	693a      	ldr	r2, [r7, #16]
 80012cc:	429a      	cmp	r2, r3
 80012ce:	d207      	bcs.n	80012e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012d0:	f004 f95a 	bl	8005588 <__errno>
 80012d4:	4603      	mov	r3, r0
 80012d6:	220c      	movs	r2, #12
 80012d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012da:	f04f 33ff 	mov.w	r3, #4294967295
 80012de:	e009      	b.n	80012f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012e0:	4b08      	ldr	r3, [pc, #32]	@ (8001304 <_sbrk+0x64>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012e6:	4b07      	ldr	r3, [pc, #28]	@ (8001304 <_sbrk+0x64>)
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4413      	add	r3, r2
 80012ee:	4a05      	ldr	r2, [pc, #20]	@ (8001304 <_sbrk+0x64>)
 80012f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012f2:	68fb      	ldr	r3, [r7, #12]
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3718      	adds	r7, #24
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	20018000 	.word	0x20018000
 8001300:	00000400 	.word	0x00000400
 8001304:	200001ac 	.word	0x200001ac
 8001308:	20000650 	.word	0x20000650

0800130c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001310:	4b06      	ldr	r3, [pc, #24]	@ (800132c <SystemInit+0x20>)
 8001312:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001316:	4a05      	ldr	r2, [pc, #20]	@ (800132c <SystemInit+0x20>)
 8001318:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800131c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001320:	bf00      	nop
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	e000ed00 	.word	0xe000ed00

08001330 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001330:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001368 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001334:	f7ff ffea 	bl	800130c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001338:	480c      	ldr	r0, [pc, #48]	@ (800136c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800133a:	490d      	ldr	r1, [pc, #52]	@ (8001370 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800133c:	4a0d      	ldr	r2, [pc, #52]	@ (8001374 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800133e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001340:	e002      	b.n	8001348 <LoopCopyDataInit>

08001342 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001342:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001344:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001346:	3304      	adds	r3, #4

08001348 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001348:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800134a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800134c:	d3f9      	bcc.n	8001342 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800134e:	4a0a      	ldr	r2, [pc, #40]	@ (8001378 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001350:	4c0a      	ldr	r4, [pc, #40]	@ (800137c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001352:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001354:	e001      	b.n	800135a <LoopFillZerobss>

08001356 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001356:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001358:	3204      	adds	r2, #4

0800135a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800135a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800135c:	d3fb      	bcc.n	8001356 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800135e:	f004 f919 	bl	8005594 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001362:	f7ff f923 	bl	80005ac <main>
  bx  lr    
 8001366:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001368:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800136c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001370:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8001374:	08063374 	.word	0x08063374
  ldr r2, =_sbss
 8001378:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 800137c:	2000064c 	.word	0x2000064c

08001380 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001380:	e7fe      	b.n	8001380 <ADC_IRQHandler>
	...

08001384 <genNewApple>:
bool isover;
int num_colors = 4;
int num_apple = 1;
int num_body = 1;

void genNewApple(void) {
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
    bool onSnake = false;
 800138a:	2300      	movs	r3, #0
 800138c:	71fb      	strb	r3, [r7, #7]
    do {
        // Aligned to 20x20 grid, with padding
        apple_x = ((rand() % (160 / 20)) * 20) + 40;
 800138e:	f003 ff69 	bl	8005264 <rand>
 8001392:	4603      	mov	r3, r0
 8001394:	4259      	negs	r1, r3
 8001396:	f003 0207 	and.w	r2, r3, #7
 800139a:	f001 0307 	and.w	r3, r1, #7
 800139e:	bf58      	it	pl
 80013a0:	425a      	negpl	r2, r3
 80013a2:	4613      	mov	r3, r2
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	4413      	add	r3, r2
 80013a8:	009b      	lsls	r3, r3, #2
 80013aa:	3328      	adds	r3, #40	@ 0x28
 80013ac:	4a24      	ldr	r2, [pc, #144]	@ (8001440 <genNewApple+0xbc>)
 80013ae:	6013      	str	r3, [r2, #0]
        apple_y = ((rand() % (120 / 20)) * 20) + 40;
 80013b0:	f003 ff58 	bl	8005264 <rand>
 80013b4:	4601      	mov	r1, r0
 80013b6:	4b23      	ldr	r3, [pc, #140]	@ (8001444 <genNewApple+0xc0>)
 80013b8:	fb83 3201 	smull	r3, r2, r3, r1
 80013bc:	17cb      	asrs	r3, r1, #31
 80013be:	1ad2      	subs	r2, r2, r3
 80013c0:	4613      	mov	r3, r2
 80013c2:	005b      	lsls	r3, r3, #1
 80013c4:	4413      	add	r3, r2
 80013c6:	005b      	lsls	r3, r3, #1
 80013c8:	1aca      	subs	r2, r1, r3
 80013ca:	4613      	mov	r3, r2
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	4413      	add	r3, r2
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	3328      	adds	r3, #40	@ 0x28
 80013d4:	4a1c      	ldr	r2, [pc, #112]	@ (8001448 <genNewApple+0xc4>)
 80013d6:	6013      	str	r3, [r2, #0]
        for (int i = 0; i < snakelen; i++) {
 80013d8:	2300      	movs	r3, #0
 80013da:	603b      	str	r3, [r7, #0]
 80013dc:	e016      	b.n	800140c <genNewApple+0x88>
            if (snake[i].x == apple_x && snake[i].y == apple_y) {
 80013de:	4a1b      	ldr	r2, [pc, #108]	@ (800144c <genNewApple+0xc8>)
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80013e6:	4b16      	ldr	r3, [pc, #88]	@ (8001440 <genNewApple+0xbc>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	429a      	cmp	r2, r3
 80013ec:	d10b      	bne.n	8001406 <genNewApple+0x82>
 80013ee:	4a17      	ldr	r2, [pc, #92]	@ (800144c <genNewApple+0xc8>)
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	00db      	lsls	r3, r3, #3
 80013f4:	4413      	add	r3, r2
 80013f6:	685a      	ldr	r2, [r3, #4]
 80013f8:	4b13      	ldr	r3, [pc, #76]	@ (8001448 <genNewApple+0xc4>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	429a      	cmp	r2, r3
 80013fe:	d102      	bne.n	8001406 <genNewApple+0x82>
                onSnake = true;
 8001400:	2301      	movs	r3, #1
 8001402:	71fb      	strb	r3, [r7, #7]
                break;
 8001404:	e007      	b.n	8001416 <genNewApple+0x92>
        for (int i = 0; i < snakelen; i++) {
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	3301      	adds	r3, #1
 800140a:	603b      	str	r3, [r7, #0]
 800140c:	4b10      	ldr	r3, [pc, #64]	@ (8001450 <genNewApple+0xcc>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	683a      	ldr	r2, [r7, #0]
 8001412:	429a      	cmp	r2, r3
 8001414:	dbe3      	blt.n	80013de <genNewApple+0x5a>
            }
        }
        num_apple = (rand() % 4) + 1;
 8001416:	f003 ff25 	bl	8005264 <rand>
 800141a:	4603      	mov	r3, r0
 800141c:	425a      	negs	r2, r3
 800141e:	f003 0303 	and.w	r3, r3, #3
 8001422:	f002 0203 	and.w	r2, r2, #3
 8001426:	bf58      	it	pl
 8001428:	4253      	negpl	r3, r2
 800142a:	3301      	adds	r3, #1
 800142c:	4a09      	ldr	r2, [pc, #36]	@ (8001454 <genNewApple+0xd0>)
 800142e:	6013      	str	r3, [r2, #0]
    } while (onSnake);
 8001430:	79fb      	ldrb	r3, [r7, #7]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d1ab      	bne.n	800138e <genNewApple+0xa>
}
 8001436:	bf00      	nop
 8001438:	bf00      	nop
 800143a:	3708      	adds	r7, #8
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	200004d8 	.word	0x200004d8
 8001444:	2aaaaaab 	.word	0x2aaaaaab
 8001448:	200004dc 	.word	0x200004dc
 800144c:	200001b0 	.word	0x200001b0
 8001450:	200004d0 	.word	0x200004d0
 8001454:	20000008 	.word	0x20000008

08001458 <SNAKE_Init>:

void SNAKE_Init(void) {
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
    srand(HAL_GetTick());
 800145e:	f000 fda5 	bl	8001fac <HAL_GetTick>
 8001462:	4603      	mov	r3, r0
 8001464:	4618      	mov	r0, r3
 8001466:	f003 fecf 	bl	8005208 <srand>
    snakelen = 3;
 800146a:	4b15      	ldr	r3, [pc, #84]	@ (80014c0 <SNAKE_Init+0x68>)
 800146c:	2203      	movs	r2, #3
 800146e:	601a      	str	r2, [r3, #0]
    current_dir = 1;
 8001470:	4b14      	ldr	r3, [pc, #80]	@ (80014c4 <SNAKE_Init+0x6c>)
 8001472:	2201      	movs	r2, #1
 8001474:	601a      	str	r2, [r3, #0]
    isover = false;
 8001476:	4b14      	ldr	r3, [pc, #80]	@ (80014c8 <SNAKE_Init+0x70>)
 8001478:	2200      	movs	r2, #0
 800147a:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < snakelen; i++) {
 800147c:	2300      	movs	r3, #0
 800147e:	607b      	str	r3, [r7, #4]
 8001480:	e013      	b.n	80014aa <SNAKE_Init+0x52>
        snake[i].x = 180 - (i * 20);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	f06f 0213 	mvn.w	r2, #19
 8001488:	fb02 f303 	mul.w	r3, r2, r3
 800148c:	f103 02b4 	add.w	r2, r3, #180	@ 0xb4
 8001490:	490e      	ldr	r1, [pc, #56]	@ (80014cc <SNAKE_Init+0x74>)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
        snake[i].y = 100;
 8001498:	4a0c      	ldr	r2, [pc, #48]	@ (80014cc <SNAKE_Init+0x74>)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	00db      	lsls	r3, r3, #3
 800149e:	4413      	add	r3, r2
 80014a0:	2264      	movs	r2, #100	@ 0x64
 80014a2:	605a      	str	r2, [r3, #4]
    for (int i = 0; i < snakelen; i++) {
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	3301      	adds	r3, #1
 80014a8:	607b      	str	r3, [r7, #4]
 80014aa:	4b05      	ldr	r3, [pc, #20]	@ (80014c0 <SNAKE_Init+0x68>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	687a      	ldr	r2, [r7, #4]
 80014b0:	429a      	cmp	r2, r3
 80014b2:	dbe6      	blt.n	8001482 <SNAKE_Init+0x2a>
    }
    genNewApple();
 80014b4:	f7ff ff66 	bl	8001384 <genNewApple>
}
 80014b8:	bf00      	nop
 80014ba:	3708      	adds	r7, #8
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	200004d0 	.word	0x200004d0
 80014c4:	200004d4 	.word	0x200004d4
 80014c8:	200004e0 	.word	0x200004e0
 80014cc:	200001b0 	.word	0x200001b0

080014d0 <SNAKE_updateGame>:

void SNAKE_updateGame(void) {
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b086      	sub	sp, #24
 80014d4:	af02      	add	r7, sp, #8
    // Save last tail segment position before updating
    int last_x = snake[snakelen - 1].x;
 80014d6:	4b66      	ldr	r3, [pc, #408]	@ (8001670 <SNAKE_updateGame+0x1a0>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	3b01      	subs	r3, #1
 80014dc:	4a65      	ldr	r2, [pc, #404]	@ (8001674 <SNAKE_updateGame+0x1a4>)
 80014de:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80014e2:	607b      	str	r3, [r7, #4]
    int last_y = snake[snakelen - 1].y;
 80014e4:	4b62      	ldr	r3, [pc, #392]	@ (8001670 <SNAKE_updateGame+0x1a0>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	3b01      	subs	r3, #1
 80014ea:	4a62      	ldr	r2, [pc, #392]	@ (8001674 <SNAKE_updateGame+0x1a4>)
 80014ec:	00db      	lsls	r3, r3, #3
 80014ee:	4413      	add	r3, r2
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	603b      	str	r3, [r7, #0]

    // Shift body segments forward
    for (int i = snakelen - 1; i > 0; i--) {
 80014f4:	4b5e      	ldr	r3, [pc, #376]	@ (8001670 <SNAKE_updateGame+0x1a0>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	3b01      	subs	r3, #1
 80014fa:	60fb      	str	r3, [r7, #12]
 80014fc:	e016      	b.n	800152c <SNAKE_updateGame+0x5c>
        snake[i].x = snake[i - 1].x;
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	3b01      	subs	r3, #1
 8001502:	4a5c      	ldr	r2, [pc, #368]	@ (8001674 <SNAKE_updateGame+0x1a4>)
 8001504:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8001508:	495a      	ldr	r1, [pc, #360]	@ (8001674 <SNAKE_updateGame+0x1a4>)
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
        snake[i].y = snake[i - 1].y;
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	3b01      	subs	r3, #1
 8001514:	4a57      	ldr	r2, [pc, #348]	@ (8001674 <SNAKE_updateGame+0x1a4>)
 8001516:	00db      	lsls	r3, r3, #3
 8001518:	4413      	add	r3, r2
 800151a:	685a      	ldr	r2, [r3, #4]
 800151c:	4955      	ldr	r1, [pc, #340]	@ (8001674 <SNAKE_updateGame+0x1a4>)
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	00db      	lsls	r3, r3, #3
 8001522:	440b      	add	r3, r1
 8001524:	605a      	str	r2, [r3, #4]
    for (int i = snakelen - 1; i > 0; i--) {
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	3b01      	subs	r3, #1
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	2b00      	cmp	r3, #0
 8001530:	dce5      	bgt.n	80014fe <SNAKE_updateGame+0x2e>
    }

    // Move head
    if (current_dir == 1) snake[0].x += 20; // right
 8001532:	4b51      	ldr	r3, [pc, #324]	@ (8001678 <SNAKE_updateGame+0x1a8>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	2b01      	cmp	r3, #1
 8001538:	d105      	bne.n	8001546 <SNAKE_updateGame+0x76>
 800153a:	4b4e      	ldr	r3, [pc, #312]	@ (8001674 <SNAKE_updateGame+0x1a4>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	3314      	adds	r3, #20
 8001540:	4a4c      	ldr	r2, [pc, #304]	@ (8001674 <SNAKE_updateGame+0x1a4>)
 8001542:	6013      	str	r3, [r2, #0]
 8001544:	e01c      	b.n	8001580 <SNAKE_updateGame+0xb0>
    else if (current_dir == 2) snake[0].y += 20; // down
 8001546:	4b4c      	ldr	r3, [pc, #304]	@ (8001678 <SNAKE_updateGame+0x1a8>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	2b02      	cmp	r3, #2
 800154c:	d105      	bne.n	800155a <SNAKE_updateGame+0x8a>
 800154e:	4b49      	ldr	r3, [pc, #292]	@ (8001674 <SNAKE_updateGame+0x1a4>)
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	3314      	adds	r3, #20
 8001554:	4a47      	ldr	r2, [pc, #284]	@ (8001674 <SNAKE_updateGame+0x1a4>)
 8001556:	6053      	str	r3, [r2, #4]
 8001558:	e012      	b.n	8001580 <SNAKE_updateGame+0xb0>
    else if (current_dir == 3) snake[0].x -= 20; // left
 800155a:	4b47      	ldr	r3, [pc, #284]	@ (8001678 <SNAKE_updateGame+0x1a8>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	2b03      	cmp	r3, #3
 8001560:	d105      	bne.n	800156e <SNAKE_updateGame+0x9e>
 8001562:	4b44      	ldr	r3, [pc, #272]	@ (8001674 <SNAKE_updateGame+0x1a4>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	3b14      	subs	r3, #20
 8001568:	4a42      	ldr	r2, [pc, #264]	@ (8001674 <SNAKE_updateGame+0x1a4>)
 800156a:	6013      	str	r3, [r2, #0]
 800156c:	e008      	b.n	8001580 <SNAKE_updateGame+0xb0>
    else if (current_dir == 4) snake[0].y -= 20; // up
 800156e:	4b42      	ldr	r3, [pc, #264]	@ (8001678 <SNAKE_updateGame+0x1a8>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	2b04      	cmp	r3, #4
 8001574:	d104      	bne.n	8001580 <SNAKE_updateGame+0xb0>
 8001576:	4b3f      	ldr	r3, [pc, #252]	@ (8001674 <SNAKE_updateGame+0x1a4>)
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	3b14      	subs	r3, #20
 800157c:	4a3d      	ldr	r2, [pc, #244]	@ (8001674 <SNAKE_updateGame+0x1a4>)
 800157e:	6053      	str	r3, [r2, #4]

    // Wrap around logic
    if (snake[0].x < 40) snake[0].x = 280;
 8001580:	4b3c      	ldr	r3, [pc, #240]	@ (8001674 <SNAKE_updateGame+0x1a4>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	2b27      	cmp	r3, #39	@ 0x27
 8001586:	dc04      	bgt.n	8001592 <SNAKE_updateGame+0xc2>
 8001588:	4b3a      	ldr	r3, [pc, #232]	@ (8001674 <SNAKE_updateGame+0x1a4>)
 800158a:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800158e:	601a      	str	r2, [r3, #0]
 8001590:	e007      	b.n	80015a2 <SNAKE_updateGame+0xd2>
    else if (snake[0].x >= 280) snake[0].x = 40;
 8001592:	4b38      	ldr	r3, [pc, #224]	@ (8001674 <SNAKE_updateGame+0x1a4>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 800159a:	db02      	blt.n	80015a2 <SNAKE_updateGame+0xd2>
 800159c:	4b35      	ldr	r3, [pc, #212]	@ (8001674 <SNAKE_updateGame+0x1a4>)
 800159e:	2228      	movs	r2, #40	@ 0x28
 80015a0:	601a      	str	r2, [r3, #0]

    if (snake[0].y < 40) snake[0].y = 200;
 80015a2:	4b34      	ldr	r3, [pc, #208]	@ (8001674 <SNAKE_updateGame+0x1a4>)
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	2b27      	cmp	r3, #39	@ 0x27
 80015a8:	dc03      	bgt.n	80015b2 <SNAKE_updateGame+0xe2>
 80015aa:	4b32      	ldr	r3, [pc, #200]	@ (8001674 <SNAKE_updateGame+0x1a4>)
 80015ac:	22c8      	movs	r2, #200	@ 0xc8
 80015ae:	605a      	str	r2, [r3, #4]
 80015b0:	e006      	b.n	80015c0 <SNAKE_updateGame+0xf0>
    else if (snake[0].y >= 200) snake[0].y = 40;
 80015b2:	4b30      	ldr	r3, [pc, #192]	@ (8001674 <SNAKE_updateGame+0x1a4>)
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	2bc7      	cmp	r3, #199	@ 0xc7
 80015b8:	dd02      	ble.n	80015c0 <SNAKE_updateGame+0xf0>
 80015ba:	4b2e      	ldr	r3, [pc, #184]	@ (8001674 <SNAKE_updateGame+0x1a4>)
 80015bc:	2228      	movs	r2, #40	@ 0x28
 80015be:	605a      	str	r2, [r3, #4]


    // Check for apple collision
    if (snake[0].x == apple_x && snake[0].y == apple_y) {
 80015c0:	4b2c      	ldr	r3, [pc, #176]	@ (8001674 <SNAKE_updateGame+0x1a4>)
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	4b2d      	ldr	r3, [pc, #180]	@ (800167c <SNAKE_updateGame+0x1ac>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d122      	bne.n	8001612 <SNAKE_updateGame+0x142>
 80015cc:	4b29      	ldr	r3, [pc, #164]	@ (8001674 <SNAKE_updateGame+0x1a4>)
 80015ce:	685a      	ldr	r2, [r3, #4]
 80015d0:	4b2b      	ldr	r3, [pc, #172]	@ (8001680 <SNAKE_updateGame+0x1b0>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d11c      	bne.n	8001612 <SNAKE_updateGame+0x142>
        if (snakelen < MAX_LEN) {
 80015d8:	4b25      	ldr	r3, [pc, #148]	@ (8001670 <SNAKE_updateGame+0x1a0>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	2b63      	cmp	r3, #99	@ 0x63
 80015de:	dc11      	bgt.n	8001604 <SNAKE_updateGame+0x134>
            // Extend the snake
            snake[snakelen].x = last_x;
 80015e0:	4b23      	ldr	r3, [pc, #140]	@ (8001670 <SNAKE_updateGame+0x1a0>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4923      	ldr	r1, [pc, #140]	@ (8001674 <SNAKE_updateGame+0x1a4>)
 80015e6:	687a      	ldr	r2, [r7, #4]
 80015e8:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
            snake[snakelen].y = last_y;
 80015ec:	4b20      	ldr	r3, [pc, #128]	@ (8001670 <SNAKE_updateGame+0x1a0>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a20      	ldr	r2, [pc, #128]	@ (8001674 <SNAKE_updateGame+0x1a4>)
 80015f2:	00db      	lsls	r3, r3, #3
 80015f4:	4413      	add	r3, r2
 80015f6:	683a      	ldr	r2, [r7, #0]
 80015f8:	605a      	str	r2, [r3, #4]
            snakelen++;
 80015fa:	4b1d      	ldr	r3, [pc, #116]	@ (8001670 <SNAKE_updateGame+0x1a0>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	3301      	adds	r3, #1
 8001600:	4a1b      	ldr	r2, [pc, #108]	@ (8001670 <SNAKE_updateGame+0x1a0>)
 8001602:	6013      	str	r3, [r2, #0]
        }
        num_body = num_apple;
 8001604:	4b1f      	ldr	r3, [pc, #124]	@ (8001684 <SNAKE_updateGame+0x1b4>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a1f      	ldr	r2, [pc, #124]	@ (8001688 <SNAKE_updateGame+0x1b8>)
 800160a:	6013      	str	r3, [r2, #0]
        genNewApple();
 800160c:	f7ff feba 	bl	8001384 <genNewApple>
 8001610:	e009      	b.n	8001626 <SNAKE_updateGame+0x156>
    } else {
        // Clear the last tail segment if no apple was eaten
        ILI9341_FillRectangle(last_x, last_y, 20, 20, ILI9341_BLACK);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	b298      	uxth	r0, r3
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	b299      	uxth	r1, r3
 800161a:	2300      	movs	r3, #0
 800161c:	9300      	str	r3, [sp, #0]
 800161e:	2314      	movs	r3, #20
 8001620:	2214      	movs	r2, #20
 8001622:	f003 fd29 	bl	8005078 <ILI9341_FillRectangle>
    }

    // Check for self-collision
    for (int i = 1; i < snakelen; i++) {
 8001626:	2301      	movs	r3, #1
 8001628:	60bb      	str	r3, [r7, #8]
 800162a:	e017      	b.n	800165c <SNAKE_updateGame+0x18c>
        if (snake[0].x == snake[i].x && snake[0].y == snake[i].y) {
 800162c:	4b11      	ldr	r3, [pc, #68]	@ (8001674 <SNAKE_updateGame+0x1a4>)
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	4910      	ldr	r1, [pc, #64]	@ (8001674 <SNAKE_updateGame+0x1a4>)
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 8001638:	429a      	cmp	r2, r3
 800163a:	d10c      	bne.n	8001656 <SNAKE_updateGame+0x186>
 800163c:	4b0d      	ldr	r3, [pc, #52]	@ (8001674 <SNAKE_updateGame+0x1a4>)
 800163e:	685a      	ldr	r2, [r3, #4]
 8001640:	490c      	ldr	r1, [pc, #48]	@ (8001674 <SNAKE_updateGame+0x1a4>)
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	00db      	lsls	r3, r3, #3
 8001646:	440b      	add	r3, r1
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	429a      	cmp	r2, r3
 800164c:	d103      	bne.n	8001656 <SNAKE_updateGame+0x186>
            isover = true;
 800164e:	4b0f      	ldr	r3, [pc, #60]	@ (800168c <SNAKE_updateGame+0x1bc>)
 8001650:	2201      	movs	r2, #1
 8001652:	701a      	strb	r2, [r3, #0]
            break;
 8001654:	e008      	b.n	8001668 <SNAKE_updateGame+0x198>
    for (int i = 1; i < snakelen; i++) {
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	3301      	adds	r3, #1
 800165a:	60bb      	str	r3, [r7, #8]
 800165c:	4b04      	ldr	r3, [pc, #16]	@ (8001670 <SNAKE_updateGame+0x1a0>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	68ba      	ldr	r2, [r7, #8]
 8001662:	429a      	cmp	r2, r3
 8001664:	dbe2      	blt.n	800162c <SNAKE_updateGame+0x15c>
        }
    }
}
 8001666:	bf00      	nop
 8001668:	bf00      	nop
 800166a:	3710      	adds	r7, #16
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	200004d0 	.word	0x200004d0
 8001674:	200001b0 	.word	0x200001b0
 8001678:	200004d4 	.word	0x200004d4
 800167c:	200004d8 	.word	0x200004d8
 8001680:	200004dc 	.word	0x200004dc
 8001684:	20000008 	.word	0x20000008
 8001688:	2000000c 	.word	0x2000000c
 800168c:	200004e0 	.word	0x200004e0

08001690 <SNAKE_drawGame>:

void SNAKE_drawGame(void) {
 8001690:	b580      	push	{r7, lr}
 8001692:	b084      	sub	sp, #16
 8001694:	af02      	add	r7, sp, #8
    // Draw the new apple
    if (num_apple == 1) ILI9341_DrawImage(apple_x, apple_y, 20, 20, body1);
 8001696:	4b76      	ldr	r3, [pc, #472]	@ (8001870 <SNAKE_drawGame+0x1e0>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	2b01      	cmp	r3, #1
 800169c:	d10c      	bne.n	80016b8 <SNAKE_drawGame+0x28>
 800169e:	4b75      	ldr	r3, [pc, #468]	@ (8001874 <SNAKE_drawGame+0x1e4>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	b298      	uxth	r0, r3
 80016a4:	4b74      	ldr	r3, [pc, #464]	@ (8001878 <SNAKE_drawGame+0x1e8>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	b299      	uxth	r1, r3
 80016aa:	4b74      	ldr	r3, [pc, #464]	@ (800187c <SNAKE_drawGame+0x1ec>)
 80016ac:	9300      	str	r3, [sp, #0]
 80016ae:	2314      	movs	r3, #20
 80016b0:	2214      	movs	r2, #20
 80016b2:	f003 fd61 	bl	8005178 <ILI9341_DrawImage>
 80016b6:	e031      	b.n	800171c <SNAKE_drawGame+0x8c>
    else if (num_apple == 2) ILI9341_DrawImage(apple_x, apple_y, 20, 20, body2);
 80016b8:	4b6d      	ldr	r3, [pc, #436]	@ (8001870 <SNAKE_drawGame+0x1e0>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	2b02      	cmp	r3, #2
 80016be:	d10c      	bne.n	80016da <SNAKE_drawGame+0x4a>
 80016c0:	4b6c      	ldr	r3, [pc, #432]	@ (8001874 <SNAKE_drawGame+0x1e4>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	b298      	uxth	r0, r3
 80016c6:	4b6c      	ldr	r3, [pc, #432]	@ (8001878 <SNAKE_drawGame+0x1e8>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	b299      	uxth	r1, r3
 80016cc:	4b6c      	ldr	r3, [pc, #432]	@ (8001880 <SNAKE_drawGame+0x1f0>)
 80016ce:	9300      	str	r3, [sp, #0]
 80016d0:	2314      	movs	r3, #20
 80016d2:	2214      	movs	r2, #20
 80016d4:	f003 fd50 	bl	8005178 <ILI9341_DrawImage>
 80016d8:	e020      	b.n	800171c <SNAKE_drawGame+0x8c>
    else if (num_apple == 3) ILI9341_DrawImage(apple_x, apple_y, 20, 20, body3);
 80016da:	4b65      	ldr	r3, [pc, #404]	@ (8001870 <SNAKE_drawGame+0x1e0>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	2b03      	cmp	r3, #3
 80016e0:	d10c      	bne.n	80016fc <SNAKE_drawGame+0x6c>
 80016e2:	4b64      	ldr	r3, [pc, #400]	@ (8001874 <SNAKE_drawGame+0x1e4>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	b298      	uxth	r0, r3
 80016e8:	4b63      	ldr	r3, [pc, #396]	@ (8001878 <SNAKE_drawGame+0x1e8>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	b299      	uxth	r1, r3
 80016ee:	4b65      	ldr	r3, [pc, #404]	@ (8001884 <SNAKE_drawGame+0x1f4>)
 80016f0:	9300      	str	r3, [sp, #0]
 80016f2:	2314      	movs	r3, #20
 80016f4:	2214      	movs	r2, #20
 80016f6:	f003 fd3f 	bl	8005178 <ILI9341_DrawImage>
 80016fa:	e00f      	b.n	800171c <SNAKE_drawGame+0x8c>
    else if (num_apple == 4) ILI9341_DrawImage(apple_x, apple_y, 20, 20, body4);
 80016fc:	4b5c      	ldr	r3, [pc, #368]	@ (8001870 <SNAKE_drawGame+0x1e0>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	2b04      	cmp	r3, #4
 8001702:	d10b      	bne.n	800171c <SNAKE_drawGame+0x8c>
 8001704:	4b5b      	ldr	r3, [pc, #364]	@ (8001874 <SNAKE_drawGame+0x1e4>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	b298      	uxth	r0, r3
 800170a:	4b5b      	ldr	r3, [pc, #364]	@ (8001878 <SNAKE_drawGame+0x1e8>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	b299      	uxth	r1, r3
 8001710:	4b5d      	ldr	r3, [pc, #372]	@ (8001888 <SNAKE_drawGame+0x1f8>)
 8001712:	9300      	str	r3, [sp, #0]
 8001714:	2314      	movs	r3, #20
 8001716:	2214      	movs	r2, #20
 8001718:	f003 fd2e 	bl	8005178 <ILI9341_DrawImage>

    // Draw the head
    if (current_dir == 1) ILI9341_DrawImage(snake[0].x, snake[0].y, 20, 20, head1);
 800171c:	4b5b      	ldr	r3, [pc, #364]	@ (800188c <SNAKE_drawGame+0x1fc>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	2b01      	cmp	r3, #1
 8001722:	d10c      	bne.n	800173e <SNAKE_drawGame+0xae>
 8001724:	4b5a      	ldr	r3, [pc, #360]	@ (8001890 <SNAKE_drawGame+0x200>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	b298      	uxth	r0, r3
 800172a:	4b59      	ldr	r3, [pc, #356]	@ (8001890 <SNAKE_drawGame+0x200>)
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	b299      	uxth	r1, r3
 8001730:	4b58      	ldr	r3, [pc, #352]	@ (8001894 <SNAKE_drawGame+0x204>)
 8001732:	9300      	str	r3, [sp, #0]
 8001734:	2314      	movs	r3, #20
 8001736:	2214      	movs	r2, #20
 8001738:	f003 fd1e 	bl	8005178 <ILI9341_DrawImage>
 800173c:	e031      	b.n	80017a2 <SNAKE_drawGame+0x112>
    else if (current_dir == 2) ILI9341_DrawImage(snake[0].x, snake[0].y, 20, 20, head2);
 800173e:	4b53      	ldr	r3, [pc, #332]	@ (800188c <SNAKE_drawGame+0x1fc>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	2b02      	cmp	r3, #2
 8001744:	d10c      	bne.n	8001760 <SNAKE_drawGame+0xd0>
 8001746:	4b52      	ldr	r3, [pc, #328]	@ (8001890 <SNAKE_drawGame+0x200>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	b298      	uxth	r0, r3
 800174c:	4b50      	ldr	r3, [pc, #320]	@ (8001890 <SNAKE_drawGame+0x200>)
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	b299      	uxth	r1, r3
 8001752:	4b51      	ldr	r3, [pc, #324]	@ (8001898 <SNAKE_drawGame+0x208>)
 8001754:	9300      	str	r3, [sp, #0]
 8001756:	2314      	movs	r3, #20
 8001758:	2214      	movs	r2, #20
 800175a:	f003 fd0d 	bl	8005178 <ILI9341_DrawImage>
 800175e:	e020      	b.n	80017a2 <SNAKE_drawGame+0x112>
    else if (current_dir == 3) ILI9341_DrawImage(snake[0].x, snake[0].y, 20, 20, head3);
 8001760:	4b4a      	ldr	r3, [pc, #296]	@ (800188c <SNAKE_drawGame+0x1fc>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	2b03      	cmp	r3, #3
 8001766:	d10c      	bne.n	8001782 <SNAKE_drawGame+0xf2>
 8001768:	4b49      	ldr	r3, [pc, #292]	@ (8001890 <SNAKE_drawGame+0x200>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	b298      	uxth	r0, r3
 800176e:	4b48      	ldr	r3, [pc, #288]	@ (8001890 <SNAKE_drawGame+0x200>)
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	b299      	uxth	r1, r3
 8001774:	4b49      	ldr	r3, [pc, #292]	@ (800189c <SNAKE_drawGame+0x20c>)
 8001776:	9300      	str	r3, [sp, #0]
 8001778:	2314      	movs	r3, #20
 800177a:	2214      	movs	r2, #20
 800177c:	f003 fcfc 	bl	8005178 <ILI9341_DrawImage>
 8001780:	e00f      	b.n	80017a2 <SNAKE_drawGame+0x112>
    else if (current_dir == 4) ILI9341_DrawImage(snake[0].x, snake[0].y, 20, 20, head4);
 8001782:	4b42      	ldr	r3, [pc, #264]	@ (800188c <SNAKE_drawGame+0x1fc>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	2b04      	cmp	r3, #4
 8001788:	d10b      	bne.n	80017a2 <SNAKE_drawGame+0x112>
 800178a:	4b41      	ldr	r3, [pc, #260]	@ (8001890 <SNAKE_drawGame+0x200>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	b298      	uxth	r0, r3
 8001790:	4b3f      	ldr	r3, [pc, #252]	@ (8001890 <SNAKE_drawGame+0x200>)
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	b299      	uxth	r1, r3
 8001796:	4b42      	ldr	r3, [pc, #264]	@ (80018a0 <SNAKE_drawGame+0x210>)
 8001798:	9300      	str	r3, [sp, #0]
 800179a:	2314      	movs	r3, #20
 800179c:	2214      	movs	r2, #20
 800179e:	f003 fceb 	bl	8005178 <ILI9341_DrawImage>

    // Draw the body
    for (int i = 1; i < snakelen; i++) {
 80017a2:	2301      	movs	r3, #1
 80017a4:	607b      	str	r3, [r7, #4]
 80017a6:	e059      	b.n	800185c <SNAKE_drawGame+0x1cc>
        int body_img_index = (num_body - 1);
 80017a8:	4b3e      	ldr	r3, [pc, #248]	@ (80018a4 <SNAKE_drawGame+0x214>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	3b01      	subs	r3, #1
 80017ae:	603b      	str	r3, [r7, #0]
        if (body_img_index == 0) ILI9341_DrawImage(snake[i].x, snake[i].y, 20, 20, body1);
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d111      	bne.n	80017da <SNAKE_drawGame+0x14a>
 80017b6:	4a36      	ldr	r2, [pc, #216]	@ (8001890 <SNAKE_drawGame+0x200>)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80017be:	b298      	uxth	r0, r3
 80017c0:	4a33      	ldr	r2, [pc, #204]	@ (8001890 <SNAKE_drawGame+0x200>)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	00db      	lsls	r3, r3, #3
 80017c6:	4413      	add	r3, r2
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	b299      	uxth	r1, r3
 80017cc:	4b2b      	ldr	r3, [pc, #172]	@ (800187c <SNAKE_drawGame+0x1ec>)
 80017ce:	9300      	str	r3, [sp, #0]
 80017d0:	2314      	movs	r3, #20
 80017d2:	2214      	movs	r2, #20
 80017d4:	f003 fcd0 	bl	8005178 <ILI9341_DrawImage>
 80017d8:	e03d      	b.n	8001856 <SNAKE_drawGame+0x1c6>
        else if (body_img_index == 1) ILI9341_DrawImage(snake[i].x, snake[i].y, 20, 20, body2);
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d111      	bne.n	8001804 <SNAKE_drawGame+0x174>
 80017e0:	4a2b      	ldr	r2, [pc, #172]	@ (8001890 <SNAKE_drawGame+0x200>)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80017e8:	b298      	uxth	r0, r3
 80017ea:	4a29      	ldr	r2, [pc, #164]	@ (8001890 <SNAKE_drawGame+0x200>)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	00db      	lsls	r3, r3, #3
 80017f0:	4413      	add	r3, r2
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	b299      	uxth	r1, r3
 80017f6:	4b22      	ldr	r3, [pc, #136]	@ (8001880 <SNAKE_drawGame+0x1f0>)
 80017f8:	9300      	str	r3, [sp, #0]
 80017fa:	2314      	movs	r3, #20
 80017fc:	2214      	movs	r2, #20
 80017fe:	f003 fcbb 	bl	8005178 <ILI9341_DrawImage>
 8001802:	e028      	b.n	8001856 <SNAKE_drawGame+0x1c6>
        else if (body_img_index == 2) ILI9341_DrawImage(snake[i].x, snake[i].y, 20, 20, body3);
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	2b02      	cmp	r3, #2
 8001808:	d111      	bne.n	800182e <SNAKE_drawGame+0x19e>
 800180a:	4a21      	ldr	r2, [pc, #132]	@ (8001890 <SNAKE_drawGame+0x200>)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001812:	b298      	uxth	r0, r3
 8001814:	4a1e      	ldr	r2, [pc, #120]	@ (8001890 <SNAKE_drawGame+0x200>)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	00db      	lsls	r3, r3, #3
 800181a:	4413      	add	r3, r2
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	b299      	uxth	r1, r3
 8001820:	4b18      	ldr	r3, [pc, #96]	@ (8001884 <SNAKE_drawGame+0x1f4>)
 8001822:	9300      	str	r3, [sp, #0]
 8001824:	2314      	movs	r3, #20
 8001826:	2214      	movs	r2, #20
 8001828:	f003 fca6 	bl	8005178 <ILI9341_DrawImage>
 800182c:	e013      	b.n	8001856 <SNAKE_drawGame+0x1c6>
        else if (body_img_index == 3) ILI9341_DrawImage(snake[i].x, snake[i].y, 20, 20, body4);
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	2b03      	cmp	r3, #3
 8001832:	d110      	bne.n	8001856 <SNAKE_drawGame+0x1c6>
 8001834:	4a16      	ldr	r2, [pc, #88]	@ (8001890 <SNAKE_drawGame+0x200>)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800183c:	b298      	uxth	r0, r3
 800183e:	4a14      	ldr	r2, [pc, #80]	@ (8001890 <SNAKE_drawGame+0x200>)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	00db      	lsls	r3, r3, #3
 8001844:	4413      	add	r3, r2
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	b299      	uxth	r1, r3
 800184a:	4b0f      	ldr	r3, [pc, #60]	@ (8001888 <SNAKE_drawGame+0x1f8>)
 800184c:	9300      	str	r3, [sp, #0]
 800184e:	2314      	movs	r3, #20
 8001850:	2214      	movs	r2, #20
 8001852:	f003 fc91 	bl	8005178 <ILI9341_DrawImage>
    for (int i = 1; i < snakelen; i++) {
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	3301      	adds	r3, #1
 800185a:	607b      	str	r3, [r7, #4]
 800185c:	4b12      	ldr	r3, [pc, #72]	@ (80018a8 <SNAKE_drawGame+0x218>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	687a      	ldr	r2, [r7, #4]
 8001862:	429a      	cmp	r2, r3
 8001864:	dba0      	blt.n	80017a8 <SNAKE_drawGame+0x118>
    }
}
 8001866:	bf00      	nop
 8001868:	bf00      	nop
 800186a:	3708      	adds	r7, #8
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	20000008 	.word	0x20000008
 8001874:	200004d8 	.word	0x200004d8
 8001878:	200004dc 	.word	0x200004dc
 800187c:	08009368 	.word	0x08009368
 8001880:	08009048 	.word	0x08009048
 8001884:	08008d28 	.word	0x08008d28
 8001888:	08008a08 	.word	0x08008a08
 800188c:	200004d4 	.word	0x200004d4
 8001890:	200001b0 	.word	0x200001b0
 8001894:	08007d88 	.word	0x08007d88
 8001898:	080080a8 	.word	0x080080a8
 800189c:	080083c8 	.word	0x080083c8
 80018a0:	080086e8 	.word	0x080086e8
 80018a4:	2000000c 	.word	0x2000000c
 80018a8:	200004d0 	.word	0x200004d0

080018ac <SNAKE_ChangeDirection>:

void SNAKE_ChangeDirection(int new_dir) {
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
    if (new_dir == 1 && current_dir == 3) return; // Right vs Left
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d103      	bne.n	80018c2 <SNAKE_ChangeDirection+0x16>
 80018ba:	4b14      	ldr	r3, [pc, #80]	@ (800190c <SNAKE_ChangeDirection+0x60>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	2b03      	cmp	r3, #3
 80018c0:	d018      	beq.n	80018f4 <SNAKE_ChangeDirection+0x48>
    if (new_dir == 3 && current_dir == 1) return; // Left vs Right
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2b03      	cmp	r3, #3
 80018c6:	d103      	bne.n	80018d0 <SNAKE_ChangeDirection+0x24>
 80018c8:	4b10      	ldr	r3, [pc, #64]	@ (800190c <SNAKE_ChangeDirection+0x60>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d013      	beq.n	80018f8 <SNAKE_ChangeDirection+0x4c>
    if (new_dir == 4 && current_dir == 2) return; // Up vs Down
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2b04      	cmp	r3, #4
 80018d4:	d103      	bne.n	80018de <SNAKE_ChangeDirection+0x32>
 80018d6:	4b0d      	ldr	r3, [pc, #52]	@ (800190c <SNAKE_ChangeDirection+0x60>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	2b02      	cmp	r3, #2
 80018dc:	d00e      	beq.n	80018fc <SNAKE_ChangeDirection+0x50>
    if (new_dir == 2 && current_dir == 4) return; // Down vs Up
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	d103      	bne.n	80018ec <SNAKE_ChangeDirection+0x40>
 80018e4:	4b09      	ldr	r3, [pc, #36]	@ (800190c <SNAKE_ChangeDirection+0x60>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	2b04      	cmp	r3, #4
 80018ea:	d009      	beq.n	8001900 <SNAKE_ChangeDirection+0x54>

    current_dir = new_dir;
 80018ec:	4a07      	ldr	r2, [pc, #28]	@ (800190c <SNAKE_ChangeDirection+0x60>)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6013      	str	r3, [r2, #0]
 80018f2:	e006      	b.n	8001902 <SNAKE_ChangeDirection+0x56>
    if (new_dir == 1 && current_dir == 3) return; // Right vs Left
 80018f4:	bf00      	nop
 80018f6:	e004      	b.n	8001902 <SNAKE_ChangeDirection+0x56>
    if (new_dir == 3 && current_dir == 1) return; // Left vs Right
 80018f8:	bf00      	nop
 80018fa:	e002      	b.n	8001902 <SNAKE_ChangeDirection+0x56>
    if (new_dir == 4 && current_dir == 2) return; // Up vs Down
 80018fc:	bf00      	nop
 80018fe:	e000      	b.n	8001902 <SNAKE_ChangeDirection+0x56>
    if (new_dir == 2 && current_dir == 4) return; // Down vs Up
 8001900:	bf00      	nop
}
 8001902:	370c      	adds	r7, #12
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr
 800190c:	200004d4 	.word	0x200004d4

08001910 <SNAKE_getOver>:

bool SNAKE_getOver(void) {
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
    return isover;
 8001914:	4b03      	ldr	r3, [pc, #12]	@ (8001924 <SNAKE_getOver+0x14>)
 8001916:	781b      	ldrb	r3, [r3, #0]
}
 8001918:	4618      	mov	r0, r3
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	200004e0 	.word	0x200004e0

08001928 <resetBall>:
static int16_t prevPlayerPaddleY, prevAiPaddleY, prevBallX, prevBallY;
static int8_t ballDX, ballDY;
static uint32_t playerLosses;
static bool gameOver = false;

static void resetBall() {
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
    ballX = ILI9341_WIDTH / 2 - BALL_SIZE / 2;
 800192c:	4b10      	ldr	r3, [pc, #64]	@ (8001970 <resetBall+0x48>)
 800192e:	229b      	movs	r2, #155	@ 0x9b
 8001930:	801a      	strh	r2, [r3, #0]
    ballY = ILI9341_HEIGHT / 2 - BALL_SIZE / 2;
 8001932:	4b10      	ldr	r3, [pc, #64]	@ (8001974 <resetBall+0x4c>)
 8001934:	2273      	movs	r2, #115	@ 0x73
 8001936:	801a      	strh	r2, [r3, #0]
    ballDX = (HAL_GetTick() % 2 == 0) ? 2 : -2;
 8001938:	f000 fb38 	bl	8001fac <HAL_GetTick>
 800193c:	4603      	mov	r3, r0
 800193e:	f003 0301 	and.w	r3, r3, #1
 8001942:	2b00      	cmp	r3, #0
 8001944:	d101      	bne.n	800194a <resetBall+0x22>
 8001946:	2202      	movs	r2, #2
 8001948:	e001      	b.n	800194e <resetBall+0x26>
 800194a:	f06f 0201 	mvn.w	r2, #1
 800194e:	4b0a      	ldr	r3, [pc, #40]	@ (8001978 <resetBall+0x50>)
 8001950:	701a      	strb	r2, [r3, #0]
    ballDY = (HAL_GetTick() % 2 == 0) ? 2 : -2;
 8001952:	f000 fb2b 	bl	8001fac <HAL_GetTick>
 8001956:	4603      	mov	r3, r0
 8001958:	f003 0301 	and.w	r3, r3, #1
 800195c:	2b00      	cmp	r3, #0
 800195e:	d101      	bne.n	8001964 <resetBall+0x3c>
 8001960:	2202      	movs	r2, #2
 8001962:	e001      	b.n	8001968 <resetBall+0x40>
 8001964:	f06f 0201 	mvn.w	r2, #1
 8001968:	4b04      	ldr	r3, [pc, #16]	@ (800197c <resetBall+0x54>)
 800196a:	701a      	strb	r2, [r3, #0]
}
 800196c:	bf00      	nop
 800196e:	bd80      	pop	{r7, pc}
 8001970:	200004e6 	.word	0x200004e6
 8001974:	200004e8 	.word	0x200004e8
 8001978:	200004f2 	.word	0x200004f2
 800197c:	200004f3 	.word	0x200004f3

08001980 <PingPong_Init>:

void PingPong_Init(void) {
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
    playerPaddleY = ILI9341_HEIGHT / 2 - PADDLE_HEIGHT / 2;
 8001984:	4b11      	ldr	r3, [pc, #68]	@ (80019cc <PingPong_Init+0x4c>)
 8001986:	2269      	movs	r2, #105	@ 0x69
 8001988:	801a      	strh	r2, [r3, #0]
    aiPaddleY = ILI9341_HEIGHT / 2 - PADDLE_HEIGHT / 2;
 800198a:	4b11      	ldr	r3, [pc, #68]	@ (80019d0 <PingPong_Init+0x50>)
 800198c:	2269      	movs	r2, #105	@ 0x69
 800198e:	801a      	strh	r2, [r3, #0]
    playerLosses = 0;
 8001990:	4b10      	ldr	r3, [pc, #64]	@ (80019d4 <PingPong_Init+0x54>)
 8001992:	2200      	movs	r2, #0
 8001994:	601a      	str	r2, [r3, #0]
    gameOver = false;
 8001996:	4b10      	ldr	r3, [pc, #64]	@ (80019d8 <PingPong_Init+0x58>)
 8001998:	2200      	movs	r2, #0
 800199a:	701a      	strb	r2, [r3, #0]
    resetBall();
 800199c:	f7ff ffc4 	bl	8001928 <resetBall>

    prevPlayerPaddleY = playerPaddleY;
 80019a0:	4b0a      	ldr	r3, [pc, #40]	@ (80019cc <PingPong_Init+0x4c>)
 80019a2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80019a6:	4b0d      	ldr	r3, [pc, #52]	@ (80019dc <PingPong_Init+0x5c>)
 80019a8:	801a      	strh	r2, [r3, #0]
    prevAiPaddleY = aiPaddleY;
 80019aa:	4b09      	ldr	r3, [pc, #36]	@ (80019d0 <PingPong_Init+0x50>)
 80019ac:	f9b3 2000 	ldrsh.w	r2, [r3]
 80019b0:	4b0b      	ldr	r3, [pc, #44]	@ (80019e0 <PingPong_Init+0x60>)
 80019b2:	801a      	strh	r2, [r3, #0]
    prevBallX = ballX;
 80019b4:	4b0b      	ldr	r3, [pc, #44]	@ (80019e4 <PingPong_Init+0x64>)
 80019b6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80019ba:	4b0b      	ldr	r3, [pc, #44]	@ (80019e8 <PingPong_Init+0x68>)
 80019bc:	801a      	strh	r2, [r3, #0]
    prevBallY = ballY;
 80019be:	4b0b      	ldr	r3, [pc, #44]	@ (80019ec <PingPong_Init+0x6c>)
 80019c0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80019c4:	4b0a      	ldr	r3, [pc, #40]	@ (80019f0 <PingPong_Init+0x70>)
 80019c6:	801a      	strh	r2, [r3, #0]
}
 80019c8:	bf00      	nop
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	200004e2 	.word	0x200004e2
 80019d0:	200004e4 	.word	0x200004e4
 80019d4:	200004f4 	.word	0x200004f4
 80019d8:	200004f8 	.word	0x200004f8
 80019dc:	200004ea 	.word	0x200004ea
 80019e0:	200004ec 	.word	0x200004ec
 80019e4:	200004e6 	.word	0x200004e6
 80019e8:	200004ee 	.word	0x200004ee
 80019ec:	200004e8 	.word	0x200004e8
 80019f0:	200004f0 	.word	0x200004f0

080019f4 <PingPong_Update>:

void PingPong_Update(bool up_button, bool down_button) {
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b084      	sub	sp, #16
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	4603      	mov	r3, r0
 80019fc:	460a      	mov	r2, r1
 80019fe:	71fb      	strb	r3, [r7, #7]
 8001a00:	4613      	mov	r3, r2
 8001a02:	71bb      	strb	r3, [r7, #6]
    if (gameOver) {
 8001a04:	4b8a      	ldr	r3, [pc, #552]	@ (8001c30 <PingPong_Update+0x23c>)
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	f040 810c 	bne.w	8001c26 <PingPong_Update+0x232>
        return;
    }

    prevPlayerPaddleY = playerPaddleY;
 8001a0e:	4b89      	ldr	r3, [pc, #548]	@ (8001c34 <PingPong_Update+0x240>)
 8001a10:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001a14:	4b88      	ldr	r3, [pc, #544]	@ (8001c38 <PingPong_Update+0x244>)
 8001a16:	801a      	strh	r2, [r3, #0]
    prevAiPaddleY = aiPaddleY;
 8001a18:	4b88      	ldr	r3, [pc, #544]	@ (8001c3c <PingPong_Update+0x248>)
 8001a1a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001a1e:	4b88      	ldr	r3, [pc, #544]	@ (8001c40 <PingPong_Update+0x24c>)
 8001a20:	801a      	strh	r2, [r3, #0]
    prevBallX = ballX;
 8001a22:	4b88      	ldr	r3, [pc, #544]	@ (8001c44 <PingPong_Update+0x250>)
 8001a24:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001a28:	4b87      	ldr	r3, [pc, #540]	@ (8001c48 <PingPong_Update+0x254>)
 8001a2a:	801a      	strh	r2, [r3, #0]
    prevBallY = ballY;
 8001a2c:	4b87      	ldr	r3, [pc, #540]	@ (8001c4c <PingPong_Update+0x258>)
 8001a2e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001a32:	4b87      	ldr	r3, [pc, #540]	@ (8001c50 <PingPong_Update+0x25c>)
 8001a34:	801a      	strh	r2, [r3, #0]

    int16_t playerSpeed = 3;
 8001a36:	2303      	movs	r3, #3
 8001a38:	81fb      	strh	r3, [r7, #14]
    if (up_button && playerPaddleY > 0) {
 8001a3a:	79fb      	ldrb	r3, [r7, #7]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d00e      	beq.n	8001a5e <PingPong_Update+0x6a>
 8001a40:	4b7c      	ldr	r3, [pc, #496]	@ (8001c34 <PingPong_Update+0x240>)
 8001a42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	dd09      	ble.n	8001a5e <PingPong_Update+0x6a>
        playerPaddleY -= playerSpeed;
 8001a4a:	4b7a      	ldr	r3, [pc, #488]	@ (8001c34 <PingPong_Update+0x240>)
 8001a4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a50:	b29a      	uxth	r2, r3
 8001a52:	89fb      	ldrh	r3, [r7, #14]
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	b29b      	uxth	r3, r3
 8001a58:	b21a      	sxth	r2, r3
 8001a5a:	4b76      	ldr	r3, [pc, #472]	@ (8001c34 <PingPong_Update+0x240>)
 8001a5c:	801a      	strh	r2, [r3, #0]
    }
    if (down_button && playerPaddleY < ILI9341_HEIGHT - PADDLE_HEIGHT) {
 8001a5e:	79bb      	ldrb	r3, [r7, #6]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d00e      	beq.n	8001a82 <PingPong_Update+0x8e>
 8001a64:	4b73      	ldr	r3, [pc, #460]	@ (8001c34 <PingPong_Update+0x240>)
 8001a66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a6a:	2bd1      	cmp	r3, #209	@ 0xd1
 8001a6c:	dc09      	bgt.n	8001a82 <PingPong_Update+0x8e>
        playerPaddleY += playerSpeed;
 8001a6e:	4b71      	ldr	r3, [pc, #452]	@ (8001c34 <PingPong_Update+0x240>)
 8001a70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a74:	b29a      	uxth	r2, r3
 8001a76:	89fb      	ldrh	r3, [r7, #14]
 8001a78:	4413      	add	r3, r2
 8001a7a:	b29b      	uxth	r3, r3
 8001a7c:	b21a      	sxth	r2, r3
 8001a7e:	4b6d      	ldr	r3, [pc, #436]	@ (8001c34 <PingPong_Update+0x240>)
 8001a80:	801a      	strh	r2, [r3, #0]
    }

    int16_t aiSpeed = 2;
 8001a82:	2302      	movs	r3, #2
 8001a84:	81bb      	strh	r3, [r7, #12]
    if (ballY > aiPaddleY + PADDLE_HEIGHT / 2) {
 8001a86:	4b71      	ldr	r3, [pc, #452]	@ (8001c4c <PingPong_Update+0x258>)
 8001a88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	4b6b      	ldr	r3, [pc, #428]	@ (8001c3c <PingPong_Update+0x248>)
 8001a90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a94:	330f      	adds	r3, #15
 8001a96:	429a      	cmp	r2, r3
 8001a98:	dd0a      	ble.n	8001ab0 <PingPong_Update+0xbc>
        aiPaddleY += aiSpeed;
 8001a9a:	4b68      	ldr	r3, [pc, #416]	@ (8001c3c <PingPong_Update+0x248>)
 8001a9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001aa0:	b29a      	uxth	r2, r3
 8001aa2:	89bb      	ldrh	r3, [r7, #12]
 8001aa4:	4413      	add	r3, r2
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	b21a      	sxth	r2, r3
 8001aaa:	4b64      	ldr	r3, [pc, #400]	@ (8001c3c <PingPong_Update+0x248>)
 8001aac:	801a      	strh	r2, [r3, #0]
 8001aae:	e012      	b.n	8001ad6 <PingPong_Update+0xe2>
    } else if (ballY < aiPaddleY + PADDLE_HEIGHT / 2) {
 8001ab0:	4b62      	ldr	r3, [pc, #392]	@ (8001c3c <PingPong_Update+0x248>)
 8001ab2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ab6:	330e      	adds	r3, #14
 8001ab8:	4a64      	ldr	r2, [pc, #400]	@ (8001c4c <PingPong_Update+0x258>)
 8001aba:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	db09      	blt.n	8001ad6 <PingPong_Update+0xe2>
        aiPaddleY -= aiSpeed;
 8001ac2:	4b5e      	ldr	r3, [pc, #376]	@ (8001c3c <PingPong_Update+0x248>)
 8001ac4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ac8:	b29a      	uxth	r2, r3
 8001aca:	89bb      	ldrh	r3, [r7, #12]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	b29b      	uxth	r3, r3
 8001ad0:	b21a      	sxth	r2, r3
 8001ad2:	4b5a      	ldr	r3, [pc, #360]	@ (8001c3c <PingPong_Update+0x248>)
 8001ad4:	801a      	strh	r2, [r3, #0]
    }

    if (aiPaddleY < 0) aiPaddleY = 0;
 8001ad6:	4b59      	ldr	r3, [pc, #356]	@ (8001c3c <PingPong_Update+0x248>)
 8001ad8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	da02      	bge.n	8001ae6 <PingPong_Update+0xf2>
 8001ae0:	4b56      	ldr	r3, [pc, #344]	@ (8001c3c <PingPong_Update+0x248>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	801a      	strh	r2, [r3, #0]
    if (aiPaddleY > ILI9341_HEIGHT - PADDLE_HEIGHT) aiPaddleY = ILI9341_HEIGHT - PADDLE_HEIGHT;
 8001ae6:	4b55      	ldr	r3, [pc, #340]	@ (8001c3c <PingPong_Update+0x248>)
 8001ae8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001aec:	2bd2      	cmp	r3, #210	@ 0xd2
 8001aee:	dd02      	ble.n	8001af6 <PingPong_Update+0x102>
 8001af0:	4b52      	ldr	r3, [pc, #328]	@ (8001c3c <PingPong_Update+0x248>)
 8001af2:	22d2      	movs	r2, #210	@ 0xd2
 8001af4:	801a      	strh	r2, [r3, #0]

    ballX += ballDX;
 8001af6:	4b57      	ldr	r3, [pc, #348]	@ (8001c54 <PingPong_Update+0x260>)
 8001af8:	f993 3000 	ldrsb.w	r3, [r3]
 8001afc:	b29a      	uxth	r2, r3
 8001afe:	4b51      	ldr	r3, [pc, #324]	@ (8001c44 <PingPong_Update+0x250>)
 8001b00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b04:	b29b      	uxth	r3, r3
 8001b06:	4413      	add	r3, r2
 8001b08:	b29b      	uxth	r3, r3
 8001b0a:	b21a      	sxth	r2, r3
 8001b0c:	4b4d      	ldr	r3, [pc, #308]	@ (8001c44 <PingPong_Update+0x250>)
 8001b0e:	801a      	strh	r2, [r3, #0]
    ballY += ballDY;
 8001b10:	4b51      	ldr	r3, [pc, #324]	@ (8001c58 <PingPong_Update+0x264>)
 8001b12:	f993 3000 	ldrsb.w	r3, [r3]
 8001b16:	b29a      	uxth	r2, r3
 8001b18:	4b4c      	ldr	r3, [pc, #304]	@ (8001c4c <PingPong_Update+0x258>)
 8001b1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b1e:	b29b      	uxth	r3, r3
 8001b20:	4413      	add	r3, r2
 8001b22:	b29b      	uxth	r3, r3
 8001b24:	b21a      	sxth	r2, r3
 8001b26:	4b49      	ldr	r3, [pc, #292]	@ (8001c4c <PingPong_Update+0x258>)
 8001b28:	801a      	strh	r2, [r3, #0]

    if (ballY <= 0 || ballY >= ILI9341_HEIGHT - BALL_SIZE) {
 8001b2a:	4b48      	ldr	r3, [pc, #288]	@ (8001c4c <PingPong_Update+0x258>)
 8001b2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	dd04      	ble.n	8001b3e <PingPong_Update+0x14a>
 8001b34:	4b45      	ldr	r3, [pc, #276]	@ (8001c4c <PingPong_Update+0x258>)
 8001b36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b3a:	2be5      	cmp	r3, #229	@ 0xe5
 8001b3c:	dd08      	ble.n	8001b50 <PingPong_Update+0x15c>
        ballDY = -ballDY;
 8001b3e:	4b46      	ldr	r3, [pc, #280]	@ (8001c58 <PingPong_Update+0x264>)
 8001b40:	f993 3000 	ldrsb.w	r3, [r3]
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	425b      	negs	r3, r3
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	b25a      	sxtb	r2, r3
 8001b4c:	4b42      	ldr	r3, [pc, #264]	@ (8001c58 <PingPong_Update+0x264>)
 8001b4e:	701a      	strb	r2, [r3, #0]
    }

    if (ballX <= 10 + PADDLE_WIDTH && ballX >= 10 &&
 8001b50:	4b3c      	ldr	r3, [pc, #240]	@ (8001c44 <PingPong_Update+0x250>)
 8001b52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b56:	2b1e      	cmp	r3, #30
 8001b58:	dc20      	bgt.n	8001b9c <PingPong_Update+0x1a8>
 8001b5a:	4b3a      	ldr	r3, [pc, #232]	@ (8001c44 <PingPong_Update+0x250>)
 8001b5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b60:	2b09      	cmp	r3, #9
 8001b62:	dd1b      	ble.n	8001b9c <PingPong_Update+0x1a8>
        ballY + BALL_SIZE >= playerPaddleY && ballY <= playerPaddleY + PADDLE_HEIGHT) {
 8001b64:	4b39      	ldr	r3, [pc, #228]	@ (8001c4c <PingPong_Update+0x258>)
 8001b66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b6a:	330a      	adds	r3, #10
 8001b6c:	4a31      	ldr	r2, [pc, #196]	@ (8001c34 <PingPong_Update+0x240>)
 8001b6e:	f9b2 2000 	ldrsh.w	r2, [r2]
    if (ballX <= 10 + PADDLE_WIDTH && ballX >= 10 &&
 8001b72:	4293      	cmp	r3, r2
 8001b74:	db12      	blt.n	8001b9c <PingPong_Update+0x1a8>
        ballY + BALL_SIZE >= playerPaddleY && ballY <= playerPaddleY + PADDLE_HEIGHT) {
 8001b76:	4b35      	ldr	r3, [pc, #212]	@ (8001c4c <PingPong_Update+0x258>)
 8001b78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	4b2d      	ldr	r3, [pc, #180]	@ (8001c34 <PingPong_Update+0x240>)
 8001b80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b84:	331e      	adds	r3, #30
 8001b86:	429a      	cmp	r2, r3
 8001b88:	dc08      	bgt.n	8001b9c <PingPong_Update+0x1a8>
        ballDX = -ballDX;
 8001b8a:	4b32      	ldr	r3, [pc, #200]	@ (8001c54 <PingPong_Update+0x260>)
 8001b8c:	f993 3000 	ldrsb.w	r3, [r3]
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	425b      	negs	r3, r3
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	b25a      	sxtb	r2, r3
 8001b98:	4b2e      	ldr	r3, [pc, #184]	@ (8001c54 <PingPong_Update+0x260>)
 8001b9a:	701a      	strb	r2, [r3, #0]
    }

    if (ballX + BALL_SIZE >= ILI9341_WIDTH - 15 && ballX + BALL_SIZE <= ILI9341_WIDTH - 15 + PADDLE_WIDTH &&
 8001b9c:	4b29      	ldr	r3, [pc, #164]	@ (8001c44 <PingPong_Update+0x250>)
 8001b9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ba2:	f5b3 7f93 	cmp.w	r3, #294	@ 0x126
 8001ba6:	dd21      	ble.n	8001bec <PingPong_Update+0x1f8>
 8001ba8:	4b26      	ldr	r3, [pc, #152]	@ (8001c44 <PingPong_Update+0x250>)
 8001baa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bae:	f5b3 7f9e 	cmp.w	r3, #316	@ 0x13c
 8001bb2:	da1b      	bge.n	8001bec <PingPong_Update+0x1f8>
        ballY + BALL_SIZE >= aiPaddleY && ballY <= aiPaddleY + PADDLE_HEIGHT) {
 8001bb4:	4b25      	ldr	r3, [pc, #148]	@ (8001c4c <PingPong_Update+0x258>)
 8001bb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bba:	330a      	adds	r3, #10
 8001bbc:	4a1f      	ldr	r2, [pc, #124]	@ (8001c3c <PingPong_Update+0x248>)
 8001bbe:	f9b2 2000 	ldrsh.w	r2, [r2]
    if (ballX + BALL_SIZE >= ILI9341_WIDTH - 15 && ballX + BALL_SIZE <= ILI9341_WIDTH - 15 + PADDLE_WIDTH &&
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	db12      	blt.n	8001bec <PingPong_Update+0x1f8>
        ballY + BALL_SIZE >= aiPaddleY && ballY <= aiPaddleY + PADDLE_HEIGHT) {
 8001bc6:	4b21      	ldr	r3, [pc, #132]	@ (8001c4c <PingPong_Update+0x258>)
 8001bc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bcc:	461a      	mov	r2, r3
 8001bce:	4b1b      	ldr	r3, [pc, #108]	@ (8001c3c <PingPong_Update+0x248>)
 8001bd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bd4:	331e      	adds	r3, #30
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	dc08      	bgt.n	8001bec <PingPong_Update+0x1f8>
        ballDX = -ballDX;
 8001bda:	4b1e      	ldr	r3, [pc, #120]	@ (8001c54 <PingPong_Update+0x260>)
 8001bdc:	f993 3000 	ldrsb.w	r3, [r3]
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	425b      	negs	r3, r3
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	b25a      	sxtb	r2, r3
 8001be8:	4b1a      	ldr	r3, [pc, #104]	@ (8001c54 <PingPong_Update+0x260>)
 8001bea:	701a      	strb	r2, [r3, #0]
    }

    if (ballX < 0) {
 8001bec:	4b15      	ldr	r3, [pc, #84]	@ (8001c44 <PingPong_Update+0x250>)
 8001bee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	da0e      	bge.n	8001c14 <PingPong_Update+0x220>
        playerLosses++;
 8001bf6:	4b19      	ldr	r3, [pc, #100]	@ (8001c5c <PingPong_Update+0x268>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	4a17      	ldr	r2, [pc, #92]	@ (8001c5c <PingPong_Update+0x268>)
 8001bfe:	6013      	str	r3, [r2, #0]
        if (playerLosses >= 5) {
 8001c00:	4b16      	ldr	r3, [pc, #88]	@ (8001c5c <PingPong_Update+0x268>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	2b04      	cmp	r3, #4
 8001c06:	d902      	bls.n	8001c0e <PingPong_Update+0x21a>
            gameOver = true;
 8001c08:	4b09      	ldr	r3, [pc, #36]	@ (8001c30 <PingPong_Update+0x23c>)
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	701a      	strb	r2, [r3, #0]
        }
        resetBall();
 8001c0e:	f7ff fe8b 	bl	8001928 <resetBall>
 8001c12:	e009      	b.n	8001c28 <PingPong_Update+0x234>
    } else if (ballX > ILI9341_WIDTH) {
 8001c14:	4b0b      	ldr	r3, [pc, #44]	@ (8001c44 <PingPong_Update+0x250>)
 8001c16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c1a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001c1e:	dd03      	ble.n	8001c28 <PingPong_Update+0x234>
        resetBall();
 8001c20:	f7ff fe82 	bl	8001928 <resetBall>
 8001c24:	e000      	b.n	8001c28 <PingPong_Update+0x234>
        return;
 8001c26:	bf00      	nop
    }
}
 8001c28:	3710      	adds	r7, #16
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	200004f8 	.word	0x200004f8
 8001c34:	200004e2 	.word	0x200004e2
 8001c38:	200004ea 	.word	0x200004ea
 8001c3c:	200004e4 	.word	0x200004e4
 8001c40:	200004ec 	.word	0x200004ec
 8001c44:	200004e6 	.word	0x200004e6
 8001c48:	200004ee 	.word	0x200004ee
 8001c4c:	200004e8 	.word	0x200004e8
 8001c50:	200004f0 	.word	0x200004f0
 8001c54:	200004f2 	.word	0x200004f2
 8001c58:	200004f3 	.word	0x200004f3
 8001c5c:	200004f4 	.word	0x200004f4

08001c60 <PingPong_Draw>:

void PingPong_Draw(void) {
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b088      	sub	sp, #32
 8001c64:	af04      	add	r7, sp, #16
    if (gameOver) {
 8001c66:	4b35      	ldr	r3, [pc, #212]	@ (8001d3c <PingPong_Draw+0xdc>)
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d017      	beq.n	8001c9e <PingPong_Draw+0x3e>
        ILI9341_FillScreen(ILI9341_BLACK);
 8001c6e:	2000      	movs	r0, #0
 8001c70:	f003 fa70 	bl	8005154 <ILI9341_FillScreen>
        char temp_msg[] = "Game Over";
 8001c74:	4a32      	ldr	r2, [pc, #200]	@ (8001d40 <PingPong_Draw+0xe0>)
 8001c76:	1d3b      	adds	r3, r7, #4
 8001c78:	ca07      	ldmia	r2, {r0, r1, r2}
 8001c7a:	c303      	stmia	r3!, {r0, r1}
 8001c7c:	801a      	strh	r2, [r3, #0]
        ILI9341_WriteString(ILI9341_WIDTH / 2 - 50, ILI9341_HEIGHT / 2, temp_msg, Font_16x26, ILI9341_RED, ILI9341_BLACK);
 8001c7e:	4b31      	ldr	r3, [pc, #196]	@ (8001d44 <PingPong_Draw+0xe4>)
 8001c80:	1d39      	adds	r1, r7, #4
 8001c82:	2200      	movs	r2, #0
 8001c84:	9202      	str	r2, [sp, #8]
 8001c86:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8001c8a:	9201      	str	r2, [sp, #4]
 8001c8c:	685a      	ldr	r2, [r3, #4]
 8001c8e:	9200      	str	r2, [sp, #0]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	460a      	mov	r2, r1
 8001c94:	2178      	movs	r1, #120	@ 0x78
 8001c96:	206e      	movs	r0, #110	@ 0x6e
 8001c98:	f003 f9a2 	bl	8004fe0 <ILI9341_WriteString>

        ILI9341_DrawImage(10, playerPaddleY, PADDLE_WIDTH, PADDLE_HEIGHT, paddle);
        ILI9341_DrawImage(ILI9341_WIDTH - 10, aiPaddleY, PADDLE_WIDTH, PADDLE_HEIGHT, paddle);
        ILI9341_DrawImage(ballX, ballY, BALL_SIZE, BALL_SIZE, ball);
    }
}
 8001c9c:	e049      	b.n	8001d32 <PingPong_Draw+0xd2>
        ILI9341_FillRectangle(10, prevPlayerPaddleY, PADDLE_WIDTH, PADDLE_HEIGHT, ILI9341_BLACK);
 8001c9e:	4b2a      	ldr	r3, [pc, #168]	@ (8001d48 <PingPong_Draw+0xe8>)
 8001ca0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ca4:	b299      	uxth	r1, r3
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	9300      	str	r3, [sp, #0]
 8001caa:	231e      	movs	r3, #30
 8001cac:	2214      	movs	r2, #20
 8001cae:	200a      	movs	r0, #10
 8001cb0:	f003 f9e2 	bl	8005078 <ILI9341_FillRectangle>
        ILI9341_FillRectangle(ILI9341_WIDTH - 15, prevAiPaddleY, PADDLE_WIDTH, PADDLE_HEIGHT, ILI9341_BLACK);
 8001cb4:	4b25      	ldr	r3, [pc, #148]	@ (8001d4c <PingPong_Draw+0xec>)
 8001cb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cba:	b299      	uxth	r1, r3
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	9300      	str	r3, [sp, #0]
 8001cc0:	231e      	movs	r3, #30
 8001cc2:	2214      	movs	r2, #20
 8001cc4:	f240 1031 	movw	r0, #305	@ 0x131
 8001cc8:	f003 f9d6 	bl	8005078 <ILI9341_FillRectangle>
        ILI9341_FillRectangle(prevBallX, prevBallY, BALL_SIZE, BALL_SIZE, ILI9341_BLACK);
 8001ccc:	4b20      	ldr	r3, [pc, #128]	@ (8001d50 <PingPong_Draw+0xf0>)
 8001cce:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cd2:	b298      	uxth	r0, r3
 8001cd4:	4b1f      	ldr	r3, [pc, #124]	@ (8001d54 <PingPong_Draw+0xf4>)
 8001cd6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cda:	b299      	uxth	r1, r3
 8001cdc:	2300      	movs	r3, #0
 8001cde:	9300      	str	r3, [sp, #0]
 8001ce0:	230a      	movs	r3, #10
 8001ce2:	220a      	movs	r2, #10
 8001ce4:	f003 f9c8 	bl	8005078 <ILI9341_FillRectangle>
        ILI9341_DrawImage(10, playerPaddleY, PADDLE_WIDTH, PADDLE_HEIGHT, paddle);
 8001ce8:	4b1b      	ldr	r3, [pc, #108]	@ (8001d58 <PingPong_Draw+0xf8>)
 8001cea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cee:	b299      	uxth	r1, r3
 8001cf0:	4b1a      	ldr	r3, [pc, #104]	@ (8001d5c <PingPong_Draw+0xfc>)
 8001cf2:	9300      	str	r3, [sp, #0]
 8001cf4:	231e      	movs	r3, #30
 8001cf6:	2214      	movs	r2, #20
 8001cf8:	200a      	movs	r0, #10
 8001cfa:	f003 fa3d 	bl	8005178 <ILI9341_DrawImage>
        ILI9341_DrawImage(ILI9341_WIDTH - 10, aiPaddleY, PADDLE_WIDTH, PADDLE_HEIGHT, paddle);
 8001cfe:	4b18      	ldr	r3, [pc, #96]	@ (8001d60 <PingPong_Draw+0x100>)
 8001d00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d04:	b299      	uxth	r1, r3
 8001d06:	4b15      	ldr	r3, [pc, #84]	@ (8001d5c <PingPong_Draw+0xfc>)
 8001d08:	9300      	str	r3, [sp, #0]
 8001d0a:	231e      	movs	r3, #30
 8001d0c:	2214      	movs	r2, #20
 8001d0e:	f44f 709b 	mov.w	r0, #310	@ 0x136
 8001d12:	f003 fa31 	bl	8005178 <ILI9341_DrawImage>
        ILI9341_DrawImage(ballX, ballY, BALL_SIZE, BALL_SIZE, ball);
 8001d16:	4b13      	ldr	r3, [pc, #76]	@ (8001d64 <PingPong_Draw+0x104>)
 8001d18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d1c:	b298      	uxth	r0, r3
 8001d1e:	4b12      	ldr	r3, [pc, #72]	@ (8001d68 <PingPong_Draw+0x108>)
 8001d20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d24:	b299      	uxth	r1, r3
 8001d26:	4b11      	ldr	r3, [pc, #68]	@ (8001d6c <PingPong_Draw+0x10c>)
 8001d28:	9300      	str	r3, [sp, #0]
 8001d2a:	230a      	movs	r3, #10
 8001d2c:	220a      	movs	r2, #10
 8001d2e:	f003 fa23 	bl	8005178 <ILI9341_DrawImage>
}
 8001d32:	bf00      	nop
 8001d34:	3710      	adds	r7, #16
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	200004f8 	.word	0x200004f8
 8001d40:	08006278 	.word	0x08006278
 8001d44:	20000020 	.word	0x20000020
 8001d48:	200004ea 	.word	0x200004ea
 8001d4c:	200004ec 	.word	0x200004ec
 8001d50:	200004ee 	.word	0x200004ee
 8001d54:	200004f0 	.word	0x200004f0
 8001d58:	200004e2 	.word	0x200004e2
 8001d5c:	08062d0c 	.word	0x08062d0c
 8001d60:	200004e4 	.word	0x200004e4
 8001d64:	200004e6 	.word	0x200004e6
 8001d68:	200004e8 	.word	0x200004e8
 8001d6c:	080631bc 	.word	0x080631bc

08001d70 <PingPong_IsGameOver>:

bool PingPong_IsGameOver(void) {
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
    return gameOver;
 8001d74:	4b03      	ldr	r3, [pc, #12]	@ (8001d84 <PingPong_IsGameOver+0x14>)
 8001d76:	781b      	ldrb	r3, [r3, #0]
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	200004f8 	.word	0x200004f8

08001d88 <MPU6050_Init>:
#include <main.h>
#include <stdio.h>

extern I2C_HandleTypeDef hi2c1;

void MPU6050_Init(void){
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b086      	sub	sp, #24
 8001d8c:	af04      	add	r7, sp, #16
	uint8_t check, data;
	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, 1000);
 8001d8e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d92:	9302      	str	r3, [sp, #8]
 8001d94:	2301      	movs	r3, #1
 8001d96:	9301      	str	r3, [sp, #4]
 8001d98:	1dfb      	adds	r3, r7, #7
 8001d9a:	9300      	str	r3, [sp, #0]
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	2275      	movs	r2, #117	@ 0x75
 8001da0:	21d0      	movs	r1, #208	@ 0xd0
 8001da2:	482a      	ldr	r0, [pc, #168]	@ (8001e4c <MPU6050_Init+0xc4>)
 8001da4:	f001 f9ee 	bl	8003184 <HAL_I2C_Mem_Read>

	if(check == 104){
 8001da8:	79fb      	ldrb	r3, [r7, #7]
 8001daa:	2b68      	cmp	r3, #104	@ 0x68
 8001dac:	d14a      	bne.n	8001e44 <MPU6050_Init+0xbc>
		data = 0;
 8001dae:	2300      	movs	r3, #0
 8001db0:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &data, 1, 1000);	//Wake up
 8001db2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001db6:	9302      	str	r3, [sp, #8]
 8001db8:	2301      	movs	r3, #1
 8001dba:	9301      	str	r3, [sp, #4]
 8001dbc:	1dbb      	adds	r3, r7, #6
 8001dbe:	9300      	str	r3, [sp, #0]
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	226b      	movs	r2, #107	@ 0x6b
 8001dc4:	21d0      	movs	r1, #208	@ 0xd0
 8001dc6:	4821      	ldr	r0, [pc, #132]	@ (8001e4c <MPU6050_Init+0xc4>)
 8001dc8:	f001 f8e2 	bl	8002f90 <HAL_I2C_Mem_Write>

		data = 0x07;
 8001dcc:	2307      	movs	r3, #7
 8001dce:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &data, 1, 1000);	//Sample Rate Divider to 7
 8001dd0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001dd4:	9302      	str	r3, [sp, #8]
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	9301      	str	r3, [sp, #4]
 8001dda:	1dbb      	adds	r3, r7, #6
 8001ddc:	9300      	str	r3, [sp, #0]
 8001dde:	2301      	movs	r3, #1
 8001de0:	2219      	movs	r2, #25
 8001de2:	21d0      	movs	r1, #208	@ 0xd0
 8001de4:	4819      	ldr	r0, [pc, #100]	@ (8001e4c <MPU6050_Init+0xc4>)
 8001de6:	f001 f8d3 	bl	8002f90 <HAL_I2C_Mem_Write>

		data = 0x00;
 8001dea:	2300      	movs	r3, #0
 8001dec:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &data, 1, 1000);	//FS_SEL = 0
 8001dee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001df2:	9302      	str	r3, [sp, #8]
 8001df4:	2301      	movs	r3, #1
 8001df6:	9301      	str	r3, [sp, #4]
 8001df8:	1dbb      	adds	r3, r7, #6
 8001dfa:	9300      	str	r3, [sp, #0]
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	221b      	movs	r2, #27
 8001e00:	21d0      	movs	r1, #208	@ 0xd0
 8001e02:	4812      	ldr	r0, [pc, #72]	@ (8001e4c <MPU6050_Init+0xc4>)
 8001e04:	f001 f8c4 	bl	8002f90 <HAL_I2C_Mem_Write>

		data = 0x00;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &data, 1, 1000);	//AFS_SEL = 0
 8001e0c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e10:	9302      	str	r3, [sp, #8]
 8001e12:	2301      	movs	r3, #1
 8001e14:	9301      	str	r3, [sp, #4]
 8001e16:	1dbb      	adds	r3, r7, #6
 8001e18:	9300      	str	r3, [sp, #0]
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	221c      	movs	r2, #28
 8001e1e:	21d0      	movs	r1, #208	@ 0xd0
 8001e20:	480a      	ldr	r0, [pc, #40]	@ (8001e4c <MPU6050_Init+0xc4>)
 8001e22:	f001 f8b5 	bl	8002f90 <HAL_I2C_Mem_Write>

		data = 0x03;
 8001e26:	2303      	movs	r3, #3
 8001e28:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, CONFIG_REG, 1, &data, 1, 1000);	//DLPF active
 8001e2a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e2e:	9302      	str	r3, [sp, #8]
 8001e30:	2301      	movs	r3, #1
 8001e32:	9301      	str	r3, [sp, #4]
 8001e34:	1dbb      	adds	r3, r7, #6
 8001e36:	9300      	str	r3, [sp, #0]
 8001e38:	2301      	movs	r3, #1
 8001e3a:	221a      	movs	r2, #26
 8001e3c:	21d0      	movs	r1, #208	@ 0xd0
 8001e3e:	4803      	ldr	r0, [pc, #12]	@ (8001e4c <MPU6050_Init+0xc4>)
 8001e40:	f001 f8a6 	bl	8002f90 <HAL_I2C_Mem_Write>
	}
}
 8001e44:	bf00      	nop
 8001e46:	3708      	adds	r7, #8
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	200000e8 	.word	0x200000e8

08001e50 <MPU6050_Read_Accel>:

// Function signature changed to use int pointers
void MPU6050_Read_Accel(int *Ax, int *Ay, int *Az){
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b08c      	sub	sp, #48	@ 0x30
 8001e54:	af04      	add	r7, sp, #16
 8001e56:	60f8      	str	r0, [r7, #12]
 8001e58:	60b9      	str	r1, [r7, #8]
 8001e5a:	607a      	str	r2, [r7, #4]
	uint8_t Rec_Data[6];
	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 8001e5c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e60:	9302      	str	r3, [sp, #8]
 8001e62:	2306      	movs	r3, #6
 8001e64:	9301      	str	r3, [sp, #4]
 8001e66:	f107 0314 	add.w	r3, r7, #20
 8001e6a:	9300      	str	r3, [sp, #0]
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	223b      	movs	r2, #59	@ 0x3b
 8001e70:	21d0      	movs	r1, #208	@ 0xd0
 8001e72:	481a      	ldr	r0, [pc, #104]	@ (8001edc <MPU6050_Read_Accel+0x8c>)
 8001e74:	f001 f986 	bl	8003184 <HAL_I2C_Mem_Read>

	int16_t Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8001e78:	7d3b      	ldrb	r3, [r7, #20]
 8001e7a:	b21b      	sxth	r3, r3
 8001e7c:	021b      	lsls	r3, r3, #8
 8001e7e:	b21a      	sxth	r2, r3
 8001e80:	7d7b      	ldrb	r3, [r7, #21]
 8001e82:	b21b      	sxth	r3, r3
 8001e84:	4313      	orrs	r3, r2
 8001e86:	83fb      	strh	r3, [r7, #30]
	int16_t Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8001e88:	7dbb      	ldrb	r3, [r7, #22]
 8001e8a:	b21b      	sxth	r3, r3
 8001e8c:	021b      	lsls	r3, r3, #8
 8001e8e:	b21a      	sxth	r2, r3
 8001e90:	7dfb      	ldrb	r3, [r7, #23]
 8001e92:	b21b      	sxth	r3, r3
 8001e94:	4313      	orrs	r3, r2
 8001e96:	83bb      	strh	r3, [r7, #28]
	int16_t Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8001e98:	7e3b      	ldrb	r3, [r7, #24]
 8001e9a:	b21b      	sxth	r3, r3
 8001e9c:	021b      	lsls	r3, r3, #8
 8001e9e:	b21a      	sxth	r2, r3
 8001ea0:	7e7b      	ldrb	r3, [r7, #25]
 8001ea2:	b21b      	sxth	r3, r3
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	837b      	strh	r3, [r7, #26]

	// The calculation remains the same, but the result is stored in an int
	*Ax = (int)(((int32_t)Accel_X_RAW + 32768) >> 4);
 8001ea8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001eac:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8001eb0:	111a      	asrs	r2, r3, #4
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	601a      	str	r2, [r3, #0]
	*Ay = (int)(((int32_t)Accel_Y_RAW + 32768) >> 4);
 8001eb6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001eba:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8001ebe:	111a      	asrs	r2, r3, #4
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	601a      	str	r2, [r3, #0]
	*Az = (int)(((int32_t)Accel_Z_RAW + 32768) >> 4);
 8001ec4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001ec8:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8001ecc:	111a      	asrs	r2, r3, #4
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	601a      	str	r2, [r3, #0]
}
 8001ed2:	bf00      	nop
 8001ed4:	3720      	adds	r7, #32
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	200000e8 	.word	0x200000e8

08001ee0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ee4:	4b0e      	ldr	r3, [pc, #56]	@ (8001f20 <HAL_Init+0x40>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a0d      	ldr	r2, [pc, #52]	@ (8001f20 <HAL_Init+0x40>)
 8001eea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001eee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ef0:	4b0b      	ldr	r3, [pc, #44]	@ (8001f20 <HAL_Init+0x40>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a0a      	ldr	r2, [pc, #40]	@ (8001f20 <HAL_Init+0x40>)
 8001ef6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001efa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001efc:	4b08      	ldr	r3, [pc, #32]	@ (8001f20 <HAL_Init+0x40>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a07      	ldr	r2, [pc, #28]	@ (8001f20 <HAL_Init+0x40>)
 8001f02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f08:	2003      	movs	r0, #3
 8001f0a:	f000 fd13 	bl	8002934 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f0e:	200f      	movs	r0, #15
 8001f10:	f000 f808 	bl	8001f24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f14:	f7fe ffec 	bl	8000ef0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f18:	2300      	movs	r3, #0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	40023c00 	.word	0x40023c00

08001f24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f2c:	4b12      	ldr	r3, [pc, #72]	@ (8001f78 <HAL_InitTick+0x54>)
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	4b12      	ldr	r3, [pc, #72]	@ (8001f7c <HAL_InitTick+0x58>)
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	4619      	mov	r1, r3
 8001f36:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f42:	4618      	mov	r0, r3
 8001f44:	f000 fd1d 	bl	8002982 <HAL_SYSTICK_Config>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d001      	beq.n	8001f52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e00e      	b.n	8001f70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2b0f      	cmp	r3, #15
 8001f56:	d80a      	bhi.n	8001f6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f58:	2200      	movs	r2, #0
 8001f5a:	6879      	ldr	r1, [r7, #4]
 8001f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f60:	f000 fcf3 	bl	800294a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f64:	4a06      	ldr	r2, [pc, #24]	@ (8001f80 <HAL_InitTick+0x5c>)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	e000      	b.n	8001f70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3708      	adds	r7, #8
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	20000004 	.word	0x20000004
 8001f7c:	20000014 	.word	0x20000014
 8001f80:	20000010 	.word	0x20000010

08001f84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f88:	4b06      	ldr	r3, [pc, #24]	@ (8001fa4 <HAL_IncTick+0x20>)
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	4b06      	ldr	r3, [pc, #24]	@ (8001fa8 <HAL_IncTick+0x24>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4413      	add	r3, r2
 8001f94:	4a04      	ldr	r2, [pc, #16]	@ (8001fa8 <HAL_IncTick+0x24>)
 8001f96:	6013      	str	r3, [r2, #0]
}
 8001f98:	bf00      	nop
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	20000014 	.word	0x20000014
 8001fa8:	200004fc 	.word	0x200004fc

08001fac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  return uwTick;
 8001fb0:	4b03      	ldr	r3, [pc, #12]	@ (8001fc0 <HAL_GetTick+0x14>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	200004fc 	.word	0x200004fc

08001fc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b084      	sub	sp, #16
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fcc:	f7ff ffee 	bl	8001fac <HAL_GetTick>
 8001fd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fdc:	d005      	beq.n	8001fea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fde:	4b0a      	ldr	r3, [pc, #40]	@ (8002008 <HAL_Delay+0x44>)
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	4413      	add	r3, r2
 8001fe8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001fea:	bf00      	nop
 8001fec:	f7ff ffde 	bl	8001fac <HAL_GetTick>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	68fa      	ldr	r2, [r7, #12]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d8f7      	bhi.n	8001fec <HAL_Delay+0x28>
  {
  }
}
 8001ffc:	bf00      	nop
 8001ffe:	bf00      	nop
 8002000:	3710      	adds	r7, #16
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	20000014 	.word	0x20000014

0800200c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b084      	sub	sp, #16
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002014:	2300      	movs	r3, #0
 8002016:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d101      	bne.n	8002022 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e033      	b.n	800208a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002026:	2b00      	cmp	r3, #0
 8002028:	d109      	bne.n	800203e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f7fe ff88 	bl	8000f40 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2200      	movs	r2, #0
 8002034:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2200      	movs	r2, #0
 800203a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002042:	f003 0310 	and.w	r3, r3, #16
 8002046:	2b00      	cmp	r3, #0
 8002048:	d118      	bne.n	800207c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800204e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002052:	f023 0302 	bic.w	r3, r3, #2
 8002056:	f043 0202 	orr.w	r2, r3, #2
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f000 faba 	bl	80025d8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2200      	movs	r2, #0
 8002068:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800206e:	f023 0303 	bic.w	r3, r3, #3
 8002072:	f043 0201 	orr.w	r2, r3, #1
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	641a      	str	r2, [r3, #64]	@ 0x40
 800207a:	e001      	b.n	8002080 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2200      	movs	r2, #0
 8002084:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002088:	7bfb      	ldrb	r3, [r7, #15]
}
 800208a:	4618      	mov	r0, r3
 800208c:	3710      	adds	r7, #16
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
	...

08002094 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002094:	b480      	push	{r7}
 8002096:	b085      	sub	sp, #20
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800209c:	2300      	movs	r3, #0
 800209e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d101      	bne.n	80020ae <HAL_ADC_Start+0x1a>
 80020aa:	2302      	movs	r3, #2
 80020ac:	e097      	b.n	80021de <HAL_ADC_Start+0x14a>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2201      	movs	r2, #1
 80020b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	f003 0301 	and.w	r3, r3, #1
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d018      	beq.n	80020f6 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	689a      	ldr	r2, [r3, #8]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f042 0201 	orr.w	r2, r2, #1
 80020d2:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80020d4:	4b45      	ldr	r3, [pc, #276]	@ (80021ec <HAL_ADC_Start+0x158>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a45      	ldr	r2, [pc, #276]	@ (80021f0 <HAL_ADC_Start+0x15c>)
 80020da:	fba2 2303 	umull	r2, r3, r2, r3
 80020de:	0c9a      	lsrs	r2, r3, #18
 80020e0:	4613      	mov	r3, r2
 80020e2:	005b      	lsls	r3, r3, #1
 80020e4:	4413      	add	r3, r2
 80020e6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80020e8:	e002      	b.n	80020f0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	3b01      	subs	r3, #1
 80020ee:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d1f9      	bne.n	80020ea <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	f003 0301 	and.w	r3, r3, #1
 8002100:	2b01      	cmp	r3, #1
 8002102:	d15f      	bne.n	80021c4 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002108:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800210c:	f023 0301 	bic.w	r3, r3, #1
 8002110:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002122:	2b00      	cmp	r3, #0
 8002124:	d007      	beq.n	8002136 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800212a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800212e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800213a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800213e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002142:	d106      	bne.n	8002152 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002148:	f023 0206 	bic.w	r2, r3, #6
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	645a      	str	r2, [r3, #68]	@ 0x44
 8002150:	e002      	b.n	8002158 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2200      	movs	r2, #0
 8002156:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2200      	movs	r2, #0
 800215c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002160:	4b24      	ldr	r3, [pc, #144]	@ (80021f4 <HAL_ADC_Start+0x160>)
 8002162:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800216c:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	f003 031f 	and.w	r3, r3, #31
 8002176:	2b00      	cmp	r3, #0
 8002178:	d10f      	bne.n	800219a <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002184:	2b00      	cmp	r3, #0
 8002186:	d129      	bne.n	80021dc <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	689a      	ldr	r2, [r3, #8]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002196:	609a      	str	r2, [r3, #8]
 8002198:	e020      	b.n	80021dc <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a16      	ldr	r2, [pc, #88]	@ (80021f8 <HAL_ADC_Start+0x164>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d11b      	bne.n	80021dc <HAL_ADC_Start+0x148>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d114      	bne.n	80021dc <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	689a      	ldr	r2, [r3, #8]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80021c0:	609a      	str	r2, [r3, #8]
 80021c2:	e00b      	b.n	80021dc <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021c8:	f043 0210 	orr.w	r2, r3, #16
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021d4:	f043 0201 	orr.w	r2, r3, #1
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80021dc:	2300      	movs	r3, #0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3714      	adds	r7, #20
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	20000004 	.word	0x20000004
 80021f0:	431bde83 	.word	0x431bde83
 80021f4:	40012300 	.word	0x40012300
 80021f8:	40012000 	.word	0x40012000

080021fc <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800220a:	2b01      	cmp	r3, #1
 800220c:	d101      	bne.n	8002212 <HAL_ADC_Stop+0x16>
 800220e:	2302      	movs	r3, #2
 8002210:	e021      	b.n	8002256 <HAL_ADC_Stop+0x5a>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2201      	movs	r2, #1
 8002216:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	689a      	ldr	r2, [r3, #8]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f022 0201 	bic.w	r2, r2, #1
 8002228:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	f003 0301 	and.w	r3, r3, #1
 8002234:	2b00      	cmp	r3, #0
 8002236:	d109      	bne.n	800224c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800223c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002240:	f023 0301 	bic.w	r3, r3, #1
 8002244:	f043 0201 	orr.w	r2, r3, #1
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2200      	movs	r2, #0
 8002250:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002254:	2300      	movs	r3, #0
}
 8002256:	4618      	mov	r0, r3
 8002258:	370c      	adds	r7, #12
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr

08002262 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002262:	b580      	push	{r7, lr}
 8002264:	b084      	sub	sp, #16
 8002266:	af00      	add	r7, sp, #0
 8002268:	6078      	str	r0, [r7, #4]
 800226a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800226c:	2300      	movs	r3, #0
 800226e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800227a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800227e:	d113      	bne.n	80022a8 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800228a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800228e:	d10b      	bne.n	80022a8 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002294:	f043 0220 	orr.w	r2, r3, #32
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2200      	movs	r2, #0
 80022a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	e063      	b.n	8002370 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80022a8:	f7ff fe80 	bl	8001fac <HAL_GetTick>
 80022ac:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80022ae:	e021      	b.n	80022f4 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022b6:	d01d      	beq.n	80022f4 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d007      	beq.n	80022ce <HAL_ADC_PollForConversion+0x6c>
 80022be:	f7ff fe75 	bl	8001fac <HAL_GetTick>
 80022c2:	4602      	mov	r2, r0
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	1ad3      	subs	r3, r2, r3
 80022c8:	683a      	ldr	r2, [r7, #0]
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d212      	bcs.n	80022f4 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0302 	and.w	r3, r3, #2
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d00b      	beq.n	80022f4 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022e0:	f043 0204 	orr.w	r2, r3, #4
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2200      	movs	r2, #0
 80022ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80022f0:	2303      	movs	r3, #3
 80022f2:	e03d      	b.n	8002370 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0302 	and.w	r3, r3, #2
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d1d6      	bne.n	80022b0 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f06f 0212 	mvn.w	r2, #18
 800230a:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002310:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d123      	bne.n	800236e <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800232a:	2b00      	cmp	r3, #0
 800232c:	d11f      	bne.n	800236e <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002334:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002338:	2b00      	cmp	r3, #0
 800233a:	d006      	beq.n	800234a <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002346:	2b00      	cmp	r3, #0
 8002348:	d111      	bne.n	800236e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800234e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800235a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d105      	bne.n	800236e <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002366:	f043 0201 	orr.w	r2, r3, #1
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 800236e:	2300      	movs	r3, #0
}
 8002370:	4618      	mov	r0, r3
 8002372:	3710      	adds	r7, #16
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}

08002378 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002378:	b480      	push	{r7}
 800237a:	b083      	sub	sp, #12
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002386:	4618      	mov	r0, r3
 8002388:	370c      	adds	r7, #12
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
	...

08002394 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002394:	b480      	push	{r7}
 8002396:	b085      	sub	sp, #20
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800239e:	2300      	movs	r3, #0
 80023a0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d101      	bne.n	80023b0 <HAL_ADC_ConfigChannel+0x1c>
 80023ac:	2302      	movs	r3, #2
 80023ae:	e105      	b.n	80025bc <HAL_ADC_ConfigChannel+0x228>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2201      	movs	r2, #1
 80023b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	2b09      	cmp	r3, #9
 80023be:	d925      	bls.n	800240c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	68d9      	ldr	r1, [r3, #12]
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	b29b      	uxth	r3, r3
 80023cc:	461a      	mov	r2, r3
 80023ce:	4613      	mov	r3, r2
 80023d0:	005b      	lsls	r3, r3, #1
 80023d2:	4413      	add	r3, r2
 80023d4:	3b1e      	subs	r3, #30
 80023d6:	2207      	movs	r2, #7
 80023d8:	fa02 f303 	lsl.w	r3, r2, r3
 80023dc:	43da      	mvns	r2, r3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	400a      	ands	r2, r1
 80023e4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	68d9      	ldr	r1, [r3, #12]
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	689a      	ldr	r2, [r3, #8]
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	4618      	mov	r0, r3
 80023f8:	4603      	mov	r3, r0
 80023fa:	005b      	lsls	r3, r3, #1
 80023fc:	4403      	add	r3, r0
 80023fe:	3b1e      	subs	r3, #30
 8002400:	409a      	lsls	r2, r3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	430a      	orrs	r2, r1
 8002408:	60da      	str	r2, [r3, #12]
 800240a:	e022      	b.n	8002452 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	6919      	ldr	r1, [r3, #16]
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	b29b      	uxth	r3, r3
 8002418:	461a      	mov	r2, r3
 800241a:	4613      	mov	r3, r2
 800241c:	005b      	lsls	r3, r3, #1
 800241e:	4413      	add	r3, r2
 8002420:	2207      	movs	r2, #7
 8002422:	fa02 f303 	lsl.w	r3, r2, r3
 8002426:	43da      	mvns	r2, r3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	400a      	ands	r2, r1
 800242e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	6919      	ldr	r1, [r3, #16]
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	689a      	ldr	r2, [r3, #8]
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	b29b      	uxth	r3, r3
 8002440:	4618      	mov	r0, r3
 8002442:	4603      	mov	r3, r0
 8002444:	005b      	lsls	r3, r3, #1
 8002446:	4403      	add	r3, r0
 8002448:	409a      	lsls	r2, r3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	430a      	orrs	r2, r1
 8002450:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	2b06      	cmp	r3, #6
 8002458:	d824      	bhi.n	80024a4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	685a      	ldr	r2, [r3, #4]
 8002464:	4613      	mov	r3, r2
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	4413      	add	r3, r2
 800246a:	3b05      	subs	r3, #5
 800246c:	221f      	movs	r2, #31
 800246e:	fa02 f303 	lsl.w	r3, r2, r3
 8002472:	43da      	mvns	r2, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	400a      	ands	r2, r1
 800247a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	b29b      	uxth	r3, r3
 8002488:	4618      	mov	r0, r3
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	685a      	ldr	r2, [r3, #4]
 800248e:	4613      	mov	r3, r2
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	4413      	add	r3, r2
 8002494:	3b05      	subs	r3, #5
 8002496:	fa00 f203 	lsl.w	r2, r0, r3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	430a      	orrs	r2, r1
 80024a0:	635a      	str	r2, [r3, #52]	@ 0x34
 80024a2:	e04c      	b.n	800253e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	2b0c      	cmp	r3, #12
 80024aa:	d824      	bhi.n	80024f6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	685a      	ldr	r2, [r3, #4]
 80024b6:	4613      	mov	r3, r2
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	4413      	add	r3, r2
 80024bc:	3b23      	subs	r3, #35	@ 0x23
 80024be:	221f      	movs	r2, #31
 80024c0:	fa02 f303 	lsl.w	r3, r2, r3
 80024c4:	43da      	mvns	r2, r3
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	400a      	ands	r2, r1
 80024cc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	b29b      	uxth	r3, r3
 80024da:	4618      	mov	r0, r3
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	685a      	ldr	r2, [r3, #4]
 80024e0:	4613      	mov	r3, r2
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	4413      	add	r3, r2
 80024e6:	3b23      	subs	r3, #35	@ 0x23
 80024e8:	fa00 f203 	lsl.w	r2, r0, r3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	430a      	orrs	r2, r1
 80024f2:	631a      	str	r2, [r3, #48]	@ 0x30
 80024f4:	e023      	b.n	800253e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	685a      	ldr	r2, [r3, #4]
 8002500:	4613      	mov	r3, r2
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	4413      	add	r3, r2
 8002506:	3b41      	subs	r3, #65	@ 0x41
 8002508:	221f      	movs	r2, #31
 800250a:	fa02 f303 	lsl.w	r3, r2, r3
 800250e:	43da      	mvns	r2, r3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	400a      	ands	r2, r1
 8002516:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	b29b      	uxth	r3, r3
 8002524:	4618      	mov	r0, r3
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	685a      	ldr	r2, [r3, #4]
 800252a:	4613      	mov	r3, r2
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	4413      	add	r3, r2
 8002530:	3b41      	subs	r3, #65	@ 0x41
 8002532:	fa00 f203 	lsl.w	r2, r0, r3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	430a      	orrs	r2, r1
 800253c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800253e:	4b22      	ldr	r3, [pc, #136]	@ (80025c8 <HAL_ADC_ConfigChannel+0x234>)
 8002540:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a21      	ldr	r2, [pc, #132]	@ (80025cc <HAL_ADC_ConfigChannel+0x238>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d109      	bne.n	8002560 <HAL_ADC_ConfigChannel+0x1cc>
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	2b12      	cmp	r3, #18
 8002552:	d105      	bne.n	8002560 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a19      	ldr	r2, [pc, #100]	@ (80025cc <HAL_ADC_ConfigChannel+0x238>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d123      	bne.n	80025b2 <HAL_ADC_ConfigChannel+0x21e>
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	2b10      	cmp	r3, #16
 8002570:	d003      	beq.n	800257a <HAL_ADC_ConfigChannel+0x1e6>
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	2b11      	cmp	r3, #17
 8002578:	d11b      	bne.n	80025b2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	2b10      	cmp	r3, #16
 800258c:	d111      	bne.n	80025b2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800258e:	4b10      	ldr	r3, [pc, #64]	@ (80025d0 <HAL_ADC_ConfigChannel+0x23c>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a10      	ldr	r2, [pc, #64]	@ (80025d4 <HAL_ADC_ConfigChannel+0x240>)
 8002594:	fba2 2303 	umull	r2, r3, r2, r3
 8002598:	0c9a      	lsrs	r2, r3, #18
 800259a:	4613      	mov	r3, r2
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	4413      	add	r3, r2
 80025a0:	005b      	lsls	r3, r3, #1
 80025a2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80025a4:	e002      	b.n	80025ac <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	3b01      	subs	r3, #1
 80025aa:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d1f9      	bne.n	80025a6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2200      	movs	r2, #0
 80025b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80025ba:	2300      	movs	r3, #0
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3714      	adds	r7, #20
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr
 80025c8:	40012300 	.word	0x40012300
 80025cc:	40012000 	.word	0x40012000
 80025d0:	20000004 	.word	0x20000004
 80025d4:	431bde83 	.word	0x431bde83

080025d8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80025d8:	b480      	push	{r7}
 80025da:	b085      	sub	sp, #20
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025e0:	4b79      	ldr	r3, [pc, #484]	@ (80027c8 <ADC_Init+0x1f0>)
 80025e2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	685a      	ldr	r2, [r3, #4]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	431a      	orrs	r2, r3
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	685a      	ldr	r2, [r3, #4]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800260c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	6859      	ldr	r1, [r3, #4]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	691b      	ldr	r3, [r3, #16]
 8002618:	021a      	lsls	r2, r3, #8
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	430a      	orrs	r2, r1
 8002620:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	685a      	ldr	r2, [r3, #4]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002630:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	6859      	ldr	r1, [r3, #4]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	689a      	ldr	r2, [r3, #8]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	430a      	orrs	r2, r1
 8002642:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	689a      	ldr	r2, [r3, #8]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002652:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	6899      	ldr	r1, [r3, #8]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	68da      	ldr	r2, [r3, #12]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	430a      	orrs	r2, r1
 8002664:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800266a:	4a58      	ldr	r2, [pc, #352]	@ (80027cc <ADC_Init+0x1f4>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d022      	beq.n	80026b6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	689a      	ldr	r2, [r3, #8]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800267e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	6899      	ldr	r1, [r3, #8]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	430a      	orrs	r2, r1
 8002690:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	689a      	ldr	r2, [r3, #8]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80026a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	6899      	ldr	r1, [r3, #8]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	430a      	orrs	r2, r1
 80026b2:	609a      	str	r2, [r3, #8]
 80026b4:	e00f      	b.n	80026d6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	689a      	ldr	r2, [r3, #8]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80026c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	689a      	ldr	r2, [r3, #8]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80026d4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	689a      	ldr	r2, [r3, #8]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f022 0202 	bic.w	r2, r2, #2
 80026e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	6899      	ldr	r1, [r3, #8]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	7e1b      	ldrb	r3, [r3, #24]
 80026f0:	005a      	lsls	r2, r3, #1
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	430a      	orrs	r2, r1
 80026f8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d01b      	beq.n	800273c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	685a      	ldr	r2, [r3, #4]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002712:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	685a      	ldr	r2, [r3, #4]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002722:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	6859      	ldr	r1, [r3, #4]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800272e:	3b01      	subs	r3, #1
 8002730:	035a      	lsls	r2, r3, #13
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	430a      	orrs	r2, r1
 8002738:	605a      	str	r2, [r3, #4]
 800273a:	e007      	b.n	800274c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	685a      	ldr	r2, [r3, #4]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800274a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800275a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	69db      	ldr	r3, [r3, #28]
 8002766:	3b01      	subs	r3, #1
 8002768:	051a      	lsls	r2, r3, #20
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	430a      	orrs	r2, r1
 8002770:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	689a      	ldr	r2, [r3, #8]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002780:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	6899      	ldr	r1, [r3, #8]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800278e:	025a      	lsls	r2, r3, #9
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	430a      	orrs	r2, r1
 8002796:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	689a      	ldr	r2, [r3, #8]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80027a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	6899      	ldr	r1, [r3, #8]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	695b      	ldr	r3, [r3, #20]
 80027b2:	029a      	lsls	r2, r3, #10
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	430a      	orrs	r2, r1
 80027ba:	609a      	str	r2, [r3, #8]
}
 80027bc:	bf00      	nop
 80027be:	3714      	adds	r7, #20
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr
 80027c8:	40012300 	.word	0x40012300
 80027cc:	0f000001 	.word	0x0f000001

080027d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b085      	sub	sp, #20
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	f003 0307 	and.w	r3, r3, #7
 80027de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027e0:	4b0c      	ldr	r3, [pc, #48]	@ (8002814 <__NVIC_SetPriorityGrouping+0x44>)
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027e6:	68ba      	ldr	r2, [r7, #8]
 80027e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80027ec:	4013      	ands	r3, r2
 80027ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80027fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002800:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002802:	4a04      	ldr	r2, [pc, #16]	@ (8002814 <__NVIC_SetPriorityGrouping+0x44>)
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	60d3      	str	r3, [r2, #12]
}
 8002808:	bf00      	nop
 800280a:	3714      	adds	r7, #20
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr
 8002814:	e000ed00 	.word	0xe000ed00

08002818 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002818:	b480      	push	{r7}
 800281a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800281c:	4b04      	ldr	r3, [pc, #16]	@ (8002830 <__NVIC_GetPriorityGrouping+0x18>)
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	0a1b      	lsrs	r3, r3, #8
 8002822:	f003 0307 	and.w	r3, r3, #7
}
 8002826:	4618      	mov	r0, r3
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr
 8002830:	e000ed00 	.word	0xe000ed00

08002834 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	4603      	mov	r3, r0
 800283c:	6039      	str	r1, [r7, #0]
 800283e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002840:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002844:	2b00      	cmp	r3, #0
 8002846:	db0a      	blt.n	800285e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	b2da      	uxtb	r2, r3
 800284c:	490c      	ldr	r1, [pc, #48]	@ (8002880 <__NVIC_SetPriority+0x4c>)
 800284e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002852:	0112      	lsls	r2, r2, #4
 8002854:	b2d2      	uxtb	r2, r2
 8002856:	440b      	add	r3, r1
 8002858:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800285c:	e00a      	b.n	8002874 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	b2da      	uxtb	r2, r3
 8002862:	4908      	ldr	r1, [pc, #32]	@ (8002884 <__NVIC_SetPriority+0x50>)
 8002864:	79fb      	ldrb	r3, [r7, #7]
 8002866:	f003 030f 	and.w	r3, r3, #15
 800286a:	3b04      	subs	r3, #4
 800286c:	0112      	lsls	r2, r2, #4
 800286e:	b2d2      	uxtb	r2, r2
 8002870:	440b      	add	r3, r1
 8002872:	761a      	strb	r2, [r3, #24]
}
 8002874:	bf00      	nop
 8002876:	370c      	adds	r7, #12
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr
 8002880:	e000e100 	.word	0xe000e100
 8002884:	e000ed00 	.word	0xe000ed00

08002888 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002888:	b480      	push	{r7}
 800288a:	b089      	sub	sp, #36	@ 0x24
 800288c:	af00      	add	r7, sp, #0
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	60b9      	str	r1, [r7, #8]
 8002892:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	f003 0307 	and.w	r3, r3, #7
 800289a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	f1c3 0307 	rsb	r3, r3, #7
 80028a2:	2b04      	cmp	r3, #4
 80028a4:	bf28      	it	cs
 80028a6:	2304      	movcs	r3, #4
 80028a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	3304      	adds	r3, #4
 80028ae:	2b06      	cmp	r3, #6
 80028b0:	d902      	bls.n	80028b8 <NVIC_EncodePriority+0x30>
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	3b03      	subs	r3, #3
 80028b6:	e000      	b.n	80028ba <NVIC_EncodePriority+0x32>
 80028b8:	2300      	movs	r3, #0
 80028ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028bc:	f04f 32ff 	mov.w	r2, #4294967295
 80028c0:	69bb      	ldr	r3, [r7, #24]
 80028c2:	fa02 f303 	lsl.w	r3, r2, r3
 80028c6:	43da      	mvns	r2, r3
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	401a      	ands	r2, r3
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028d0:	f04f 31ff 	mov.w	r1, #4294967295
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	fa01 f303 	lsl.w	r3, r1, r3
 80028da:	43d9      	mvns	r1, r3
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028e0:	4313      	orrs	r3, r2
         );
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3724      	adds	r7, #36	@ 0x24
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr
	...

080028f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b082      	sub	sp, #8
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	3b01      	subs	r3, #1
 80028fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002900:	d301      	bcc.n	8002906 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002902:	2301      	movs	r3, #1
 8002904:	e00f      	b.n	8002926 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002906:	4a0a      	ldr	r2, [pc, #40]	@ (8002930 <SysTick_Config+0x40>)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	3b01      	subs	r3, #1
 800290c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800290e:	210f      	movs	r1, #15
 8002910:	f04f 30ff 	mov.w	r0, #4294967295
 8002914:	f7ff ff8e 	bl	8002834 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002918:	4b05      	ldr	r3, [pc, #20]	@ (8002930 <SysTick_Config+0x40>)
 800291a:	2200      	movs	r2, #0
 800291c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800291e:	4b04      	ldr	r3, [pc, #16]	@ (8002930 <SysTick_Config+0x40>)
 8002920:	2207      	movs	r2, #7
 8002922:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002924:	2300      	movs	r3, #0
}
 8002926:	4618      	mov	r0, r3
 8002928:	3708      	adds	r7, #8
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	e000e010 	.word	0xe000e010

08002934 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b082      	sub	sp, #8
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	f7ff ff47 	bl	80027d0 <__NVIC_SetPriorityGrouping>
}
 8002942:	bf00      	nop
 8002944:	3708      	adds	r7, #8
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}

0800294a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800294a:	b580      	push	{r7, lr}
 800294c:	b086      	sub	sp, #24
 800294e:	af00      	add	r7, sp, #0
 8002950:	4603      	mov	r3, r0
 8002952:	60b9      	str	r1, [r7, #8]
 8002954:	607a      	str	r2, [r7, #4]
 8002956:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002958:	2300      	movs	r3, #0
 800295a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800295c:	f7ff ff5c 	bl	8002818 <__NVIC_GetPriorityGrouping>
 8002960:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	68b9      	ldr	r1, [r7, #8]
 8002966:	6978      	ldr	r0, [r7, #20]
 8002968:	f7ff ff8e 	bl	8002888 <NVIC_EncodePriority>
 800296c:	4602      	mov	r2, r0
 800296e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002972:	4611      	mov	r1, r2
 8002974:	4618      	mov	r0, r3
 8002976:	f7ff ff5d 	bl	8002834 <__NVIC_SetPriority>
}
 800297a:	bf00      	nop
 800297c:	3718      	adds	r7, #24
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}

08002982 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002982:	b580      	push	{r7, lr}
 8002984:	b082      	sub	sp, #8
 8002986:	af00      	add	r7, sp, #0
 8002988:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f7ff ffb0 	bl	80028f0 <SysTick_Config>
 8002990:	4603      	mov	r3, r0
}
 8002992:	4618      	mov	r0, r3
 8002994:	3708      	adds	r7, #8
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
	...

0800299c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800299c:	b480      	push	{r7}
 800299e:	b089      	sub	sp, #36	@ 0x24
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80029a6:	2300      	movs	r3, #0
 80029a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80029aa:	2300      	movs	r3, #0
 80029ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80029ae:	2300      	movs	r3, #0
 80029b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029b2:	2300      	movs	r3, #0
 80029b4:	61fb      	str	r3, [r7, #28]
 80029b6:	e159      	b.n	8002c6c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80029b8:	2201      	movs	r2, #1
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	fa02 f303 	lsl.w	r3, r2, r3
 80029c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	697a      	ldr	r2, [r7, #20]
 80029c8:	4013      	ands	r3, r2
 80029ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80029cc:	693a      	ldr	r2, [r7, #16]
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	429a      	cmp	r2, r3
 80029d2:	f040 8148 	bne.w	8002c66 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	f003 0303 	and.w	r3, r3, #3
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d005      	beq.n	80029ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d130      	bne.n	8002a50 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	005b      	lsls	r3, r3, #1
 80029f8:	2203      	movs	r2, #3
 80029fa:	fa02 f303 	lsl.w	r3, r2, r3
 80029fe:	43db      	mvns	r3, r3
 8002a00:	69ba      	ldr	r2, [r7, #24]
 8002a02:	4013      	ands	r3, r2
 8002a04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	68da      	ldr	r2, [r3, #12]
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	005b      	lsls	r3, r3, #1
 8002a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a12:	69ba      	ldr	r2, [r7, #24]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	69ba      	ldr	r2, [r7, #24]
 8002a1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a24:	2201      	movs	r2, #1
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2c:	43db      	mvns	r3, r3
 8002a2e:	69ba      	ldr	r2, [r7, #24]
 8002a30:	4013      	ands	r3, r2
 8002a32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	091b      	lsrs	r3, r3, #4
 8002a3a:	f003 0201 	and.w	r2, r3, #1
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	fa02 f303 	lsl.w	r3, r2, r3
 8002a44:	69ba      	ldr	r2, [r7, #24]
 8002a46:	4313      	orrs	r3, r2
 8002a48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	69ba      	ldr	r2, [r7, #24]
 8002a4e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f003 0303 	and.w	r3, r3, #3
 8002a58:	2b03      	cmp	r3, #3
 8002a5a:	d017      	beq.n	8002a8c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	005b      	lsls	r3, r3, #1
 8002a66:	2203      	movs	r2, #3
 8002a68:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6c:	43db      	mvns	r3, r3
 8002a6e:	69ba      	ldr	r2, [r7, #24]
 8002a70:	4013      	ands	r3, r2
 8002a72:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	689a      	ldr	r2, [r3, #8]
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	005b      	lsls	r3, r3, #1
 8002a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a80:	69ba      	ldr	r2, [r7, #24]
 8002a82:	4313      	orrs	r3, r2
 8002a84:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	69ba      	ldr	r2, [r7, #24]
 8002a8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	f003 0303 	and.w	r3, r3, #3
 8002a94:	2b02      	cmp	r3, #2
 8002a96:	d123      	bne.n	8002ae0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a98:	69fb      	ldr	r3, [r7, #28]
 8002a9a:	08da      	lsrs	r2, r3, #3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	3208      	adds	r2, #8
 8002aa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002aa4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	f003 0307 	and.w	r3, r3, #7
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	220f      	movs	r2, #15
 8002ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab4:	43db      	mvns	r3, r3
 8002ab6:	69ba      	ldr	r2, [r7, #24]
 8002ab8:	4013      	ands	r3, r2
 8002aba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	691a      	ldr	r2, [r3, #16]
 8002ac0:	69fb      	ldr	r3, [r7, #28]
 8002ac2:	f003 0307 	and.w	r3, r3, #7
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8002acc:	69ba      	ldr	r2, [r7, #24]
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	08da      	lsrs	r2, r3, #3
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	3208      	adds	r2, #8
 8002ada:	69b9      	ldr	r1, [r7, #24]
 8002adc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	005b      	lsls	r3, r3, #1
 8002aea:	2203      	movs	r2, #3
 8002aec:	fa02 f303 	lsl.w	r3, r2, r3
 8002af0:	43db      	mvns	r3, r3
 8002af2:	69ba      	ldr	r2, [r7, #24]
 8002af4:	4013      	ands	r3, r2
 8002af6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f003 0203 	and.w	r2, r3, #3
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	005b      	lsls	r3, r3, #1
 8002b04:	fa02 f303 	lsl.w	r3, r2, r3
 8002b08:	69ba      	ldr	r2, [r7, #24]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	69ba      	ldr	r2, [r7, #24]
 8002b12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	f000 80a2 	beq.w	8002c66 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b22:	2300      	movs	r3, #0
 8002b24:	60fb      	str	r3, [r7, #12]
 8002b26:	4b57      	ldr	r3, [pc, #348]	@ (8002c84 <HAL_GPIO_Init+0x2e8>)
 8002b28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b2a:	4a56      	ldr	r2, [pc, #344]	@ (8002c84 <HAL_GPIO_Init+0x2e8>)
 8002b2c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b30:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b32:	4b54      	ldr	r3, [pc, #336]	@ (8002c84 <HAL_GPIO_Init+0x2e8>)
 8002b34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b3a:	60fb      	str	r3, [r7, #12]
 8002b3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b3e:	4a52      	ldr	r2, [pc, #328]	@ (8002c88 <HAL_GPIO_Init+0x2ec>)
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	089b      	lsrs	r3, r3, #2
 8002b44:	3302      	adds	r3, #2
 8002b46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	f003 0303 	and.w	r3, r3, #3
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	220f      	movs	r2, #15
 8002b56:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5a:	43db      	mvns	r3, r3
 8002b5c:	69ba      	ldr	r2, [r7, #24]
 8002b5e:	4013      	ands	r3, r2
 8002b60:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4a49      	ldr	r2, [pc, #292]	@ (8002c8c <HAL_GPIO_Init+0x2f0>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d019      	beq.n	8002b9e <HAL_GPIO_Init+0x202>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4a48      	ldr	r2, [pc, #288]	@ (8002c90 <HAL_GPIO_Init+0x2f4>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d013      	beq.n	8002b9a <HAL_GPIO_Init+0x1fe>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4a47      	ldr	r2, [pc, #284]	@ (8002c94 <HAL_GPIO_Init+0x2f8>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d00d      	beq.n	8002b96 <HAL_GPIO_Init+0x1fa>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4a46      	ldr	r2, [pc, #280]	@ (8002c98 <HAL_GPIO_Init+0x2fc>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d007      	beq.n	8002b92 <HAL_GPIO_Init+0x1f6>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4a45      	ldr	r2, [pc, #276]	@ (8002c9c <HAL_GPIO_Init+0x300>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d101      	bne.n	8002b8e <HAL_GPIO_Init+0x1f2>
 8002b8a:	2304      	movs	r3, #4
 8002b8c:	e008      	b.n	8002ba0 <HAL_GPIO_Init+0x204>
 8002b8e:	2307      	movs	r3, #7
 8002b90:	e006      	b.n	8002ba0 <HAL_GPIO_Init+0x204>
 8002b92:	2303      	movs	r3, #3
 8002b94:	e004      	b.n	8002ba0 <HAL_GPIO_Init+0x204>
 8002b96:	2302      	movs	r3, #2
 8002b98:	e002      	b.n	8002ba0 <HAL_GPIO_Init+0x204>
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e000      	b.n	8002ba0 <HAL_GPIO_Init+0x204>
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	69fa      	ldr	r2, [r7, #28]
 8002ba2:	f002 0203 	and.w	r2, r2, #3
 8002ba6:	0092      	lsls	r2, r2, #2
 8002ba8:	4093      	lsls	r3, r2
 8002baa:	69ba      	ldr	r2, [r7, #24]
 8002bac:	4313      	orrs	r3, r2
 8002bae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002bb0:	4935      	ldr	r1, [pc, #212]	@ (8002c88 <HAL_GPIO_Init+0x2ec>)
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	089b      	lsrs	r3, r3, #2
 8002bb6:	3302      	adds	r3, #2
 8002bb8:	69ba      	ldr	r2, [r7, #24]
 8002bba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002bbe:	4b38      	ldr	r3, [pc, #224]	@ (8002ca0 <HAL_GPIO_Init+0x304>)
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	43db      	mvns	r3, r3
 8002bc8:	69ba      	ldr	r2, [r7, #24]
 8002bca:	4013      	ands	r3, r2
 8002bcc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d003      	beq.n	8002be2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002bda:	69ba      	ldr	r2, [r7, #24]
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002be2:	4a2f      	ldr	r2, [pc, #188]	@ (8002ca0 <HAL_GPIO_Init+0x304>)
 8002be4:	69bb      	ldr	r3, [r7, #24]
 8002be6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002be8:	4b2d      	ldr	r3, [pc, #180]	@ (8002ca0 <HAL_GPIO_Init+0x304>)
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	43db      	mvns	r3, r3
 8002bf2:	69ba      	ldr	r2, [r7, #24]
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d003      	beq.n	8002c0c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002c04:	69ba      	ldr	r2, [r7, #24]
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c0c:	4a24      	ldr	r2, [pc, #144]	@ (8002ca0 <HAL_GPIO_Init+0x304>)
 8002c0e:	69bb      	ldr	r3, [r7, #24]
 8002c10:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c12:	4b23      	ldr	r3, [pc, #140]	@ (8002ca0 <HAL_GPIO_Init+0x304>)
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	43db      	mvns	r3, r3
 8002c1c:	69ba      	ldr	r2, [r7, #24]
 8002c1e:	4013      	ands	r3, r2
 8002c20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d003      	beq.n	8002c36 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002c2e:	69ba      	ldr	r2, [r7, #24]
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c36:	4a1a      	ldr	r2, [pc, #104]	@ (8002ca0 <HAL_GPIO_Init+0x304>)
 8002c38:	69bb      	ldr	r3, [r7, #24]
 8002c3a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c3c:	4b18      	ldr	r3, [pc, #96]	@ (8002ca0 <HAL_GPIO_Init+0x304>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	43db      	mvns	r3, r3
 8002c46:	69ba      	ldr	r2, [r7, #24]
 8002c48:	4013      	ands	r3, r2
 8002c4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d003      	beq.n	8002c60 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002c58:	69ba      	ldr	r2, [r7, #24]
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c60:	4a0f      	ldr	r2, [pc, #60]	@ (8002ca0 <HAL_GPIO_Init+0x304>)
 8002c62:	69bb      	ldr	r3, [r7, #24]
 8002c64:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	3301      	adds	r3, #1
 8002c6a:	61fb      	str	r3, [r7, #28]
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	2b0f      	cmp	r3, #15
 8002c70:	f67f aea2 	bls.w	80029b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c74:	bf00      	nop
 8002c76:	bf00      	nop
 8002c78:	3724      	adds	r7, #36	@ 0x24
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr
 8002c82:	bf00      	nop
 8002c84:	40023800 	.word	0x40023800
 8002c88:	40013800 	.word	0x40013800
 8002c8c:	40020000 	.word	0x40020000
 8002c90:	40020400 	.word	0x40020400
 8002c94:	40020800 	.word	0x40020800
 8002c98:	40020c00 	.word	0x40020c00
 8002c9c:	40021000 	.word	0x40021000
 8002ca0:	40013c00 	.word	0x40013c00

08002ca4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b085      	sub	sp, #20
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	460b      	mov	r3, r1
 8002cae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	691a      	ldr	r2, [r3, #16]
 8002cb4:	887b      	ldrh	r3, [r7, #2]
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d002      	beq.n	8002cc2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	73fb      	strb	r3, [r7, #15]
 8002cc0:	e001      	b.n	8002cc6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002cc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3714      	adds	r7, #20
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr

08002cd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	460b      	mov	r3, r1
 8002cde:	807b      	strh	r3, [r7, #2]
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ce4:	787b      	ldrb	r3, [r7, #1]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d003      	beq.n	8002cf2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cea:	887a      	ldrh	r2, [r7, #2]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002cf0:	e003      	b.n	8002cfa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002cf2:	887b      	ldrh	r3, [r7, #2]
 8002cf4:	041a      	lsls	r2, r3, #16
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	619a      	str	r2, [r3, #24]
}
 8002cfa:	bf00      	nop
 8002cfc:	370c      	adds	r7, #12
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr
	...

08002d08 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b084      	sub	sp, #16
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d101      	bne.n	8002d1a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e12b      	b.n	8002f72 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d106      	bne.n	8002d34 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f7fe f966 	bl	8001000 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2224      	movs	r2, #36	@ 0x24
 8002d38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f022 0201 	bic.w	r2, r2, #1
 8002d4a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002d5a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002d6a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002d6c:	f001 fc20 	bl	80045b0 <HAL_RCC_GetPCLK1Freq>
 8002d70:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	4a81      	ldr	r2, [pc, #516]	@ (8002f7c <HAL_I2C_Init+0x274>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d807      	bhi.n	8002d8c <HAL_I2C_Init+0x84>
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	4a80      	ldr	r2, [pc, #512]	@ (8002f80 <HAL_I2C_Init+0x278>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	bf94      	ite	ls
 8002d84:	2301      	movls	r3, #1
 8002d86:	2300      	movhi	r3, #0
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	e006      	b.n	8002d9a <HAL_I2C_Init+0x92>
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	4a7d      	ldr	r2, [pc, #500]	@ (8002f84 <HAL_I2C_Init+0x27c>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	bf94      	ite	ls
 8002d94:	2301      	movls	r3, #1
 8002d96:	2300      	movhi	r3, #0
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d001      	beq.n	8002da2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e0e7      	b.n	8002f72 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	4a78      	ldr	r2, [pc, #480]	@ (8002f88 <HAL_I2C_Init+0x280>)
 8002da6:	fba2 2303 	umull	r2, r3, r2, r3
 8002daa:	0c9b      	lsrs	r3, r3, #18
 8002dac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	68ba      	ldr	r2, [r7, #8]
 8002dbe:	430a      	orrs	r2, r1
 8002dc0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	6a1b      	ldr	r3, [r3, #32]
 8002dc8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	4a6a      	ldr	r2, [pc, #424]	@ (8002f7c <HAL_I2C_Init+0x274>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d802      	bhi.n	8002ddc <HAL_I2C_Init+0xd4>
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	3301      	adds	r3, #1
 8002dda:	e009      	b.n	8002df0 <HAL_I2C_Init+0xe8>
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002de2:	fb02 f303 	mul.w	r3, r2, r3
 8002de6:	4a69      	ldr	r2, [pc, #420]	@ (8002f8c <HAL_I2C_Init+0x284>)
 8002de8:	fba2 2303 	umull	r2, r3, r2, r3
 8002dec:	099b      	lsrs	r3, r3, #6
 8002dee:	3301      	adds	r3, #1
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	6812      	ldr	r2, [r2, #0]
 8002df4:	430b      	orrs	r3, r1
 8002df6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	69db      	ldr	r3, [r3, #28]
 8002dfe:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002e02:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	495c      	ldr	r1, [pc, #368]	@ (8002f7c <HAL_I2C_Init+0x274>)
 8002e0c:	428b      	cmp	r3, r1
 8002e0e:	d819      	bhi.n	8002e44 <HAL_I2C_Init+0x13c>
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	1e59      	subs	r1, r3, #1
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	005b      	lsls	r3, r3, #1
 8002e1a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e1e:	1c59      	adds	r1, r3, #1
 8002e20:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002e24:	400b      	ands	r3, r1
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d00a      	beq.n	8002e40 <HAL_I2C_Init+0x138>
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	1e59      	subs	r1, r3, #1
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	005b      	lsls	r3, r3, #1
 8002e34:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e38:	3301      	adds	r3, #1
 8002e3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e3e:	e051      	b.n	8002ee4 <HAL_I2C_Init+0x1dc>
 8002e40:	2304      	movs	r3, #4
 8002e42:	e04f      	b.n	8002ee4 <HAL_I2C_Init+0x1dc>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d111      	bne.n	8002e70 <HAL_I2C_Init+0x168>
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	1e58      	subs	r0, r3, #1
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6859      	ldr	r1, [r3, #4]
 8002e54:	460b      	mov	r3, r1
 8002e56:	005b      	lsls	r3, r3, #1
 8002e58:	440b      	add	r3, r1
 8002e5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e5e:	3301      	adds	r3, #1
 8002e60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	bf0c      	ite	eq
 8002e68:	2301      	moveq	r3, #1
 8002e6a:	2300      	movne	r3, #0
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	e012      	b.n	8002e96 <HAL_I2C_Init+0x18e>
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	1e58      	subs	r0, r3, #1
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6859      	ldr	r1, [r3, #4]
 8002e78:	460b      	mov	r3, r1
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	440b      	add	r3, r1
 8002e7e:	0099      	lsls	r1, r3, #2
 8002e80:	440b      	add	r3, r1
 8002e82:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e86:	3301      	adds	r3, #1
 8002e88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	bf0c      	ite	eq
 8002e90:	2301      	moveq	r3, #1
 8002e92:	2300      	movne	r3, #0
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d001      	beq.n	8002e9e <HAL_I2C_Init+0x196>
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e022      	b.n	8002ee4 <HAL_I2C_Init+0x1dc>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d10e      	bne.n	8002ec4 <HAL_I2C_Init+0x1bc>
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	1e58      	subs	r0, r3, #1
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6859      	ldr	r1, [r3, #4]
 8002eae:	460b      	mov	r3, r1
 8002eb0:	005b      	lsls	r3, r3, #1
 8002eb2:	440b      	add	r3, r1
 8002eb4:	fbb0 f3f3 	udiv	r3, r0, r3
 8002eb8:	3301      	adds	r3, #1
 8002eba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ebe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002ec2:	e00f      	b.n	8002ee4 <HAL_I2C_Init+0x1dc>
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	1e58      	subs	r0, r3, #1
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6859      	ldr	r1, [r3, #4]
 8002ecc:	460b      	mov	r3, r1
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	440b      	add	r3, r1
 8002ed2:	0099      	lsls	r1, r3, #2
 8002ed4:	440b      	add	r3, r1
 8002ed6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002eda:	3301      	adds	r3, #1
 8002edc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ee0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002ee4:	6879      	ldr	r1, [r7, #4]
 8002ee6:	6809      	ldr	r1, [r1, #0]
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	69da      	ldr	r2, [r3, #28]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6a1b      	ldr	r3, [r3, #32]
 8002efe:	431a      	orrs	r2, r3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	430a      	orrs	r2, r1
 8002f06:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002f12:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	6911      	ldr	r1, [r2, #16]
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	68d2      	ldr	r2, [r2, #12]
 8002f1e:	4311      	orrs	r1, r2
 8002f20:	687a      	ldr	r2, [r7, #4]
 8002f22:	6812      	ldr	r2, [r2, #0]
 8002f24:	430b      	orrs	r3, r1
 8002f26:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	695a      	ldr	r2, [r3, #20]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	699b      	ldr	r3, [r3, #24]
 8002f3a:	431a      	orrs	r2, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	430a      	orrs	r2, r1
 8002f42:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f042 0201 	orr.w	r2, r2, #1
 8002f52:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2200      	movs	r2, #0
 8002f58:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2220      	movs	r2, #32
 8002f5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2200      	movs	r2, #0
 8002f66:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002f70:	2300      	movs	r3, #0
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3710      	adds	r7, #16
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	000186a0 	.word	0x000186a0
 8002f80:	001e847f 	.word	0x001e847f
 8002f84:	003d08ff 	.word	0x003d08ff
 8002f88:	431bde83 	.word	0x431bde83
 8002f8c:	10624dd3 	.word	0x10624dd3

08002f90 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b088      	sub	sp, #32
 8002f94:	af02      	add	r7, sp, #8
 8002f96:	60f8      	str	r0, [r7, #12]
 8002f98:	4608      	mov	r0, r1
 8002f9a:	4611      	mov	r1, r2
 8002f9c:	461a      	mov	r2, r3
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	817b      	strh	r3, [r7, #10]
 8002fa2:	460b      	mov	r3, r1
 8002fa4:	813b      	strh	r3, [r7, #8]
 8002fa6:	4613      	mov	r3, r2
 8002fa8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002faa:	f7fe ffff 	bl	8001fac <HAL_GetTick>
 8002fae:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	2b20      	cmp	r3, #32
 8002fba:	f040 80d9 	bne.w	8003170 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	9300      	str	r3, [sp, #0]
 8002fc2:	2319      	movs	r3, #25
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	496d      	ldr	r1, [pc, #436]	@ (800317c <HAL_I2C_Mem_Write+0x1ec>)
 8002fc8:	68f8      	ldr	r0, [r7, #12]
 8002fca:	f000 fc8b 	bl	80038e4 <I2C_WaitOnFlagUntilTimeout>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d001      	beq.n	8002fd8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002fd4:	2302      	movs	r3, #2
 8002fd6:	e0cc      	b.n	8003172 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d101      	bne.n	8002fe6 <HAL_I2C_Mem_Write+0x56>
 8002fe2:	2302      	movs	r3, #2
 8002fe4:	e0c5      	b.n	8003172 <HAL_I2C_Mem_Write+0x1e2>
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2201      	movs	r2, #1
 8002fea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 0301 	and.w	r3, r3, #1
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d007      	beq.n	800300c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f042 0201 	orr.w	r2, r2, #1
 800300a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800301a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2221      	movs	r2, #33	@ 0x21
 8003020:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2240      	movs	r2, #64	@ 0x40
 8003028:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2200      	movs	r2, #0
 8003030:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	6a3a      	ldr	r2, [r7, #32]
 8003036:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800303c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003042:	b29a      	uxth	r2, r3
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	4a4d      	ldr	r2, [pc, #308]	@ (8003180 <HAL_I2C_Mem_Write+0x1f0>)
 800304c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800304e:	88f8      	ldrh	r0, [r7, #6]
 8003050:	893a      	ldrh	r2, [r7, #8]
 8003052:	8979      	ldrh	r1, [r7, #10]
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	9301      	str	r3, [sp, #4]
 8003058:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800305a:	9300      	str	r3, [sp, #0]
 800305c:	4603      	mov	r3, r0
 800305e:	68f8      	ldr	r0, [r7, #12]
 8003060:	f000 fac2 	bl	80035e8 <I2C_RequestMemoryWrite>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d052      	beq.n	8003110 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e081      	b.n	8003172 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800306e:	697a      	ldr	r2, [r7, #20]
 8003070:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003072:	68f8      	ldr	r0, [r7, #12]
 8003074:	f000 fd50 	bl	8003b18 <I2C_WaitOnTXEFlagUntilTimeout>
 8003078:	4603      	mov	r3, r0
 800307a:	2b00      	cmp	r3, #0
 800307c:	d00d      	beq.n	800309a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003082:	2b04      	cmp	r3, #4
 8003084:	d107      	bne.n	8003096 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003094:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e06b      	b.n	8003172 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800309e:	781a      	ldrb	r2, [r3, #0]
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030aa:	1c5a      	adds	r2, r3, #1
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030b4:	3b01      	subs	r3, #1
 80030b6:	b29a      	uxth	r2, r3
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	3b01      	subs	r3, #1
 80030c4:	b29a      	uxth	r2, r3
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	695b      	ldr	r3, [r3, #20]
 80030d0:	f003 0304 	and.w	r3, r3, #4
 80030d4:	2b04      	cmp	r3, #4
 80030d6:	d11b      	bne.n	8003110 <HAL_I2C_Mem_Write+0x180>
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d017      	beq.n	8003110 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030e4:	781a      	ldrb	r2, [r3, #0]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030f0:	1c5a      	adds	r2, r3, #1
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030fa:	3b01      	subs	r3, #1
 80030fc:	b29a      	uxth	r2, r3
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003106:	b29b      	uxth	r3, r3
 8003108:	3b01      	subs	r3, #1
 800310a:	b29a      	uxth	r2, r3
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003114:	2b00      	cmp	r3, #0
 8003116:	d1aa      	bne.n	800306e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003118:	697a      	ldr	r2, [r7, #20]
 800311a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800311c:	68f8      	ldr	r0, [r7, #12]
 800311e:	f000 fd43 	bl	8003ba8 <I2C_WaitOnBTFFlagUntilTimeout>
 8003122:	4603      	mov	r3, r0
 8003124:	2b00      	cmp	r3, #0
 8003126:	d00d      	beq.n	8003144 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800312c:	2b04      	cmp	r3, #4
 800312e:	d107      	bne.n	8003140 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800313e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e016      	b.n	8003172 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003152:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2220      	movs	r2, #32
 8003158:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2200      	movs	r2, #0
 8003160:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2200      	movs	r2, #0
 8003168:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800316c:	2300      	movs	r3, #0
 800316e:	e000      	b.n	8003172 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003170:	2302      	movs	r3, #2
  }
}
 8003172:	4618      	mov	r0, r3
 8003174:	3718      	adds	r7, #24
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	00100002 	.word	0x00100002
 8003180:	ffff0000 	.word	0xffff0000

08003184 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b08c      	sub	sp, #48	@ 0x30
 8003188:	af02      	add	r7, sp, #8
 800318a:	60f8      	str	r0, [r7, #12]
 800318c:	4608      	mov	r0, r1
 800318e:	4611      	mov	r1, r2
 8003190:	461a      	mov	r2, r3
 8003192:	4603      	mov	r3, r0
 8003194:	817b      	strh	r3, [r7, #10]
 8003196:	460b      	mov	r3, r1
 8003198:	813b      	strh	r3, [r7, #8]
 800319a:	4613      	mov	r3, r2
 800319c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800319e:	f7fe ff05 	bl	8001fac <HAL_GetTick>
 80031a2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	2b20      	cmp	r3, #32
 80031ae:	f040 8214 	bne.w	80035da <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031b4:	9300      	str	r3, [sp, #0]
 80031b6:	2319      	movs	r3, #25
 80031b8:	2201      	movs	r2, #1
 80031ba:	497b      	ldr	r1, [pc, #492]	@ (80033a8 <HAL_I2C_Mem_Read+0x224>)
 80031bc:	68f8      	ldr	r0, [r7, #12]
 80031be:	f000 fb91 	bl	80038e4 <I2C_WaitOnFlagUntilTimeout>
 80031c2:	4603      	mov	r3, r0
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d001      	beq.n	80031cc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80031c8:	2302      	movs	r3, #2
 80031ca:	e207      	b.n	80035dc <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d101      	bne.n	80031da <HAL_I2C_Mem_Read+0x56>
 80031d6:	2302      	movs	r3, #2
 80031d8:	e200      	b.n	80035dc <HAL_I2C_Mem_Read+0x458>
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2201      	movs	r2, #1
 80031de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 0301 	and.w	r3, r3, #1
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d007      	beq.n	8003200 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f042 0201 	orr.w	r2, r2, #1
 80031fe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800320e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2222      	movs	r2, #34	@ 0x22
 8003214:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2240      	movs	r2, #64	@ 0x40
 800321c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2200      	movs	r2, #0
 8003224:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800322a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003230:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003236:	b29a      	uxth	r2, r3
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	4a5b      	ldr	r2, [pc, #364]	@ (80033ac <HAL_I2C_Mem_Read+0x228>)
 8003240:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003242:	88f8      	ldrh	r0, [r7, #6]
 8003244:	893a      	ldrh	r2, [r7, #8]
 8003246:	8979      	ldrh	r1, [r7, #10]
 8003248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800324a:	9301      	str	r3, [sp, #4]
 800324c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800324e:	9300      	str	r3, [sp, #0]
 8003250:	4603      	mov	r3, r0
 8003252:	68f8      	ldr	r0, [r7, #12]
 8003254:	f000 fa5e 	bl	8003714 <I2C_RequestMemoryRead>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d001      	beq.n	8003262 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e1bc      	b.n	80035dc <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003266:	2b00      	cmp	r3, #0
 8003268:	d113      	bne.n	8003292 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800326a:	2300      	movs	r3, #0
 800326c:	623b      	str	r3, [r7, #32]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	695b      	ldr	r3, [r3, #20]
 8003274:	623b      	str	r3, [r7, #32]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	699b      	ldr	r3, [r3, #24]
 800327c:	623b      	str	r3, [r7, #32]
 800327e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800328e:	601a      	str	r2, [r3, #0]
 8003290:	e190      	b.n	80035b4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003296:	2b01      	cmp	r3, #1
 8003298:	d11b      	bne.n	80032d2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80032a8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032aa:	2300      	movs	r3, #0
 80032ac:	61fb      	str	r3, [r7, #28]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	695b      	ldr	r3, [r3, #20]
 80032b4:	61fb      	str	r3, [r7, #28]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	699b      	ldr	r3, [r3, #24]
 80032bc:	61fb      	str	r3, [r7, #28]
 80032be:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032ce:	601a      	str	r2, [r3, #0]
 80032d0:	e170      	b.n	80035b4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d11b      	bne.n	8003312 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80032e8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80032f8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032fa:	2300      	movs	r3, #0
 80032fc:	61bb      	str	r3, [r7, #24]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	695b      	ldr	r3, [r3, #20]
 8003304:	61bb      	str	r3, [r7, #24]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	699b      	ldr	r3, [r3, #24]
 800330c:	61bb      	str	r3, [r7, #24]
 800330e:	69bb      	ldr	r3, [r7, #24]
 8003310:	e150      	b.n	80035b4 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003312:	2300      	movs	r3, #0
 8003314:	617b      	str	r3, [r7, #20]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	695b      	ldr	r3, [r3, #20]
 800331c:	617b      	str	r3, [r7, #20]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	699b      	ldr	r3, [r3, #24]
 8003324:	617b      	str	r3, [r7, #20]
 8003326:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003328:	e144      	b.n	80035b4 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800332e:	2b03      	cmp	r3, #3
 8003330:	f200 80f1 	bhi.w	8003516 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003338:	2b01      	cmp	r3, #1
 800333a:	d123      	bne.n	8003384 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800333c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800333e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003340:	68f8      	ldr	r0, [r7, #12]
 8003342:	f000 fc79 	bl	8003c38 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003346:	4603      	mov	r3, r0
 8003348:	2b00      	cmp	r3, #0
 800334a:	d001      	beq.n	8003350 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	e145      	b.n	80035dc <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	691a      	ldr	r2, [r3, #16]
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800335a:	b2d2      	uxtb	r2, r2
 800335c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003362:	1c5a      	adds	r2, r3, #1
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800336c:	3b01      	subs	r3, #1
 800336e:	b29a      	uxth	r2, r3
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003378:	b29b      	uxth	r3, r3
 800337a:	3b01      	subs	r3, #1
 800337c:	b29a      	uxth	r2, r3
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003382:	e117      	b.n	80035b4 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003388:	2b02      	cmp	r3, #2
 800338a:	d14e      	bne.n	800342a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800338c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800338e:	9300      	str	r3, [sp, #0]
 8003390:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003392:	2200      	movs	r2, #0
 8003394:	4906      	ldr	r1, [pc, #24]	@ (80033b0 <HAL_I2C_Mem_Read+0x22c>)
 8003396:	68f8      	ldr	r0, [r7, #12]
 8003398:	f000 faa4 	bl	80038e4 <I2C_WaitOnFlagUntilTimeout>
 800339c:	4603      	mov	r3, r0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d008      	beq.n	80033b4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e11a      	b.n	80035dc <HAL_I2C_Mem_Read+0x458>
 80033a6:	bf00      	nop
 80033a8:	00100002 	.word	0x00100002
 80033ac:	ffff0000 	.word	0xffff0000
 80033b0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	691a      	ldr	r2, [r3, #16]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ce:	b2d2      	uxtb	r2, r2
 80033d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033d6:	1c5a      	adds	r2, r3, #1
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033e0:	3b01      	subs	r3, #1
 80033e2:	b29a      	uxth	r2, r3
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033ec:	b29b      	uxth	r3, r3
 80033ee:	3b01      	subs	r3, #1
 80033f0:	b29a      	uxth	r2, r3
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	691a      	ldr	r2, [r3, #16]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003400:	b2d2      	uxtb	r2, r2
 8003402:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003408:	1c5a      	adds	r2, r3, #1
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003412:	3b01      	subs	r3, #1
 8003414:	b29a      	uxth	r2, r3
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800341e:	b29b      	uxth	r3, r3
 8003420:	3b01      	subs	r3, #1
 8003422:	b29a      	uxth	r2, r3
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003428:	e0c4      	b.n	80035b4 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800342a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800342c:	9300      	str	r3, [sp, #0]
 800342e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003430:	2200      	movs	r2, #0
 8003432:	496c      	ldr	r1, [pc, #432]	@ (80035e4 <HAL_I2C_Mem_Read+0x460>)
 8003434:	68f8      	ldr	r0, [r7, #12]
 8003436:	f000 fa55 	bl	80038e4 <I2C_WaitOnFlagUntilTimeout>
 800343a:	4603      	mov	r3, r0
 800343c:	2b00      	cmp	r3, #0
 800343e:	d001      	beq.n	8003444 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e0cb      	b.n	80035dc <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003452:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	691a      	ldr	r2, [r3, #16]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800345e:	b2d2      	uxtb	r2, r2
 8003460:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003466:	1c5a      	adds	r2, r3, #1
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003470:	3b01      	subs	r3, #1
 8003472:	b29a      	uxth	r2, r3
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800347c:	b29b      	uxth	r3, r3
 800347e:	3b01      	subs	r3, #1
 8003480:	b29a      	uxth	r2, r3
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003488:	9300      	str	r3, [sp, #0]
 800348a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800348c:	2200      	movs	r2, #0
 800348e:	4955      	ldr	r1, [pc, #340]	@ (80035e4 <HAL_I2C_Mem_Read+0x460>)
 8003490:	68f8      	ldr	r0, [r7, #12]
 8003492:	f000 fa27 	bl	80038e4 <I2C_WaitOnFlagUntilTimeout>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d001      	beq.n	80034a0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e09d      	b.n	80035dc <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	691a      	ldr	r2, [r3, #16]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ba:	b2d2      	uxtb	r2, r2
 80034bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034c2:	1c5a      	adds	r2, r3, #1
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034cc:	3b01      	subs	r3, #1
 80034ce:	b29a      	uxth	r2, r3
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034d8:	b29b      	uxth	r3, r3
 80034da:	3b01      	subs	r3, #1
 80034dc:	b29a      	uxth	r2, r3
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	691a      	ldr	r2, [r3, #16]
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ec:	b2d2      	uxtb	r2, r2
 80034ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034f4:	1c5a      	adds	r2, r3, #1
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034fe:	3b01      	subs	r3, #1
 8003500:	b29a      	uxth	r2, r3
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800350a:	b29b      	uxth	r3, r3
 800350c:	3b01      	subs	r3, #1
 800350e:	b29a      	uxth	r2, r3
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003514:	e04e      	b.n	80035b4 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003516:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003518:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800351a:	68f8      	ldr	r0, [r7, #12]
 800351c:	f000 fb8c 	bl	8003c38 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003520:	4603      	mov	r3, r0
 8003522:	2b00      	cmp	r3, #0
 8003524:	d001      	beq.n	800352a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e058      	b.n	80035dc <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	691a      	ldr	r2, [r3, #16]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003534:	b2d2      	uxtb	r2, r2
 8003536:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800353c:	1c5a      	adds	r2, r3, #1
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003546:	3b01      	subs	r3, #1
 8003548:	b29a      	uxth	r2, r3
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003552:	b29b      	uxth	r3, r3
 8003554:	3b01      	subs	r3, #1
 8003556:	b29a      	uxth	r2, r3
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	695b      	ldr	r3, [r3, #20]
 8003562:	f003 0304 	and.w	r3, r3, #4
 8003566:	2b04      	cmp	r3, #4
 8003568:	d124      	bne.n	80035b4 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800356e:	2b03      	cmp	r3, #3
 8003570:	d107      	bne.n	8003582 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003580:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	691a      	ldr	r2, [r3, #16]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800358c:	b2d2      	uxtb	r2, r2
 800358e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003594:	1c5a      	adds	r2, r3, #1
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800359e:	3b01      	subs	r3, #1
 80035a0:	b29a      	uxth	r2, r3
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035aa:	b29b      	uxth	r3, r3
 80035ac:	3b01      	subs	r3, #1
 80035ae:	b29a      	uxth	r2, r3
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	f47f aeb6 	bne.w	800332a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2220      	movs	r2, #32
 80035c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2200      	movs	r2, #0
 80035ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80035d6:	2300      	movs	r3, #0
 80035d8:	e000      	b.n	80035dc <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80035da:	2302      	movs	r3, #2
  }
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3728      	adds	r7, #40	@ 0x28
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	00010004 	.word	0x00010004

080035e8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b088      	sub	sp, #32
 80035ec:	af02      	add	r7, sp, #8
 80035ee:	60f8      	str	r0, [r7, #12]
 80035f0:	4608      	mov	r0, r1
 80035f2:	4611      	mov	r1, r2
 80035f4:	461a      	mov	r2, r3
 80035f6:	4603      	mov	r3, r0
 80035f8:	817b      	strh	r3, [r7, #10]
 80035fa:	460b      	mov	r3, r1
 80035fc:	813b      	strh	r3, [r7, #8]
 80035fe:	4613      	mov	r3, r2
 8003600:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003610:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003614:	9300      	str	r3, [sp, #0]
 8003616:	6a3b      	ldr	r3, [r7, #32]
 8003618:	2200      	movs	r2, #0
 800361a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800361e:	68f8      	ldr	r0, [r7, #12]
 8003620:	f000 f960 	bl	80038e4 <I2C_WaitOnFlagUntilTimeout>
 8003624:	4603      	mov	r3, r0
 8003626:	2b00      	cmp	r3, #0
 8003628:	d00d      	beq.n	8003646 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003634:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003638:	d103      	bne.n	8003642 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003640:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	e05f      	b.n	8003706 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003646:	897b      	ldrh	r3, [r7, #10]
 8003648:	b2db      	uxtb	r3, r3
 800364a:	461a      	mov	r2, r3
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003654:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003658:	6a3a      	ldr	r2, [r7, #32]
 800365a:	492d      	ldr	r1, [pc, #180]	@ (8003710 <I2C_RequestMemoryWrite+0x128>)
 800365c:	68f8      	ldr	r0, [r7, #12]
 800365e:	f000 f9bb 	bl	80039d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003662:	4603      	mov	r3, r0
 8003664:	2b00      	cmp	r3, #0
 8003666:	d001      	beq.n	800366c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e04c      	b.n	8003706 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800366c:	2300      	movs	r3, #0
 800366e:	617b      	str	r3, [r7, #20]
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	695b      	ldr	r3, [r3, #20]
 8003676:	617b      	str	r3, [r7, #20]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	699b      	ldr	r3, [r3, #24]
 800367e:	617b      	str	r3, [r7, #20]
 8003680:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003682:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003684:	6a39      	ldr	r1, [r7, #32]
 8003686:	68f8      	ldr	r0, [r7, #12]
 8003688:	f000 fa46 	bl	8003b18 <I2C_WaitOnTXEFlagUntilTimeout>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d00d      	beq.n	80036ae <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003696:	2b04      	cmp	r3, #4
 8003698:	d107      	bne.n	80036aa <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036a8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e02b      	b.n	8003706 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80036ae:	88fb      	ldrh	r3, [r7, #6]
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d105      	bne.n	80036c0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80036b4:	893b      	ldrh	r3, [r7, #8]
 80036b6:	b2da      	uxtb	r2, r3
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	611a      	str	r2, [r3, #16]
 80036be:	e021      	b.n	8003704 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80036c0:	893b      	ldrh	r3, [r7, #8]
 80036c2:	0a1b      	lsrs	r3, r3, #8
 80036c4:	b29b      	uxth	r3, r3
 80036c6:	b2da      	uxtb	r2, r3
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036d0:	6a39      	ldr	r1, [r7, #32]
 80036d2:	68f8      	ldr	r0, [r7, #12]
 80036d4:	f000 fa20 	bl	8003b18 <I2C_WaitOnTXEFlagUntilTimeout>
 80036d8:	4603      	mov	r3, r0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d00d      	beq.n	80036fa <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036e2:	2b04      	cmp	r3, #4
 80036e4:	d107      	bne.n	80036f6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036f4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e005      	b.n	8003706 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80036fa:	893b      	ldrh	r3, [r7, #8]
 80036fc:	b2da      	uxtb	r2, r3
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003704:	2300      	movs	r3, #0
}
 8003706:	4618      	mov	r0, r3
 8003708:	3718      	adds	r7, #24
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	00010002 	.word	0x00010002

08003714 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b088      	sub	sp, #32
 8003718:	af02      	add	r7, sp, #8
 800371a:	60f8      	str	r0, [r7, #12]
 800371c:	4608      	mov	r0, r1
 800371e:	4611      	mov	r1, r2
 8003720:	461a      	mov	r2, r3
 8003722:	4603      	mov	r3, r0
 8003724:	817b      	strh	r3, [r7, #10]
 8003726:	460b      	mov	r3, r1
 8003728:	813b      	strh	r3, [r7, #8]
 800372a:	4613      	mov	r3, r2
 800372c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800373c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800374c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800374e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003750:	9300      	str	r3, [sp, #0]
 8003752:	6a3b      	ldr	r3, [r7, #32]
 8003754:	2200      	movs	r2, #0
 8003756:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800375a:	68f8      	ldr	r0, [r7, #12]
 800375c:	f000 f8c2 	bl	80038e4 <I2C_WaitOnFlagUntilTimeout>
 8003760:	4603      	mov	r3, r0
 8003762:	2b00      	cmp	r3, #0
 8003764:	d00d      	beq.n	8003782 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003770:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003774:	d103      	bne.n	800377e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800377c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800377e:	2303      	movs	r3, #3
 8003780:	e0aa      	b.n	80038d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003782:	897b      	ldrh	r3, [r7, #10]
 8003784:	b2db      	uxtb	r3, r3
 8003786:	461a      	mov	r2, r3
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003790:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003794:	6a3a      	ldr	r2, [r7, #32]
 8003796:	4952      	ldr	r1, [pc, #328]	@ (80038e0 <I2C_RequestMemoryRead+0x1cc>)
 8003798:	68f8      	ldr	r0, [r7, #12]
 800379a:	f000 f91d 	bl	80039d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800379e:	4603      	mov	r3, r0
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d001      	beq.n	80037a8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e097      	b.n	80038d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037a8:	2300      	movs	r3, #0
 80037aa:	617b      	str	r3, [r7, #20]
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	695b      	ldr	r3, [r3, #20]
 80037b2:	617b      	str	r3, [r7, #20]
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	699b      	ldr	r3, [r3, #24]
 80037ba:	617b      	str	r3, [r7, #20]
 80037bc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80037be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037c0:	6a39      	ldr	r1, [r7, #32]
 80037c2:	68f8      	ldr	r0, [r7, #12]
 80037c4:	f000 f9a8 	bl	8003b18 <I2C_WaitOnTXEFlagUntilTimeout>
 80037c8:	4603      	mov	r3, r0
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d00d      	beq.n	80037ea <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037d2:	2b04      	cmp	r3, #4
 80037d4:	d107      	bne.n	80037e6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037e4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e076      	b.n	80038d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80037ea:	88fb      	ldrh	r3, [r7, #6]
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d105      	bne.n	80037fc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80037f0:	893b      	ldrh	r3, [r7, #8]
 80037f2:	b2da      	uxtb	r2, r3
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	611a      	str	r2, [r3, #16]
 80037fa:	e021      	b.n	8003840 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80037fc:	893b      	ldrh	r3, [r7, #8]
 80037fe:	0a1b      	lsrs	r3, r3, #8
 8003800:	b29b      	uxth	r3, r3
 8003802:	b2da      	uxtb	r2, r3
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800380a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800380c:	6a39      	ldr	r1, [r7, #32]
 800380e:	68f8      	ldr	r0, [r7, #12]
 8003810:	f000 f982 	bl	8003b18 <I2C_WaitOnTXEFlagUntilTimeout>
 8003814:	4603      	mov	r3, r0
 8003816:	2b00      	cmp	r3, #0
 8003818:	d00d      	beq.n	8003836 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800381e:	2b04      	cmp	r3, #4
 8003820:	d107      	bne.n	8003832 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003830:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e050      	b.n	80038d8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003836:	893b      	ldrh	r3, [r7, #8]
 8003838:	b2da      	uxtb	r2, r3
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003840:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003842:	6a39      	ldr	r1, [r7, #32]
 8003844:	68f8      	ldr	r0, [r7, #12]
 8003846:	f000 f967 	bl	8003b18 <I2C_WaitOnTXEFlagUntilTimeout>
 800384a:	4603      	mov	r3, r0
 800384c:	2b00      	cmp	r3, #0
 800384e:	d00d      	beq.n	800386c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003854:	2b04      	cmp	r3, #4
 8003856:	d107      	bne.n	8003868 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003866:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	e035      	b.n	80038d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800387a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800387c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800387e:	9300      	str	r3, [sp, #0]
 8003880:	6a3b      	ldr	r3, [r7, #32]
 8003882:	2200      	movs	r2, #0
 8003884:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003888:	68f8      	ldr	r0, [r7, #12]
 800388a:	f000 f82b 	bl	80038e4 <I2C_WaitOnFlagUntilTimeout>
 800388e:	4603      	mov	r3, r0
 8003890:	2b00      	cmp	r3, #0
 8003892:	d00d      	beq.n	80038b0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800389e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80038a2:	d103      	bne.n	80038ac <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80038aa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80038ac:	2303      	movs	r3, #3
 80038ae:	e013      	b.n	80038d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80038b0:	897b      	ldrh	r3, [r7, #10]
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	f043 0301 	orr.w	r3, r3, #1
 80038b8:	b2da      	uxtb	r2, r3
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80038c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038c2:	6a3a      	ldr	r2, [r7, #32]
 80038c4:	4906      	ldr	r1, [pc, #24]	@ (80038e0 <I2C_RequestMemoryRead+0x1cc>)
 80038c6:	68f8      	ldr	r0, [r7, #12]
 80038c8:	f000 f886 	bl	80039d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80038cc:	4603      	mov	r3, r0
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d001      	beq.n	80038d6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e000      	b.n	80038d8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80038d6:	2300      	movs	r3, #0
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3718      	adds	r7, #24
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}
 80038e0:	00010002 	.word	0x00010002

080038e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b084      	sub	sp, #16
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	60f8      	str	r0, [r7, #12]
 80038ec:	60b9      	str	r1, [r7, #8]
 80038ee:	603b      	str	r3, [r7, #0]
 80038f0:	4613      	mov	r3, r2
 80038f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038f4:	e048      	b.n	8003988 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038fc:	d044      	beq.n	8003988 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038fe:	f7fe fb55 	bl	8001fac <HAL_GetTick>
 8003902:	4602      	mov	r2, r0
 8003904:	69bb      	ldr	r3, [r7, #24]
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	683a      	ldr	r2, [r7, #0]
 800390a:	429a      	cmp	r2, r3
 800390c:	d302      	bcc.n	8003914 <I2C_WaitOnFlagUntilTimeout+0x30>
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d139      	bne.n	8003988 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	0c1b      	lsrs	r3, r3, #16
 8003918:	b2db      	uxtb	r3, r3
 800391a:	2b01      	cmp	r3, #1
 800391c:	d10d      	bne.n	800393a <I2C_WaitOnFlagUntilTimeout+0x56>
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	695b      	ldr	r3, [r3, #20]
 8003924:	43da      	mvns	r2, r3
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	4013      	ands	r3, r2
 800392a:	b29b      	uxth	r3, r3
 800392c:	2b00      	cmp	r3, #0
 800392e:	bf0c      	ite	eq
 8003930:	2301      	moveq	r3, #1
 8003932:	2300      	movne	r3, #0
 8003934:	b2db      	uxtb	r3, r3
 8003936:	461a      	mov	r2, r3
 8003938:	e00c      	b.n	8003954 <I2C_WaitOnFlagUntilTimeout+0x70>
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	699b      	ldr	r3, [r3, #24]
 8003940:	43da      	mvns	r2, r3
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	4013      	ands	r3, r2
 8003946:	b29b      	uxth	r3, r3
 8003948:	2b00      	cmp	r3, #0
 800394a:	bf0c      	ite	eq
 800394c:	2301      	moveq	r3, #1
 800394e:	2300      	movne	r3, #0
 8003950:	b2db      	uxtb	r3, r3
 8003952:	461a      	mov	r2, r3
 8003954:	79fb      	ldrb	r3, [r7, #7]
 8003956:	429a      	cmp	r2, r3
 8003958:	d116      	bne.n	8003988 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2200      	movs	r2, #0
 800395e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2220      	movs	r2, #32
 8003964:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2200      	movs	r2, #0
 800396c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003974:	f043 0220 	orr.w	r2, r3, #32
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2200      	movs	r2, #0
 8003980:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e023      	b.n	80039d0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	0c1b      	lsrs	r3, r3, #16
 800398c:	b2db      	uxtb	r3, r3
 800398e:	2b01      	cmp	r3, #1
 8003990:	d10d      	bne.n	80039ae <I2C_WaitOnFlagUntilTimeout+0xca>
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	695b      	ldr	r3, [r3, #20]
 8003998:	43da      	mvns	r2, r3
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	4013      	ands	r3, r2
 800399e:	b29b      	uxth	r3, r3
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	bf0c      	ite	eq
 80039a4:	2301      	moveq	r3, #1
 80039a6:	2300      	movne	r3, #0
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	461a      	mov	r2, r3
 80039ac:	e00c      	b.n	80039c8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	699b      	ldr	r3, [r3, #24]
 80039b4:	43da      	mvns	r2, r3
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	4013      	ands	r3, r2
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	2b00      	cmp	r3, #0
 80039be:	bf0c      	ite	eq
 80039c0:	2301      	moveq	r3, #1
 80039c2:	2300      	movne	r3, #0
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	461a      	mov	r2, r3
 80039c8:	79fb      	ldrb	r3, [r7, #7]
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d093      	beq.n	80038f6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80039ce:	2300      	movs	r3, #0
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3710      	adds	r7, #16
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}

080039d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b084      	sub	sp, #16
 80039dc:	af00      	add	r7, sp, #0
 80039de:	60f8      	str	r0, [r7, #12]
 80039e0:	60b9      	str	r1, [r7, #8]
 80039e2:	607a      	str	r2, [r7, #4]
 80039e4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80039e6:	e071      	b.n	8003acc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	695b      	ldr	r3, [r3, #20]
 80039ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039f6:	d123      	bne.n	8003a40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a06:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003a10:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2200      	movs	r2, #0
 8003a16:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2220      	movs	r2, #32
 8003a1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2200      	movs	r2, #0
 8003a24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a2c:	f043 0204 	orr.w	r2, r3, #4
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2200      	movs	r2, #0
 8003a38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e067      	b.n	8003b10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a46:	d041      	beq.n	8003acc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a48:	f7fe fab0 	bl	8001fac <HAL_GetTick>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d302      	bcc.n	8003a5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d136      	bne.n	8003acc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	0c1b      	lsrs	r3, r3, #16
 8003a62:	b2db      	uxtb	r3, r3
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d10c      	bne.n	8003a82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	695b      	ldr	r3, [r3, #20]
 8003a6e:	43da      	mvns	r2, r3
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	4013      	ands	r3, r2
 8003a74:	b29b      	uxth	r3, r3
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	bf14      	ite	ne
 8003a7a:	2301      	movne	r3, #1
 8003a7c:	2300      	moveq	r3, #0
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	e00b      	b.n	8003a9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	699b      	ldr	r3, [r3, #24]
 8003a88:	43da      	mvns	r2, r3
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	bf14      	ite	ne
 8003a94:	2301      	movne	r3, #1
 8003a96:	2300      	moveq	r3, #0
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d016      	beq.n	8003acc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2220      	movs	r2, #32
 8003aa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ab8:	f043 0220 	orr.w	r2, r3, #32
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e021      	b.n	8003b10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	0c1b      	lsrs	r3, r3, #16
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d10c      	bne.n	8003af0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	695b      	ldr	r3, [r3, #20]
 8003adc:	43da      	mvns	r2, r3
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	b29b      	uxth	r3, r3
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	bf14      	ite	ne
 8003ae8:	2301      	movne	r3, #1
 8003aea:	2300      	moveq	r3, #0
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	e00b      	b.n	8003b08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	699b      	ldr	r3, [r3, #24]
 8003af6:	43da      	mvns	r2, r3
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	4013      	ands	r3, r2
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	bf14      	ite	ne
 8003b02:	2301      	movne	r3, #1
 8003b04:	2300      	moveq	r3, #0
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	f47f af6d 	bne.w	80039e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003b0e:	2300      	movs	r3, #0
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	3710      	adds	r7, #16
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}

08003b18 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b084      	sub	sp, #16
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	60f8      	str	r0, [r7, #12]
 8003b20:	60b9      	str	r1, [r7, #8]
 8003b22:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b24:	e034      	b.n	8003b90 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b26:	68f8      	ldr	r0, [r7, #12]
 8003b28:	f000 f8e3 	bl	8003cf2 <I2C_IsAcknowledgeFailed>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d001      	beq.n	8003b36 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e034      	b.n	8003ba0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b3c:	d028      	beq.n	8003b90 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b3e:	f7fe fa35 	bl	8001fac <HAL_GetTick>
 8003b42:	4602      	mov	r2, r0
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	68ba      	ldr	r2, [r7, #8]
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d302      	bcc.n	8003b54 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d11d      	bne.n	8003b90 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	695b      	ldr	r3, [r3, #20]
 8003b5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b5e:	2b80      	cmp	r3, #128	@ 0x80
 8003b60:	d016      	beq.n	8003b90 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2200      	movs	r2, #0
 8003b66:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2220      	movs	r2, #32
 8003b6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2200      	movs	r2, #0
 8003b74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b7c:	f043 0220 	orr.w	r2, r3, #32
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2200      	movs	r2, #0
 8003b88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e007      	b.n	8003ba0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	695b      	ldr	r3, [r3, #20]
 8003b96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b9a:	2b80      	cmp	r3, #128	@ 0x80
 8003b9c:	d1c3      	bne.n	8003b26 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003b9e:	2300      	movs	r3, #0
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	3710      	adds	r7, #16
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}

08003ba8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b084      	sub	sp, #16
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	60f8      	str	r0, [r7, #12]
 8003bb0:	60b9      	str	r1, [r7, #8]
 8003bb2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003bb4:	e034      	b.n	8003c20 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003bb6:	68f8      	ldr	r0, [r7, #12]
 8003bb8:	f000 f89b 	bl	8003cf2 <I2C_IsAcknowledgeFailed>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d001      	beq.n	8003bc6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e034      	b.n	8003c30 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bcc:	d028      	beq.n	8003c20 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bce:	f7fe f9ed 	bl	8001fac <HAL_GetTick>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	68ba      	ldr	r2, [r7, #8]
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d302      	bcc.n	8003be4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d11d      	bne.n	8003c20 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	695b      	ldr	r3, [r3, #20]
 8003bea:	f003 0304 	and.w	r3, r3, #4
 8003bee:	2b04      	cmp	r3, #4
 8003bf0:	d016      	beq.n	8003c20 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2220      	movs	r2, #32
 8003bfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2200      	movs	r2, #0
 8003c04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c0c:	f043 0220 	orr.w	r2, r3, #32
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2200      	movs	r2, #0
 8003c18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	e007      	b.n	8003c30 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	695b      	ldr	r3, [r3, #20]
 8003c26:	f003 0304 	and.w	r3, r3, #4
 8003c2a:	2b04      	cmp	r3, #4
 8003c2c:	d1c3      	bne.n	8003bb6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003c2e:	2300      	movs	r3, #0
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3710      	adds	r7, #16
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}

08003c38 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b084      	sub	sp, #16
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	60f8      	str	r0, [r7, #12]
 8003c40:	60b9      	str	r1, [r7, #8]
 8003c42:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c44:	e049      	b.n	8003cda <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	695b      	ldr	r3, [r3, #20]
 8003c4c:	f003 0310 	and.w	r3, r3, #16
 8003c50:	2b10      	cmp	r3, #16
 8003c52:	d119      	bne.n	8003c88 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f06f 0210 	mvn.w	r2, #16
 8003c5c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2200      	movs	r2, #0
 8003c62:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2220      	movs	r2, #32
 8003c68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	e030      	b.n	8003cea <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c88:	f7fe f990 	bl	8001fac <HAL_GetTick>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	68ba      	ldr	r2, [r7, #8]
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d302      	bcc.n	8003c9e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d11d      	bne.n	8003cda <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	695b      	ldr	r3, [r3, #20]
 8003ca4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ca8:	2b40      	cmp	r3, #64	@ 0x40
 8003caa:	d016      	beq.n	8003cda <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2220      	movs	r2, #32
 8003cb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cc6:	f043 0220 	orr.w	r2, r3, #32
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e007      	b.n	8003cea <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	695b      	ldr	r3, [r3, #20]
 8003ce0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ce4:	2b40      	cmp	r3, #64	@ 0x40
 8003ce6:	d1ae      	bne.n	8003c46 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003ce8:	2300      	movs	r3, #0
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3710      	adds	r7, #16
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}

08003cf2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003cf2:	b480      	push	{r7}
 8003cf4:	b083      	sub	sp, #12
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	695b      	ldr	r3, [r3, #20]
 8003d00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d04:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d08:	d11b      	bne.n	8003d42 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003d12:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2200      	movs	r2, #0
 8003d18:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2220      	movs	r2, #32
 8003d1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d2e:	f043 0204 	orr.w	r2, r3, #4
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e000      	b.n	8003d44 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003d42:	2300      	movs	r3, #0
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	370c      	adds	r7, #12
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr

08003d50 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b086      	sub	sp, #24
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d101      	bne.n	8003d62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e267      	b.n	8004232 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 0301 	and.w	r3, r3, #1
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d075      	beq.n	8003e5a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003d6e:	4b88      	ldr	r3, [pc, #544]	@ (8003f90 <HAL_RCC_OscConfig+0x240>)
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	f003 030c 	and.w	r3, r3, #12
 8003d76:	2b04      	cmp	r3, #4
 8003d78:	d00c      	beq.n	8003d94 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d7a:	4b85      	ldr	r3, [pc, #532]	@ (8003f90 <HAL_RCC_OscConfig+0x240>)
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003d82:	2b08      	cmp	r3, #8
 8003d84:	d112      	bne.n	8003dac <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d86:	4b82      	ldr	r3, [pc, #520]	@ (8003f90 <HAL_RCC_OscConfig+0x240>)
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d8e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d92:	d10b      	bne.n	8003dac <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d94:	4b7e      	ldr	r3, [pc, #504]	@ (8003f90 <HAL_RCC_OscConfig+0x240>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d05b      	beq.n	8003e58 <HAL_RCC_OscConfig+0x108>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d157      	bne.n	8003e58 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	e242      	b.n	8004232 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003db4:	d106      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x74>
 8003db6:	4b76      	ldr	r3, [pc, #472]	@ (8003f90 <HAL_RCC_OscConfig+0x240>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a75      	ldr	r2, [pc, #468]	@ (8003f90 <HAL_RCC_OscConfig+0x240>)
 8003dbc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003dc0:	6013      	str	r3, [r2, #0]
 8003dc2:	e01d      	b.n	8003e00 <HAL_RCC_OscConfig+0xb0>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003dcc:	d10c      	bne.n	8003de8 <HAL_RCC_OscConfig+0x98>
 8003dce:	4b70      	ldr	r3, [pc, #448]	@ (8003f90 <HAL_RCC_OscConfig+0x240>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a6f      	ldr	r2, [pc, #444]	@ (8003f90 <HAL_RCC_OscConfig+0x240>)
 8003dd4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003dd8:	6013      	str	r3, [r2, #0]
 8003dda:	4b6d      	ldr	r3, [pc, #436]	@ (8003f90 <HAL_RCC_OscConfig+0x240>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a6c      	ldr	r2, [pc, #432]	@ (8003f90 <HAL_RCC_OscConfig+0x240>)
 8003de0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003de4:	6013      	str	r3, [r2, #0]
 8003de6:	e00b      	b.n	8003e00 <HAL_RCC_OscConfig+0xb0>
 8003de8:	4b69      	ldr	r3, [pc, #420]	@ (8003f90 <HAL_RCC_OscConfig+0x240>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a68      	ldr	r2, [pc, #416]	@ (8003f90 <HAL_RCC_OscConfig+0x240>)
 8003dee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003df2:	6013      	str	r3, [r2, #0]
 8003df4:	4b66      	ldr	r3, [pc, #408]	@ (8003f90 <HAL_RCC_OscConfig+0x240>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a65      	ldr	r2, [pc, #404]	@ (8003f90 <HAL_RCC_OscConfig+0x240>)
 8003dfa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003dfe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d013      	beq.n	8003e30 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e08:	f7fe f8d0 	bl	8001fac <HAL_GetTick>
 8003e0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e0e:	e008      	b.n	8003e22 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e10:	f7fe f8cc 	bl	8001fac <HAL_GetTick>
 8003e14:	4602      	mov	r2, r0
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	2b64      	cmp	r3, #100	@ 0x64
 8003e1c:	d901      	bls.n	8003e22 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003e1e:	2303      	movs	r3, #3
 8003e20:	e207      	b.n	8004232 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e22:	4b5b      	ldr	r3, [pc, #364]	@ (8003f90 <HAL_RCC_OscConfig+0x240>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d0f0      	beq.n	8003e10 <HAL_RCC_OscConfig+0xc0>
 8003e2e:	e014      	b.n	8003e5a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e30:	f7fe f8bc 	bl	8001fac <HAL_GetTick>
 8003e34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e36:	e008      	b.n	8003e4a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e38:	f7fe f8b8 	bl	8001fac <HAL_GetTick>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	1ad3      	subs	r3, r2, r3
 8003e42:	2b64      	cmp	r3, #100	@ 0x64
 8003e44:	d901      	bls.n	8003e4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e46:	2303      	movs	r3, #3
 8003e48:	e1f3      	b.n	8004232 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e4a:	4b51      	ldr	r3, [pc, #324]	@ (8003f90 <HAL_RCC_OscConfig+0x240>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d1f0      	bne.n	8003e38 <HAL_RCC_OscConfig+0xe8>
 8003e56:	e000      	b.n	8003e5a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f003 0302 	and.w	r3, r3, #2
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d063      	beq.n	8003f2e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003e66:	4b4a      	ldr	r3, [pc, #296]	@ (8003f90 <HAL_RCC_OscConfig+0x240>)
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	f003 030c 	and.w	r3, r3, #12
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d00b      	beq.n	8003e8a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e72:	4b47      	ldr	r3, [pc, #284]	@ (8003f90 <HAL_RCC_OscConfig+0x240>)
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003e7a:	2b08      	cmp	r3, #8
 8003e7c:	d11c      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e7e:	4b44      	ldr	r3, [pc, #272]	@ (8003f90 <HAL_RCC_OscConfig+0x240>)
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d116      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e8a:	4b41      	ldr	r3, [pc, #260]	@ (8003f90 <HAL_RCC_OscConfig+0x240>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 0302 	and.w	r3, r3, #2
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d005      	beq.n	8003ea2 <HAL_RCC_OscConfig+0x152>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	68db      	ldr	r3, [r3, #12]
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d001      	beq.n	8003ea2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e1c7      	b.n	8004232 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ea2:	4b3b      	ldr	r3, [pc, #236]	@ (8003f90 <HAL_RCC_OscConfig+0x240>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	691b      	ldr	r3, [r3, #16]
 8003eae:	00db      	lsls	r3, r3, #3
 8003eb0:	4937      	ldr	r1, [pc, #220]	@ (8003f90 <HAL_RCC_OscConfig+0x240>)
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003eb6:	e03a      	b.n	8003f2e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d020      	beq.n	8003f02 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ec0:	4b34      	ldr	r3, [pc, #208]	@ (8003f94 <HAL_RCC_OscConfig+0x244>)
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ec6:	f7fe f871 	bl	8001fac <HAL_GetTick>
 8003eca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ecc:	e008      	b.n	8003ee0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ece:	f7fe f86d 	bl	8001fac <HAL_GetTick>
 8003ed2:	4602      	mov	r2, r0
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	1ad3      	subs	r3, r2, r3
 8003ed8:	2b02      	cmp	r3, #2
 8003eda:	d901      	bls.n	8003ee0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003edc:	2303      	movs	r3, #3
 8003ede:	e1a8      	b.n	8004232 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ee0:	4b2b      	ldr	r3, [pc, #172]	@ (8003f90 <HAL_RCC_OscConfig+0x240>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 0302 	and.w	r3, r3, #2
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d0f0      	beq.n	8003ece <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003eec:	4b28      	ldr	r3, [pc, #160]	@ (8003f90 <HAL_RCC_OscConfig+0x240>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	691b      	ldr	r3, [r3, #16]
 8003ef8:	00db      	lsls	r3, r3, #3
 8003efa:	4925      	ldr	r1, [pc, #148]	@ (8003f90 <HAL_RCC_OscConfig+0x240>)
 8003efc:	4313      	orrs	r3, r2
 8003efe:	600b      	str	r3, [r1, #0]
 8003f00:	e015      	b.n	8003f2e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f02:	4b24      	ldr	r3, [pc, #144]	@ (8003f94 <HAL_RCC_OscConfig+0x244>)
 8003f04:	2200      	movs	r2, #0
 8003f06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f08:	f7fe f850 	bl	8001fac <HAL_GetTick>
 8003f0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f0e:	e008      	b.n	8003f22 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f10:	f7fe f84c 	bl	8001fac <HAL_GetTick>
 8003f14:	4602      	mov	r2, r0
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	2b02      	cmp	r3, #2
 8003f1c:	d901      	bls.n	8003f22 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	e187      	b.n	8004232 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f22:	4b1b      	ldr	r3, [pc, #108]	@ (8003f90 <HAL_RCC_OscConfig+0x240>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 0302 	and.w	r3, r3, #2
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d1f0      	bne.n	8003f10 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 0308 	and.w	r3, r3, #8
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d036      	beq.n	8003fa8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	695b      	ldr	r3, [r3, #20]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d016      	beq.n	8003f70 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f42:	4b15      	ldr	r3, [pc, #84]	@ (8003f98 <HAL_RCC_OscConfig+0x248>)
 8003f44:	2201      	movs	r2, #1
 8003f46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f48:	f7fe f830 	bl	8001fac <HAL_GetTick>
 8003f4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f4e:	e008      	b.n	8003f62 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f50:	f7fe f82c 	bl	8001fac <HAL_GetTick>
 8003f54:	4602      	mov	r2, r0
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	1ad3      	subs	r3, r2, r3
 8003f5a:	2b02      	cmp	r3, #2
 8003f5c:	d901      	bls.n	8003f62 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003f5e:	2303      	movs	r3, #3
 8003f60:	e167      	b.n	8004232 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f62:	4b0b      	ldr	r3, [pc, #44]	@ (8003f90 <HAL_RCC_OscConfig+0x240>)
 8003f64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f66:	f003 0302 	and.w	r3, r3, #2
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d0f0      	beq.n	8003f50 <HAL_RCC_OscConfig+0x200>
 8003f6e:	e01b      	b.n	8003fa8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f70:	4b09      	ldr	r3, [pc, #36]	@ (8003f98 <HAL_RCC_OscConfig+0x248>)
 8003f72:	2200      	movs	r2, #0
 8003f74:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f76:	f7fe f819 	bl	8001fac <HAL_GetTick>
 8003f7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f7c:	e00e      	b.n	8003f9c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f7e:	f7fe f815 	bl	8001fac <HAL_GetTick>
 8003f82:	4602      	mov	r2, r0
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	1ad3      	subs	r3, r2, r3
 8003f88:	2b02      	cmp	r3, #2
 8003f8a:	d907      	bls.n	8003f9c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	e150      	b.n	8004232 <HAL_RCC_OscConfig+0x4e2>
 8003f90:	40023800 	.word	0x40023800
 8003f94:	42470000 	.word	0x42470000
 8003f98:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f9c:	4b88      	ldr	r3, [pc, #544]	@ (80041c0 <HAL_RCC_OscConfig+0x470>)
 8003f9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fa0:	f003 0302 	and.w	r3, r3, #2
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d1ea      	bne.n	8003f7e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f003 0304 	and.w	r3, r3, #4
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	f000 8097 	beq.w	80040e4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fba:	4b81      	ldr	r3, [pc, #516]	@ (80041c0 <HAL_RCC_OscConfig+0x470>)
 8003fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d10f      	bne.n	8003fe6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	60bb      	str	r3, [r7, #8]
 8003fca:	4b7d      	ldr	r3, [pc, #500]	@ (80041c0 <HAL_RCC_OscConfig+0x470>)
 8003fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fce:	4a7c      	ldr	r2, [pc, #496]	@ (80041c0 <HAL_RCC_OscConfig+0x470>)
 8003fd0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003fd4:	6413      	str	r3, [r2, #64]	@ 0x40
 8003fd6:	4b7a      	ldr	r3, [pc, #488]	@ (80041c0 <HAL_RCC_OscConfig+0x470>)
 8003fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fde:	60bb      	str	r3, [r7, #8]
 8003fe0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fe6:	4b77      	ldr	r3, [pc, #476]	@ (80041c4 <HAL_RCC_OscConfig+0x474>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d118      	bne.n	8004024 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ff2:	4b74      	ldr	r3, [pc, #464]	@ (80041c4 <HAL_RCC_OscConfig+0x474>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a73      	ldr	r2, [pc, #460]	@ (80041c4 <HAL_RCC_OscConfig+0x474>)
 8003ff8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ffc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ffe:	f7fd ffd5 	bl	8001fac <HAL_GetTick>
 8004002:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004004:	e008      	b.n	8004018 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004006:	f7fd ffd1 	bl	8001fac <HAL_GetTick>
 800400a:	4602      	mov	r2, r0
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	1ad3      	subs	r3, r2, r3
 8004010:	2b02      	cmp	r3, #2
 8004012:	d901      	bls.n	8004018 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004014:	2303      	movs	r3, #3
 8004016:	e10c      	b.n	8004232 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004018:	4b6a      	ldr	r3, [pc, #424]	@ (80041c4 <HAL_RCC_OscConfig+0x474>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004020:	2b00      	cmp	r3, #0
 8004022:	d0f0      	beq.n	8004006 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	2b01      	cmp	r3, #1
 800402a:	d106      	bne.n	800403a <HAL_RCC_OscConfig+0x2ea>
 800402c:	4b64      	ldr	r3, [pc, #400]	@ (80041c0 <HAL_RCC_OscConfig+0x470>)
 800402e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004030:	4a63      	ldr	r2, [pc, #396]	@ (80041c0 <HAL_RCC_OscConfig+0x470>)
 8004032:	f043 0301 	orr.w	r3, r3, #1
 8004036:	6713      	str	r3, [r2, #112]	@ 0x70
 8004038:	e01c      	b.n	8004074 <HAL_RCC_OscConfig+0x324>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	2b05      	cmp	r3, #5
 8004040:	d10c      	bne.n	800405c <HAL_RCC_OscConfig+0x30c>
 8004042:	4b5f      	ldr	r3, [pc, #380]	@ (80041c0 <HAL_RCC_OscConfig+0x470>)
 8004044:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004046:	4a5e      	ldr	r2, [pc, #376]	@ (80041c0 <HAL_RCC_OscConfig+0x470>)
 8004048:	f043 0304 	orr.w	r3, r3, #4
 800404c:	6713      	str	r3, [r2, #112]	@ 0x70
 800404e:	4b5c      	ldr	r3, [pc, #368]	@ (80041c0 <HAL_RCC_OscConfig+0x470>)
 8004050:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004052:	4a5b      	ldr	r2, [pc, #364]	@ (80041c0 <HAL_RCC_OscConfig+0x470>)
 8004054:	f043 0301 	orr.w	r3, r3, #1
 8004058:	6713      	str	r3, [r2, #112]	@ 0x70
 800405a:	e00b      	b.n	8004074 <HAL_RCC_OscConfig+0x324>
 800405c:	4b58      	ldr	r3, [pc, #352]	@ (80041c0 <HAL_RCC_OscConfig+0x470>)
 800405e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004060:	4a57      	ldr	r2, [pc, #348]	@ (80041c0 <HAL_RCC_OscConfig+0x470>)
 8004062:	f023 0301 	bic.w	r3, r3, #1
 8004066:	6713      	str	r3, [r2, #112]	@ 0x70
 8004068:	4b55      	ldr	r3, [pc, #340]	@ (80041c0 <HAL_RCC_OscConfig+0x470>)
 800406a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800406c:	4a54      	ldr	r2, [pc, #336]	@ (80041c0 <HAL_RCC_OscConfig+0x470>)
 800406e:	f023 0304 	bic.w	r3, r3, #4
 8004072:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d015      	beq.n	80040a8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800407c:	f7fd ff96 	bl	8001fac <HAL_GetTick>
 8004080:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004082:	e00a      	b.n	800409a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004084:	f7fd ff92 	bl	8001fac <HAL_GetTick>
 8004088:	4602      	mov	r2, r0
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004092:	4293      	cmp	r3, r2
 8004094:	d901      	bls.n	800409a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004096:	2303      	movs	r3, #3
 8004098:	e0cb      	b.n	8004232 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800409a:	4b49      	ldr	r3, [pc, #292]	@ (80041c0 <HAL_RCC_OscConfig+0x470>)
 800409c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800409e:	f003 0302 	and.w	r3, r3, #2
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d0ee      	beq.n	8004084 <HAL_RCC_OscConfig+0x334>
 80040a6:	e014      	b.n	80040d2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040a8:	f7fd ff80 	bl	8001fac <HAL_GetTick>
 80040ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040ae:	e00a      	b.n	80040c6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040b0:	f7fd ff7c 	bl	8001fac <HAL_GetTick>
 80040b4:	4602      	mov	r2, r0
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	1ad3      	subs	r3, r2, r3
 80040ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040be:	4293      	cmp	r3, r2
 80040c0:	d901      	bls.n	80040c6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80040c2:	2303      	movs	r3, #3
 80040c4:	e0b5      	b.n	8004232 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040c6:	4b3e      	ldr	r3, [pc, #248]	@ (80041c0 <HAL_RCC_OscConfig+0x470>)
 80040c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040ca:	f003 0302 	and.w	r3, r3, #2
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d1ee      	bne.n	80040b0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80040d2:	7dfb      	ldrb	r3, [r7, #23]
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d105      	bne.n	80040e4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040d8:	4b39      	ldr	r3, [pc, #228]	@ (80041c0 <HAL_RCC_OscConfig+0x470>)
 80040da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040dc:	4a38      	ldr	r2, [pc, #224]	@ (80041c0 <HAL_RCC_OscConfig+0x470>)
 80040de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80040e2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	699b      	ldr	r3, [r3, #24]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	f000 80a1 	beq.w	8004230 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80040ee:	4b34      	ldr	r3, [pc, #208]	@ (80041c0 <HAL_RCC_OscConfig+0x470>)
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	f003 030c 	and.w	r3, r3, #12
 80040f6:	2b08      	cmp	r3, #8
 80040f8:	d05c      	beq.n	80041b4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	699b      	ldr	r3, [r3, #24]
 80040fe:	2b02      	cmp	r3, #2
 8004100:	d141      	bne.n	8004186 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004102:	4b31      	ldr	r3, [pc, #196]	@ (80041c8 <HAL_RCC_OscConfig+0x478>)
 8004104:	2200      	movs	r2, #0
 8004106:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004108:	f7fd ff50 	bl	8001fac <HAL_GetTick>
 800410c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800410e:	e008      	b.n	8004122 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004110:	f7fd ff4c 	bl	8001fac <HAL_GetTick>
 8004114:	4602      	mov	r2, r0
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	1ad3      	subs	r3, r2, r3
 800411a:	2b02      	cmp	r3, #2
 800411c:	d901      	bls.n	8004122 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800411e:	2303      	movs	r3, #3
 8004120:	e087      	b.n	8004232 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004122:	4b27      	ldr	r3, [pc, #156]	@ (80041c0 <HAL_RCC_OscConfig+0x470>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800412a:	2b00      	cmp	r3, #0
 800412c:	d1f0      	bne.n	8004110 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	69da      	ldr	r2, [r3, #28]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6a1b      	ldr	r3, [r3, #32]
 8004136:	431a      	orrs	r2, r3
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800413c:	019b      	lsls	r3, r3, #6
 800413e:	431a      	orrs	r2, r3
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004144:	085b      	lsrs	r3, r3, #1
 8004146:	3b01      	subs	r3, #1
 8004148:	041b      	lsls	r3, r3, #16
 800414a:	431a      	orrs	r2, r3
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004150:	061b      	lsls	r3, r3, #24
 8004152:	491b      	ldr	r1, [pc, #108]	@ (80041c0 <HAL_RCC_OscConfig+0x470>)
 8004154:	4313      	orrs	r3, r2
 8004156:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004158:	4b1b      	ldr	r3, [pc, #108]	@ (80041c8 <HAL_RCC_OscConfig+0x478>)
 800415a:	2201      	movs	r2, #1
 800415c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800415e:	f7fd ff25 	bl	8001fac <HAL_GetTick>
 8004162:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004164:	e008      	b.n	8004178 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004166:	f7fd ff21 	bl	8001fac <HAL_GetTick>
 800416a:	4602      	mov	r2, r0
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	1ad3      	subs	r3, r2, r3
 8004170:	2b02      	cmp	r3, #2
 8004172:	d901      	bls.n	8004178 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004174:	2303      	movs	r3, #3
 8004176:	e05c      	b.n	8004232 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004178:	4b11      	ldr	r3, [pc, #68]	@ (80041c0 <HAL_RCC_OscConfig+0x470>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004180:	2b00      	cmp	r3, #0
 8004182:	d0f0      	beq.n	8004166 <HAL_RCC_OscConfig+0x416>
 8004184:	e054      	b.n	8004230 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004186:	4b10      	ldr	r3, [pc, #64]	@ (80041c8 <HAL_RCC_OscConfig+0x478>)
 8004188:	2200      	movs	r2, #0
 800418a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800418c:	f7fd ff0e 	bl	8001fac <HAL_GetTick>
 8004190:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004192:	e008      	b.n	80041a6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004194:	f7fd ff0a 	bl	8001fac <HAL_GetTick>
 8004198:	4602      	mov	r2, r0
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	1ad3      	subs	r3, r2, r3
 800419e:	2b02      	cmp	r3, #2
 80041a0:	d901      	bls.n	80041a6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80041a2:	2303      	movs	r3, #3
 80041a4:	e045      	b.n	8004232 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041a6:	4b06      	ldr	r3, [pc, #24]	@ (80041c0 <HAL_RCC_OscConfig+0x470>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d1f0      	bne.n	8004194 <HAL_RCC_OscConfig+0x444>
 80041b2:	e03d      	b.n	8004230 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	699b      	ldr	r3, [r3, #24]
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d107      	bne.n	80041cc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	e038      	b.n	8004232 <HAL_RCC_OscConfig+0x4e2>
 80041c0:	40023800 	.word	0x40023800
 80041c4:	40007000 	.word	0x40007000
 80041c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80041cc:	4b1b      	ldr	r3, [pc, #108]	@ (800423c <HAL_RCC_OscConfig+0x4ec>)
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	699b      	ldr	r3, [r3, #24]
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d028      	beq.n	800422c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d121      	bne.n	800422c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041f2:	429a      	cmp	r2, r3
 80041f4:	d11a      	bne.n	800422c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041f6:	68fa      	ldr	r2, [r7, #12]
 80041f8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80041fc:	4013      	ands	r3, r2
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004202:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004204:	4293      	cmp	r3, r2
 8004206:	d111      	bne.n	800422c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004212:	085b      	lsrs	r3, r3, #1
 8004214:	3b01      	subs	r3, #1
 8004216:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004218:	429a      	cmp	r2, r3
 800421a:	d107      	bne.n	800422c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004226:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004228:	429a      	cmp	r2, r3
 800422a:	d001      	beq.n	8004230 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	e000      	b.n	8004232 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004230:	2300      	movs	r3, #0
}
 8004232:	4618      	mov	r0, r3
 8004234:	3718      	adds	r7, #24
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}
 800423a:	bf00      	nop
 800423c:	40023800 	.word	0x40023800

08004240 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b084      	sub	sp, #16
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d101      	bne.n	8004254 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	e0cc      	b.n	80043ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004254:	4b68      	ldr	r3, [pc, #416]	@ (80043f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 0307 	and.w	r3, r3, #7
 800425c:	683a      	ldr	r2, [r7, #0]
 800425e:	429a      	cmp	r2, r3
 8004260:	d90c      	bls.n	800427c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004262:	4b65      	ldr	r3, [pc, #404]	@ (80043f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004264:	683a      	ldr	r2, [r7, #0]
 8004266:	b2d2      	uxtb	r2, r2
 8004268:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800426a:	4b63      	ldr	r3, [pc, #396]	@ (80043f8 <HAL_RCC_ClockConfig+0x1b8>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 0307 	and.w	r3, r3, #7
 8004272:	683a      	ldr	r2, [r7, #0]
 8004274:	429a      	cmp	r2, r3
 8004276:	d001      	beq.n	800427c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004278:	2301      	movs	r3, #1
 800427a:	e0b8      	b.n	80043ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 0302 	and.w	r3, r3, #2
 8004284:	2b00      	cmp	r3, #0
 8004286:	d020      	beq.n	80042ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 0304 	and.w	r3, r3, #4
 8004290:	2b00      	cmp	r3, #0
 8004292:	d005      	beq.n	80042a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004294:	4b59      	ldr	r3, [pc, #356]	@ (80043fc <HAL_RCC_ClockConfig+0x1bc>)
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	4a58      	ldr	r2, [pc, #352]	@ (80043fc <HAL_RCC_ClockConfig+0x1bc>)
 800429a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800429e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 0308 	and.w	r3, r3, #8
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d005      	beq.n	80042b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80042ac:	4b53      	ldr	r3, [pc, #332]	@ (80043fc <HAL_RCC_ClockConfig+0x1bc>)
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	4a52      	ldr	r2, [pc, #328]	@ (80043fc <HAL_RCC_ClockConfig+0x1bc>)
 80042b2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80042b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042b8:	4b50      	ldr	r3, [pc, #320]	@ (80043fc <HAL_RCC_ClockConfig+0x1bc>)
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	494d      	ldr	r1, [pc, #308]	@ (80043fc <HAL_RCC_ClockConfig+0x1bc>)
 80042c6:	4313      	orrs	r3, r2
 80042c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 0301 	and.w	r3, r3, #1
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d044      	beq.n	8004360 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d107      	bne.n	80042ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042de:	4b47      	ldr	r3, [pc, #284]	@ (80043fc <HAL_RCC_ClockConfig+0x1bc>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d119      	bne.n	800431e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e07f      	b.n	80043ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	2b02      	cmp	r3, #2
 80042f4:	d003      	beq.n	80042fe <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042fa:	2b03      	cmp	r3, #3
 80042fc:	d107      	bne.n	800430e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042fe:	4b3f      	ldr	r3, [pc, #252]	@ (80043fc <HAL_RCC_ClockConfig+0x1bc>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004306:	2b00      	cmp	r3, #0
 8004308:	d109      	bne.n	800431e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	e06f      	b.n	80043ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800430e:	4b3b      	ldr	r3, [pc, #236]	@ (80043fc <HAL_RCC_ClockConfig+0x1bc>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 0302 	and.w	r3, r3, #2
 8004316:	2b00      	cmp	r3, #0
 8004318:	d101      	bne.n	800431e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e067      	b.n	80043ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800431e:	4b37      	ldr	r3, [pc, #220]	@ (80043fc <HAL_RCC_ClockConfig+0x1bc>)
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	f023 0203 	bic.w	r2, r3, #3
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	4934      	ldr	r1, [pc, #208]	@ (80043fc <HAL_RCC_ClockConfig+0x1bc>)
 800432c:	4313      	orrs	r3, r2
 800432e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004330:	f7fd fe3c 	bl	8001fac <HAL_GetTick>
 8004334:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004336:	e00a      	b.n	800434e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004338:	f7fd fe38 	bl	8001fac <HAL_GetTick>
 800433c:	4602      	mov	r2, r0
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004346:	4293      	cmp	r3, r2
 8004348:	d901      	bls.n	800434e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800434a:	2303      	movs	r3, #3
 800434c:	e04f      	b.n	80043ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800434e:	4b2b      	ldr	r3, [pc, #172]	@ (80043fc <HAL_RCC_ClockConfig+0x1bc>)
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	f003 020c 	and.w	r2, r3, #12
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	009b      	lsls	r3, r3, #2
 800435c:	429a      	cmp	r2, r3
 800435e:	d1eb      	bne.n	8004338 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004360:	4b25      	ldr	r3, [pc, #148]	@ (80043f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 0307 	and.w	r3, r3, #7
 8004368:	683a      	ldr	r2, [r7, #0]
 800436a:	429a      	cmp	r2, r3
 800436c:	d20c      	bcs.n	8004388 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800436e:	4b22      	ldr	r3, [pc, #136]	@ (80043f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004370:	683a      	ldr	r2, [r7, #0]
 8004372:	b2d2      	uxtb	r2, r2
 8004374:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004376:	4b20      	ldr	r3, [pc, #128]	@ (80043f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 0307 	and.w	r3, r3, #7
 800437e:	683a      	ldr	r2, [r7, #0]
 8004380:	429a      	cmp	r2, r3
 8004382:	d001      	beq.n	8004388 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	e032      	b.n	80043ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f003 0304 	and.w	r3, r3, #4
 8004390:	2b00      	cmp	r3, #0
 8004392:	d008      	beq.n	80043a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004394:	4b19      	ldr	r3, [pc, #100]	@ (80043fc <HAL_RCC_ClockConfig+0x1bc>)
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	68db      	ldr	r3, [r3, #12]
 80043a0:	4916      	ldr	r1, [pc, #88]	@ (80043fc <HAL_RCC_ClockConfig+0x1bc>)
 80043a2:	4313      	orrs	r3, r2
 80043a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 0308 	and.w	r3, r3, #8
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d009      	beq.n	80043c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80043b2:	4b12      	ldr	r3, [pc, #72]	@ (80043fc <HAL_RCC_ClockConfig+0x1bc>)
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	691b      	ldr	r3, [r3, #16]
 80043be:	00db      	lsls	r3, r3, #3
 80043c0:	490e      	ldr	r1, [pc, #56]	@ (80043fc <HAL_RCC_ClockConfig+0x1bc>)
 80043c2:	4313      	orrs	r3, r2
 80043c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80043c6:	f000 f821 	bl	800440c <HAL_RCC_GetSysClockFreq>
 80043ca:	4602      	mov	r2, r0
 80043cc:	4b0b      	ldr	r3, [pc, #44]	@ (80043fc <HAL_RCC_ClockConfig+0x1bc>)
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	091b      	lsrs	r3, r3, #4
 80043d2:	f003 030f 	and.w	r3, r3, #15
 80043d6:	490a      	ldr	r1, [pc, #40]	@ (8004400 <HAL_RCC_ClockConfig+0x1c0>)
 80043d8:	5ccb      	ldrb	r3, [r1, r3]
 80043da:	fa22 f303 	lsr.w	r3, r2, r3
 80043de:	4a09      	ldr	r2, [pc, #36]	@ (8004404 <HAL_RCC_ClockConfig+0x1c4>)
 80043e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80043e2:	4b09      	ldr	r3, [pc, #36]	@ (8004408 <HAL_RCC_ClockConfig+0x1c8>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4618      	mov	r0, r3
 80043e8:	f7fd fd9c 	bl	8001f24 <HAL_InitTick>

  return HAL_OK;
 80043ec:	2300      	movs	r3, #0
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3710      	adds	r7, #16
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	bf00      	nop
 80043f8:	40023c00 	.word	0x40023c00
 80043fc:	40023800 	.word	0x40023800
 8004400:	080062b8 	.word	0x080062b8
 8004404:	20000004 	.word	0x20000004
 8004408:	20000010 	.word	0x20000010

0800440c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800440c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004410:	b090      	sub	sp, #64	@ 0x40
 8004412:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004414:	2300      	movs	r3, #0
 8004416:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8004418:	2300      	movs	r3, #0
 800441a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800441c:	2300      	movs	r3, #0
 800441e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004420:	2300      	movs	r3, #0
 8004422:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004424:	4b59      	ldr	r3, [pc, #356]	@ (800458c <HAL_RCC_GetSysClockFreq+0x180>)
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	f003 030c 	and.w	r3, r3, #12
 800442c:	2b08      	cmp	r3, #8
 800442e:	d00d      	beq.n	800444c <HAL_RCC_GetSysClockFreq+0x40>
 8004430:	2b08      	cmp	r3, #8
 8004432:	f200 80a1 	bhi.w	8004578 <HAL_RCC_GetSysClockFreq+0x16c>
 8004436:	2b00      	cmp	r3, #0
 8004438:	d002      	beq.n	8004440 <HAL_RCC_GetSysClockFreq+0x34>
 800443a:	2b04      	cmp	r3, #4
 800443c:	d003      	beq.n	8004446 <HAL_RCC_GetSysClockFreq+0x3a>
 800443e:	e09b      	b.n	8004578 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004440:	4b53      	ldr	r3, [pc, #332]	@ (8004590 <HAL_RCC_GetSysClockFreq+0x184>)
 8004442:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004444:	e09b      	b.n	800457e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004446:	4b53      	ldr	r3, [pc, #332]	@ (8004594 <HAL_RCC_GetSysClockFreq+0x188>)
 8004448:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800444a:	e098      	b.n	800457e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800444c:	4b4f      	ldr	r3, [pc, #316]	@ (800458c <HAL_RCC_GetSysClockFreq+0x180>)
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004454:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004456:	4b4d      	ldr	r3, [pc, #308]	@ (800458c <HAL_RCC_GetSysClockFreq+0x180>)
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800445e:	2b00      	cmp	r3, #0
 8004460:	d028      	beq.n	80044b4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004462:	4b4a      	ldr	r3, [pc, #296]	@ (800458c <HAL_RCC_GetSysClockFreq+0x180>)
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	099b      	lsrs	r3, r3, #6
 8004468:	2200      	movs	r2, #0
 800446a:	623b      	str	r3, [r7, #32]
 800446c:	627a      	str	r2, [r7, #36]	@ 0x24
 800446e:	6a3b      	ldr	r3, [r7, #32]
 8004470:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004474:	2100      	movs	r1, #0
 8004476:	4b47      	ldr	r3, [pc, #284]	@ (8004594 <HAL_RCC_GetSysClockFreq+0x188>)
 8004478:	fb03 f201 	mul.w	r2, r3, r1
 800447c:	2300      	movs	r3, #0
 800447e:	fb00 f303 	mul.w	r3, r0, r3
 8004482:	4413      	add	r3, r2
 8004484:	4a43      	ldr	r2, [pc, #268]	@ (8004594 <HAL_RCC_GetSysClockFreq+0x188>)
 8004486:	fba0 1202 	umull	r1, r2, r0, r2
 800448a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800448c:	460a      	mov	r2, r1
 800448e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004490:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004492:	4413      	add	r3, r2
 8004494:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004496:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004498:	2200      	movs	r2, #0
 800449a:	61bb      	str	r3, [r7, #24]
 800449c:	61fa      	str	r2, [r7, #28]
 800449e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80044a2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80044a6:	f7fb feeb 	bl	8000280 <__aeabi_uldivmod>
 80044aa:	4602      	mov	r2, r0
 80044ac:	460b      	mov	r3, r1
 80044ae:	4613      	mov	r3, r2
 80044b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80044b2:	e053      	b.n	800455c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044b4:	4b35      	ldr	r3, [pc, #212]	@ (800458c <HAL_RCC_GetSysClockFreq+0x180>)
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	099b      	lsrs	r3, r3, #6
 80044ba:	2200      	movs	r2, #0
 80044bc:	613b      	str	r3, [r7, #16]
 80044be:	617a      	str	r2, [r7, #20]
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80044c6:	f04f 0b00 	mov.w	fp, #0
 80044ca:	4652      	mov	r2, sl
 80044cc:	465b      	mov	r3, fp
 80044ce:	f04f 0000 	mov.w	r0, #0
 80044d2:	f04f 0100 	mov.w	r1, #0
 80044d6:	0159      	lsls	r1, r3, #5
 80044d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80044dc:	0150      	lsls	r0, r2, #5
 80044de:	4602      	mov	r2, r0
 80044e0:	460b      	mov	r3, r1
 80044e2:	ebb2 080a 	subs.w	r8, r2, sl
 80044e6:	eb63 090b 	sbc.w	r9, r3, fp
 80044ea:	f04f 0200 	mov.w	r2, #0
 80044ee:	f04f 0300 	mov.w	r3, #0
 80044f2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80044f6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80044fa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80044fe:	ebb2 0408 	subs.w	r4, r2, r8
 8004502:	eb63 0509 	sbc.w	r5, r3, r9
 8004506:	f04f 0200 	mov.w	r2, #0
 800450a:	f04f 0300 	mov.w	r3, #0
 800450e:	00eb      	lsls	r3, r5, #3
 8004510:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004514:	00e2      	lsls	r2, r4, #3
 8004516:	4614      	mov	r4, r2
 8004518:	461d      	mov	r5, r3
 800451a:	eb14 030a 	adds.w	r3, r4, sl
 800451e:	603b      	str	r3, [r7, #0]
 8004520:	eb45 030b 	adc.w	r3, r5, fp
 8004524:	607b      	str	r3, [r7, #4]
 8004526:	f04f 0200 	mov.w	r2, #0
 800452a:	f04f 0300 	mov.w	r3, #0
 800452e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004532:	4629      	mov	r1, r5
 8004534:	028b      	lsls	r3, r1, #10
 8004536:	4621      	mov	r1, r4
 8004538:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800453c:	4621      	mov	r1, r4
 800453e:	028a      	lsls	r2, r1, #10
 8004540:	4610      	mov	r0, r2
 8004542:	4619      	mov	r1, r3
 8004544:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004546:	2200      	movs	r2, #0
 8004548:	60bb      	str	r3, [r7, #8]
 800454a:	60fa      	str	r2, [r7, #12]
 800454c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004550:	f7fb fe96 	bl	8000280 <__aeabi_uldivmod>
 8004554:	4602      	mov	r2, r0
 8004556:	460b      	mov	r3, r1
 8004558:	4613      	mov	r3, r2
 800455a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800455c:	4b0b      	ldr	r3, [pc, #44]	@ (800458c <HAL_RCC_GetSysClockFreq+0x180>)
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	0c1b      	lsrs	r3, r3, #16
 8004562:	f003 0303 	and.w	r3, r3, #3
 8004566:	3301      	adds	r3, #1
 8004568:	005b      	lsls	r3, r3, #1
 800456a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800456c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800456e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004570:	fbb2 f3f3 	udiv	r3, r2, r3
 8004574:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004576:	e002      	b.n	800457e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004578:	4b05      	ldr	r3, [pc, #20]	@ (8004590 <HAL_RCC_GetSysClockFreq+0x184>)
 800457a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800457c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800457e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004580:	4618      	mov	r0, r3
 8004582:	3740      	adds	r7, #64	@ 0x40
 8004584:	46bd      	mov	sp, r7
 8004586:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800458a:	bf00      	nop
 800458c:	40023800 	.word	0x40023800
 8004590:	00f42400 	.word	0x00f42400
 8004594:	017d7840 	.word	0x017d7840

08004598 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004598:	b480      	push	{r7}
 800459a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800459c:	4b03      	ldr	r3, [pc, #12]	@ (80045ac <HAL_RCC_GetHCLKFreq+0x14>)
 800459e:	681b      	ldr	r3, [r3, #0]
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	46bd      	mov	sp, r7
 80045a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a8:	4770      	bx	lr
 80045aa:	bf00      	nop
 80045ac:	20000004 	.word	0x20000004

080045b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80045b4:	f7ff fff0 	bl	8004598 <HAL_RCC_GetHCLKFreq>
 80045b8:	4602      	mov	r2, r0
 80045ba:	4b05      	ldr	r3, [pc, #20]	@ (80045d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	0a9b      	lsrs	r3, r3, #10
 80045c0:	f003 0307 	and.w	r3, r3, #7
 80045c4:	4903      	ldr	r1, [pc, #12]	@ (80045d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80045c6:	5ccb      	ldrb	r3, [r1, r3]
 80045c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	bd80      	pop	{r7, pc}
 80045d0:	40023800 	.word	0x40023800
 80045d4:	080062c8 	.word	0x080062c8

080045d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b082      	sub	sp, #8
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d101      	bne.n	80045ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	e07b      	b.n	80046e2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d108      	bne.n	8004604 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80045fa:	d009      	beq.n	8004610 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2200      	movs	r2, #0
 8004600:	61da      	str	r2, [r3, #28]
 8004602:	e005      	b.n	8004610 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2200      	movs	r2, #0
 8004608:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2200      	movs	r2, #0
 8004614:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800461c:	b2db      	uxtb	r3, r3
 800461e:	2b00      	cmp	r3, #0
 8004620:	d106      	bne.n	8004630 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f7fc fd30 	bl	8001090 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2202      	movs	r2, #2
 8004634:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004646:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004658:	431a      	orrs	r2, r3
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	68db      	ldr	r3, [r3, #12]
 800465e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004662:	431a      	orrs	r2, r3
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	691b      	ldr	r3, [r3, #16]
 8004668:	f003 0302 	and.w	r3, r3, #2
 800466c:	431a      	orrs	r2, r3
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	695b      	ldr	r3, [r3, #20]
 8004672:	f003 0301 	and.w	r3, r3, #1
 8004676:	431a      	orrs	r2, r3
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	699b      	ldr	r3, [r3, #24]
 800467c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004680:	431a      	orrs	r2, r3
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	69db      	ldr	r3, [r3, #28]
 8004686:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800468a:	431a      	orrs	r2, r3
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6a1b      	ldr	r3, [r3, #32]
 8004690:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004694:	ea42 0103 	orr.w	r1, r2, r3
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800469c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	430a      	orrs	r2, r1
 80046a6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	699b      	ldr	r3, [r3, #24]
 80046ac:	0c1b      	lsrs	r3, r3, #16
 80046ae:	f003 0104 	and.w	r1, r3, #4
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046b6:	f003 0210 	and.w	r2, r3, #16
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	430a      	orrs	r2, r1
 80046c0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	69da      	ldr	r2, [r3, #28]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80046d0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2200      	movs	r2, #0
 80046d6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2201      	movs	r2, #1
 80046dc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80046e0:	2300      	movs	r3, #0
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3708      	adds	r7, #8
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}

080046ea <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046ea:	b580      	push	{r7, lr}
 80046ec:	b088      	sub	sp, #32
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	60f8      	str	r0, [r7, #12]
 80046f2:	60b9      	str	r1, [r7, #8]
 80046f4:	603b      	str	r3, [r7, #0]
 80046f6:	4613      	mov	r3, r2
 80046f8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80046fa:	f7fd fc57 	bl	8001fac <HAL_GetTick>
 80046fe:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004700:	88fb      	ldrh	r3, [r7, #6]
 8004702:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800470a:	b2db      	uxtb	r3, r3
 800470c:	2b01      	cmp	r3, #1
 800470e:	d001      	beq.n	8004714 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004710:	2302      	movs	r3, #2
 8004712:	e12a      	b.n	800496a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d002      	beq.n	8004720 <HAL_SPI_Transmit+0x36>
 800471a:	88fb      	ldrh	r3, [r7, #6]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d101      	bne.n	8004724 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	e122      	b.n	800496a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800472a:	2b01      	cmp	r3, #1
 800472c:	d101      	bne.n	8004732 <HAL_SPI_Transmit+0x48>
 800472e:	2302      	movs	r3, #2
 8004730:	e11b      	b.n	800496a <HAL_SPI_Transmit+0x280>
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2201      	movs	r2, #1
 8004736:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2203      	movs	r2, #3
 800473e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2200      	movs	r2, #0
 8004746:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	68ba      	ldr	r2, [r7, #8]
 800474c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	88fa      	ldrh	r2, [r7, #6]
 8004752:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	88fa      	ldrh	r2, [r7, #6]
 8004758:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2200      	movs	r2, #0
 800475e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2200      	movs	r2, #0
 8004764:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2200      	movs	r2, #0
 800476a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2200      	movs	r2, #0
 8004770:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2200      	movs	r2, #0
 8004776:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004780:	d10f      	bne.n	80047a2 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004790:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80047a0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047ac:	2b40      	cmp	r3, #64	@ 0x40
 80047ae:	d007      	beq.n	80047c0 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80047be:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	68db      	ldr	r3, [r3, #12]
 80047c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80047c8:	d152      	bne.n	8004870 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d002      	beq.n	80047d8 <HAL_SPI_Transmit+0xee>
 80047d2:	8b7b      	ldrh	r3, [r7, #26]
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d145      	bne.n	8004864 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047dc:	881a      	ldrh	r2, [r3, #0]
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047e8:	1c9a      	adds	r2, r3, #2
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80047f2:	b29b      	uxth	r3, r3
 80047f4:	3b01      	subs	r3, #1
 80047f6:	b29a      	uxth	r2, r3
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80047fc:	e032      	b.n	8004864 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	f003 0302 	and.w	r3, r3, #2
 8004808:	2b02      	cmp	r3, #2
 800480a:	d112      	bne.n	8004832 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004810:	881a      	ldrh	r2, [r3, #0]
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800481c:	1c9a      	adds	r2, r3, #2
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004826:	b29b      	uxth	r3, r3
 8004828:	3b01      	subs	r3, #1
 800482a:	b29a      	uxth	r2, r3
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004830:	e018      	b.n	8004864 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004832:	f7fd fbbb 	bl	8001fac <HAL_GetTick>
 8004836:	4602      	mov	r2, r0
 8004838:	69fb      	ldr	r3, [r7, #28]
 800483a:	1ad3      	subs	r3, r2, r3
 800483c:	683a      	ldr	r2, [r7, #0]
 800483e:	429a      	cmp	r2, r3
 8004840:	d803      	bhi.n	800484a <HAL_SPI_Transmit+0x160>
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004848:	d102      	bne.n	8004850 <HAL_SPI_Transmit+0x166>
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d109      	bne.n	8004864 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2201      	movs	r2, #1
 8004854:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2200      	movs	r2, #0
 800485c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004860:	2303      	movs	r3, #3
 8004862:	e082      	b.n	800496a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004868:	b29b      	uxth	r3, r3
 800486a:	2b00      	cmp	r3, #0
 800486c:	d1c7      	bne.n	80047fe <HAL_SPI_Transmit+0x114>
 800486e:	e053      	b.n	8004918 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d002      	beq.n	800487e <HAL_SPI_Transmit+0x194>
 8004878:	8b7b      	ldrh	r3, [r7, #26]
 800487a:	2b01      	cmp	r3, #1
 800487c:	d147      	bne.n	800490e <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	330c      	adds	r3, #12
 8004888:	7812      	ldrb	r2, [r2, #0]
 800488a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004890:	1c5a      	adds	r2, r3, #1
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800489a:	b29b      	uxth	r3, r3
 800489c:	3b01      	subs	r3, #1
 800489e:	b29a      	uxth	r2, r3
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80048a4:	e033      	b.n	800490e <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	f003 0302 	and.w	r3, r3, #2
 80048b0:	2b02      	cmp	r3, #2
 80048b2:	d113      	bne.n	80048dc <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	330c      	adds	r3, #12
 80048be:	7812      	ldrb	r2, [r2, #0]
 80048c0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048c6:	1c5a      	adds	r2, r3, #1
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	3b01      	subs	r3, #1
 80048d4:	b29a      	uxth	r2, r3
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	86da      	strh	r2, [r3, #54]	@ 0x36
 80048da:	e018      	b.n	800490e <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80048dc:	f7fd fb66 	bl	8001fac <HAL_GetTick>
 80048e0:	4602      	mov	r2, r0
 80048e2:	69fb      	ldr	r3, [r7, #28]
 80048e4:	1ad3      	subs	r3, r2, r3
 80048e6:	683a      	ldr	r2, [r7, #0]
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d803      	bhi.n	80048f4 <HAL_SPI_Transmit+0x20a>
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048f2:	d102      	bne.n	80048fa <HAL_SPI_Transmit+0x210>
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d109      	bne.n	800490e <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2201      	movs	r2, #1
 80048fe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2200      	movs	r2, #0
 8004906:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800490a:	2303      	movs	r3, #3
 800490c:	e02d      	b.n	800496a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004912:	b29b      	uxth	r3, r3
 8004914:	2b00      	cmp	r3, #0
 8004916:	d1c6      	bne.n	80048a6 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004918:	69fa      	ldr	r2, [r7, #28]
 800491a:	6839      	ldr	r1, [r7, #0]
 800491c:	68f8      	ldr	r0, [r7, #12]
 800491e:	f000 f8b1 	bl	8004a84 <SPI_EndRxTxTransaction>
 8004922:	4603      	mov	r3, r0
 8004924:	2b00      	cmp	r3, #0
 8004926:	d002      	beq.n	800492e <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2220      	movs	r2, #32
 800492c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d10a      	bne.n	800494c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004936:	2300      	movs	r3, #0
 8004938:	617b      	str	r3, [r7, #20]
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	68db      	ldr	r3, [r3, #12]
 8004940:	617b      	str	r3, [r7, #20]
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	617b      	str	r3, [r7, #20]
 800494a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2201      	movs	r2, #1
 8004950:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2200      	movs	r2, #0
 8004958:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004960:	2b00      	cmp	r3, #0
 8004962:	d001      	beq.n	8004968 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	e000      	b.n	800496a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004968:	2300      	movs	r3, #0
  }
}
 800496a:	4618      	mov	r0, r3
 800496c:	3720      	adds	r7, #32
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}
	...

08004974 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b088      	sub	sp, #32
 8004978:	af00      	add	r7, sp, #0
 800497a:	60f8      	str	r0, [r7, #12]
 800497c:	60b9      	str	r1, [r7, #8]
 800497e:	603b      	str	r3, [r7, #0]
 8004980:	4613      	mov	r3, r2
 8004982:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004984:	f7fd fb12 	bl	8001fac <HAL_GetTick>
 8004988:	4602      	mov	r2, r0
 800498a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800498c:	1a9b      	subs	r3, r3, r2
 800498e:	683a      	ldr	r2, [r7, #0]
 8004990:	4413      	add	r3, r2
 8004992:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004994:	f7fd fb0a 	bl	8001fac <HAL_GetTick>
 8004998:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800499a:	4b39      	ldr	r3, [pc, #228]	@ (8004a80 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	015b      	lsls	r3, r3, #5
 80049a0:	0d1b      	lsrs	r3, r3, #20
 80049a2:	69fa      	ldr	r2, [r7, #28]
 80049a4:	fb02 f303 	mul.w	r3, r2, r3
 80049a8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80049aa:	e055      	b.n	8004a58 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049b2:	d051      	beq.n	8004a58 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80049b4:	f7fd fafa 	bl	8001fac <HAL_GetTick>
 80049b8:	4602      	mov	r2, r0
 80049ba:	69bb      	ldr	r3, [r7, #24]
 80049bc:	1ad3      	subs	r3, r2, r3
 80049be:	69fa      	ldr	r2, [r7, #28]
 80049c0:	429a      	cmp	r2, r3
 80049c2:	d902      	bls.n	80049ca <SPI_WaitFlagStateUntilTimeout+0x56>
 80049c4:	69fb      	ldr	r3, [r7, #28]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d13d      	bne.n	8004a46 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	685a      	ldr	r2, [r3, #4]
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80049d8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80049e2:	d111      	bne.n	8004a08 <SPI_WaitFlagStateUntilTimeout+0x94>
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80049ec:	d004      	beq.n	80049f8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049f6:	d107      	bne.n	8004a08 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a06:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a0c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a10:	d10f      	bne.n	8004a32 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	681a      	ldr	r2, [r3, #0]
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004a20:	601a      	str	r2, [r3, #0]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004a30:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2201      	movs	r2, #1
 8004a36:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004a42:	2303      	movs	r3, #3
 8004a44:	e018      	b.n	8004a78 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d102      	bne.n	8004a52 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	61fb      	str	r3, [r7, #28]
 8004a50:	e002      	b.n	8004a58 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	3b01      	subs	r3, #1
 8004a56:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	689a      	ldr	r2, [r3, #8]
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	4013      	ands	r3, r2
 8004a62:	68ba      	ldr	r2, [r7, #8]
 8004a64:	429a      	cmp	r2, r3
 8004a66:	bf0c      	ite	eq
 8004a68:	2301      	moveq	r3, #1
 8004a6a:	2300      	movne	r3, #0
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	461a      	mov	r2, r3
 8004a70:	79fb      	ldrb	r3, [r7, #7]
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d19a      	bne.n	80049ac <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8004a76:	2300      	movs	r3, #0
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3720      	adds	r7, #32
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}
 8004a80:	20000004 	.word	0x20000004

08004a84 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b088      	sub	sp, #32
 8004a88:	af02      	add	r7, sp, #8
 8004a8a:	60f8      	str	r0, [r7, #12]
 8004a8c:	60b9      	str	r1, [r7, #8]
 8004a8e:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	9300      	str	r3, [sp, #0]
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	2201      	movs	r2, #1
 8004a98:	2102      	movs	r1, #2
 8004a9a:	68f8      	ldr	r0, [r7, #12]
 8004a9c:	f7ff ff6a 	bl	8004974 <SPI_WaitFlagStateUntilTimeout>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d007      	beq.n	8004ab6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004aaa:	f043 0220 	orr.w	r2, r3, #32
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004ab2:	2303      	movs	r3, #3
 8004ab4:	e032      	b.n	8004b1c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004ab6:	4b1b      	ldr	r3, [pc, #108]	@ (8004b24 <SPI_EndRxTxTransaction+0xa0>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a1b      	ldr	r2, [pc, #108]	@ (8004b28 <SPI_EndRxTxTransaction+0xa4>)
 8004abc:	fba2 2303 	umull	r2, r3, r2, r3
 8004ac0:	0d5b      	lsrs	r3, r3, #21
 8004ac2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004ac6:	fb02 f303 	mul.w	r3, r2, r3
 8004aca:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004ad4:	d112      	bne.n	8004afc <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	9300      	str	r3, [sp, #0]
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	2200      	movs	r2, #0
 8004ade:	2180      	movs	r1, #128	@ 0x80
 8004ae0:	68f8      	ldr	r0, [r7, #12]
 8004ae2:	f7ff ff47 	bl	8004974 <SPI_WaitFlagStateUntilTimeout>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d016      	beq.n	8004b1a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004af0:	f043 0220 	orr.w	r2, r3, #32
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004af8:	2303      	movs	r3, #3
 8004afa:	e00f      	b.n	8004b1c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d00a      	beq.n	8004b18 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	3b01      	subs	r3, #1
 8004b06:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b12:	2b80      	cmp	r3, #128	@ 0x80
 8004b14:	d0f2      	beq.n	8004afc <SPI_EndRxTxTransaction+0x78>
 8004b16:	e000      	b.n	8004b1a <SPI_EndRxTxTransaction+0x96>
        break;
 8004b18:	bf00      	nop
  }

  return HAL_OK;
 8004b1a:	2300      	movs	r3, #0
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	3718      	adds	r7, #24
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}
 8004b24:	20000004 	.word	0x20000004
 8004b28:	165e9f81 	.word	0x165e9f81

08004b2c <ILI9341_Select>:
#include "stm32f4xx_hal.h"


#include "ili9341.h"

static void ILI9341_Select() {
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_RESET);
 8004b30:	2200      	movs	r2, #0
 8004b32:	2101      	movs	r1, #1
 8004b34:	4802      	ldr	r0, [pc, #8]	@ (8004b40 <ILI9341_Select+0x14>)
 8004b36:	f7fe f8cd 	bl	8002cd4 <HAL_GPIO_WritePin>
}
 8004b3a:	bf00      	nop
 8004b3c:	bd80      	pop	{r7, pc}
 8004b3e:	bf00      	nop
 8004b40:	40020000 	.word	0x40020000

08004b44 <ILI9341_Unselect>:

void ILI9341_Unselect() {
 8004b44:	b580      	push	{r7, lr}
 8004b46:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_SET);
 8004b48:	2201      	movs	r2, #1
 8004b4a:	2101      	movs	r1, #1
 8004b4c:	4802      	ldr	r0, [pc, #8]	@ (8004b58 <ILI9341_Unselect+0x14>)
 8004b4e:	f7fe f8c1 	bl	8002cd4 <HAL_GPIO_WritePin>
}
 8004b52:	bf00      	nop
 8004b54:	bd80      	pop	{r7, pc}
 8004b56:	bf00      	nop
 8004b58:	40020000 	.word	0x40020000

08004b5c <ILI9341_Reset>:

static void ILI9341_Reset() {
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_RESET);
 8004b60:	2200      	movs	r2, #0
 8004b62:	2102      	movs	r1, #2
 8004b64:	4806      	ldr	r0, [pc, #24]	@ (8004b80 <ILI9341_Reset+0x24>)
 8004b66:	f7fe f8b5 	bl	8002cd4 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8004b6a:	2005      	movs	r0, #5
 8004b6c:	f7fd fa2a 	bl	8001fc4 <HAL_Delay>
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_SET);
 8004b70:	2201      	movs	r2, #1
 8004b72:	2102      	movs	r1, #2
 8004b74:	4802      	ldr	r0, [pc, #8]	@ (8004b80 <ILI9341_Reset+0x24>)
 8004b76:	f7fe f8ad 	bl	8002cd4 <HAL_GPIO_WritePin>
}
 8004b7a:	bf00      	nop
 8004b7c:	bd80      	pop	{r7, pc}
 8004b7e:	bf00      	nop
 8004b80:	40020000 	.word	0x40020000

08004b84 <ILI9341_WriteCommand>:

static void ILI9341_WriteCommand(uint8_t cmd) {
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b082      	sub	sp, #8
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_RESET);
 8004b8e:	2200      	movs	r2, #0
 8004b90:	2110      	movs	r1, #16
 8004b92:	4807      	ldr	r0, [pc, #28]	@ (8004bb0 <ILI9341_WriteCommand+0x2c>)
 8004b94:	f7fe f89e 	bl	8002cd4 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ILI9341_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8004b98:	1df9      	adds	r1, r7, #7
 8004b9a:	f04f 33ff 	mov.w	r3, #4294967295
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	4804      	ldr	r0, [pc, #16]	@ (8004bb4 <ILI9341_WriteCommand+0x30>)
 8004ba2:	f7ff fda2 	bl	80046ea <HAL_SPI_Transmit>
}
 8004ba6:	bf00      	nop
 8004ba8:	3708      	adds	r7, #8
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}
 8004bae:	bf00      	nop
 8004bb0:	40020000 	.word	0x40020000
 8004bb4:	2000013c 	.word	0x2000013c

08004bb8 <ILI9341_WriteData>:

static void ILI9341_WriteData(uint8_t* buff, size_t buff_size) {
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b084      	sub	sp, #16
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
 8004bc0:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	2110      	movs	r1, #16
 8004bc6:	4810      	ldr	r0, [pc, #64]	@ (8004c08 <ILI9341_WriteData+0x50>)
 8004bc8:	f7fe f884 	bl	8002cd4 <HAL_GPIO_WritePin>

    // split data in small chunks because HAL can't send more then 64K at once
    while(buff_size > 0) {
 8004bcc:	e014      	b.n	8004bf8 <ILI9341_WriteData+0x40>
        uint16_t chunk_size = buff_size > 32768 ? 32768 : buff_size;
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004bd4:	bf28      	it	cs
 8004bd6:	f44f 4300 	movcs.w	r3, #32768	@ 0x8000
 8004bda:	81fb      	strh	r3, [r7, #14]
        HAL_SPI_Transmit(&ILI9341_SPI_PORT, buff, chunk_size, 100);
 8004bdc:	89fa      	ldrh	r2, [r7, #14]
 8004bde:	2364      	movs	r3, #100	@ 0x64
 8004be0:	6879      	ldr	r1, [r7, #4]
 8004be2:	480a      	ldr	r0, [pc, #40]	@ (8004c0c <ILI9341_WriteData+0x54>)
 8004be4:	f7ff fd81 	bl	80046ea <HAL_SPI_Transmit>
        buff += chunk_size;
 8004be8:	89fb      	ldrh	r3, [r7, #14]
 8004bea:	687a      	ldr	r2, [r7, #4]
 8004bec:	4413      	add	r3, r2
 8004bee:	607b      	str	r3, [r7, #4]
        buff_size -= chunk_size;
 8004bf0:	89fb      	ldrh	r3, [r7, #14]
 8004bf2:	683a      	ldr	r2, [r7, #0]
 8004bf4:	1ad3      	subs	r3, r2, r3
 8004bf6:	603b      	str	r3, [r7, #0]
    while(buff_size > 0) {
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d1e7      	bne.n	8004bce <ILI9341_WriteData+0x16>
    }
}
 8004bfe:	bf00      	nop
 8004c00:	bf00      	nop
 8004c02:	3710      	adds	r7, #16
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}
 8004c08:	40020000 	.word	0x40020000
 8004c0c:	2000013c 	.word	0x2000013c

08004c10 <ILI9341_SetAddressWindow>:

static void ILI9341_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 8004c10:	b590      	push	{r4, r7, lr}
 8004c12:	b085      	sub	sp, #20
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	4604      	mov	r4, r0
 8004c18:	4608      	mov	r0, r1
 8004c1a:	4611      	mov	r1, r2
 8004c1c:	461a      	mov	r2, r3
 8004c1e:	4623      	mov	r3, r4
 8004c20:	80fb      	strh	r3, [r7, #6]
 8004c22:	4603      	mov	r3, r0
 8004c24:	80bb      	strh	r3, [r7, #4]
 8004c26:	460b      	mov	r3, r1
 8004c28:	807b      	strh	r3, [r7, #2]
 8004c2a:	4613      	mov	r3, r2
 8004c2c:	803b      	strh	r3, [r7, #0]
    // column address set
    ILI9341_WriteCommand(0x2A); // CASET
 8004c2e:	202a      	movs	r0, #42	@ 0x2a
 8004c30:	f7ff ffa8 	bl	8004b84 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { (x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1 & 0xFF };
 8004c34:	88fb      	ldrh	r3, [r7, #6]
 8004c36:	0a1b      	lsrs	r3, r3, #8
 8004c38:	b29b      	uxth	r3, r3
 8004c3a:	b2db      	uxtb	r3, r3
 8004c3c:	733b      	strb	r3, [r7, #12]
 8004c3e:	88fb      	ldrh	r3, [r7, #6]
 8004c40:	b2db      	uxtb	r3, r3
 8004c42:	737b      	strb	r3, [r7, #13]
 8004c44:	887b      	ldrh	r3, [r7, #2]
 8004c46:	0a1b      	lsrs	r3, r3, #8
 8004c48:	b29b      	uxth	r3, r3
 8004c4a:	b2db      	uxtb	r3, r3
 8004c4c:	73bb      	strb	r3, [r7, #14]
 8004c4e:	887b      	ldrh	r3, [r7, #2]
 8004c50:	b2db      	uxtb	r3, r3
 8004c52:	73fb      	strb	r3, [r7, #15]
        ILI9341_WriteData(data, sizeof(data));
 8004c54:	f107 030c 	add.w	r3, r7, #12
 8004c58:	2104      	movs	r1, #4
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f7ff ffac 	bl	8004bb8 <ILI9341_WriteData>
    }

    // row address set
    ILI9341_WriteCommand(0x2B); // RASET
 8004c60:	202b      	movs	r0, #43	@ 0x2b
 8004c62:	f7ff ff8f 	bl	8004b84 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { (y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1 & 0xFF };
 8004c66:	88bb      	ldrh	r3, [r7, #4]
 8004c68:	0a1b      	lsrs	r3, r3, #8
 8004c6a:	b29b      	uxth	r3, r3
 8004c6c:	b2db      	uxtb	r3, r3
 8004c6e:	723b      	strb	r3, [r7, #8]
 8004c70:	88bb      	ldrh	r3, [r7, #4]
 8004c72:	b2db      	uxtb	r3, r3
 8004c74:	727b      	strb	r3, [r7, #9]
 8004c76:	883b      	ldrh	r3, [r7, #0]
 8004c78:	0a1b      	lsrs	r3, r3, #8
 8004c7a:	b29b      	uxth	r3, r3
 8004c7c:	b2db      	uxtb	r3, r3
 8004c7e:	72bb      	strb	r3, [r7, #10]
 8004c80:	883b      	ldrh	r3, [r7, #0]
 8004c82:	b2db      	uxtb	r3, r3
 8004c84:	72fb      	strb	r3, [r7, #11]
        ILI9341_WriteData(data, sizeof(data));
 8004c86:	f107 0308 	add.w	r3, r7, #8
 8004c8a:	2104      	movs	r1, #4
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f7ff ff93 	bl	8004bb8 <ILI9341_WriteData>
    }

    // write to RAM
    ILI9341_WriteCommand(0x2C); // RAMWR
 8004c92:	202c      	movs	r0, #44	@ 0x2c
 8004c94:	f7ff ff76 	bl	8004b84 <ILI9341_WriteCommand>
}
 8004c98:	bf00      	nop
 8004c9a:	3714      	adds	r7, #20
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd90      	pop	{r4, r7, pc}

08004ca0 <ILI9341_Init>:

void ILI9341_Init() {
 8004ca0:	b590      	push	{r4, r7, lr}
 8004ca2:	b09b      	sub	sp, #108	@ 0x6c
 8004ca4:	af00      	add	r7, sp, #0
    ILI9341_Select();
 8004ca6:	f7ff ff41 	bl	8004b2c <ILI9341_Select>
    ILI9341_Reset();
 8004caa:	f7ff ff57 	bl	8004b5c <ILI9341_Reset>

    // command list is based on https://github.com/martnak/STM32-ILI9341

    // SOFTWARE RESET
    ILI9341_WriteCommand(0x01);
 8004cae:	2001      	movs	r0, #1
 8004cb0:	f7ff ff68 	bl	8004b84 <ILI9341_WriteCommand>
    HAL_Delay(1000);
 8004cb4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004cb8:	f7fd f984 	bl	8001fc4 <HAL_Delay>
        
    // POWER CONTROL A
    ILI9341_WriteCommand(0xCB);
 8004cbc:	20cb      	movs	r0, #203	@ 0xcb
 8004cbe:	f7ff ff61 	bl	8004b84 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x39, 0x2C, 0x00, 0x34, 0x02 };
 8004cc2:	4a87      	ldr	r2, [pc, #540]	@ (8004ee0 <ILI9341_Init+0x240>)
 8004cc4:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8004cc8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004ccc:	6018      	str	r0, [r3, #0]
 8004cce:	3304      	adds	r3, #4
 8004cd0:	7019      	strb	r1, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 8004cd2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8004cd6:	2105      	movs	r1, #5
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f7ff ff6d 	bl	8004bb8 <ILI9341_WriteData>
    }

    // POWER CONTROL B
    ILI9341_WriteCommand(0xCF);
 8004cde:	20cf      	movs	r0, #207	@ 0xcf
 8004ce0:	f7ff ff50 	bl	8004b84 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0xC1, 0x30 };
 8004ce4:	4a7f      	ldr	r2, [pc, #508]	@ (8004ee4 <ILI9341_Init+0x244>)
 8004ce6:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8004cea:	6812      	ldr	r2, [r2, #0]
 8004cec:	4611      	mov	r1, r2
 8004cee:	8019      	strh	r1, [r3, #0]
 8004cf0:	3302      	adds	r3, #2
 8004cf2:	0c12      	lsrs	r2, r2, #16
 8004cf4:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 8004cf6:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8004cfa:	2103      	movs	r1, #3
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	f7ff ff5b 	bl	8004bb8 <ILI9341_WriteData>
    }

    // DRIVER TIMING CONTROL A
    ILI9341_WriteCommand(0xE8);
 8004d02:	20e8      	movs	r0, #232	@ 0xe8
 8004d04:	f7ff ff3e 	bl	8004b84 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x85, 0x00, 0x78 };
 8004d08:	4a77      	ldr	r2, [pc, #476]	@ (8004ee8 <ILI9341_Init+0x248>)
 8004d0a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8004d0e:	6812      	ldr	r2, [r2, #0]
 8004d10:	4611      	mov	r1, r2
 8004d12:	8019      	strh	r1, [r3, #0]
 8004d14:	3302      	adds	r3, #2
 8004d16:	0c12      	lsrs	r2, r2, #16
 8004d18:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 8004d1a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8004d1e:	2103      	movs	r1, #3
 8004d20:	4618      	mov	r0, r3
 8004d22:	f7ff ff49 	bl	8004bb8 <ILI9341_WriteData>
    }

    // DRIVER TIMING CONTROL B
    ILI9341_WriteCommand(0xEA);
 8004d26:	20ea      	movs	r0, #234	@ 0xea
 8004d28:	f7ff ff2c 	bl	8004b84 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x00 };
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
        ILI9341_WriteData(data, sizeof(data));
 8004d32:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8004d36:	2102      	movs	r1, #2
 8004d38:	4618      	mov	r0, r3
 8004d3a:	f7ff ff3d 	bl	8004bb8 <ILI9341_WriteData>
    }

    // POWER ON SEQUENCE CONTROL
    ILI9341_WriteCommand(0xED);
 8004d3e:	20ed      	movs	r0, #237	@ 0xed
 8004d40:	f7ff ff20 	bl	8004b84 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x64, 0x03, 0x12, 0x81 };
 8004d44:	4b69      	ldr	r3, [pc, #420]	@ (8004eec <ILI9341_Init+0x24c>)
 8004d46:	653b      	str	r3, [r7, #80]	@ 0x50
        ILI9341_WriteData(data, sizeof(data));
 8004d48:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8004d4c:	2104      	movs	r1, #4
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f7ff ff32 	bl	8004bb8 <ILI9341_WriteData>
    }

    // PUMP RATIO CONTROL
    ILI9341_WriteCommand(0xF7);
 8004d54:	20f7      	movs	r0, #247	@ 0xf7
 8004d56:	f7ff ff15 	bl	8004b84 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x20 };
 8004d5a:	2320      	movs	r3, #32
 8004d5c:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
        ILI9341_WriteData(data, sizeof(data));
 8004d60:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8004d64:	2101      	movs	r1, #1
 8004d66:	4618      	mov	r0, r3
 8004d68:	f7ff ff26 	bl	8004bb8 <ILI9341_WriteData>
    }

    // POWER CONTROL,VRH[5:0]
    ILI9341_WriteCommand(0xC0);
 8004d6c:	20c0      	movs	r0, #192	@ 0xc0
 8004d6e:	f7ff ff09 	bl	8004b84 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x23 };
 8004d72:	2323      	movs	r3, #35	@ 0x23
 8004d74:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
        ILI9341_WriteData(data, sizeof(data));
 8004d78:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8004d7c:	2101      	movs	r1, #1
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f7ff ff1a 	bl	8004bb8 <ILI9341_WriteData>
    }

    // POWER CONTROL,SAP[2:0];BT[3:0]
    ILI9341_WriteCommand(0xC1);
 8004d84:	20c1      	movs	r0, #193	@ 0xc1
 8004d86:	f7ff fefd 	bl	8004b84 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x10 };
 8004d8a:	2310      	movs	r3, #16
 8004d8c:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
        ILI9341_WriteData(data, sizeof(data));
 8004d90:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8004d94:	2101      	movs	r1, #1
 8004d96:	4618      	mov	r0, r3
 8004d98:	f7ff ff0e 	bl	8004bb8 <ILI9341_WriteData>
    }

    // VCM CONTROL
    ILI9341_WriteCommand(0xC5);
 8004d9c:	20c5      	movs	r0, #197	@ 0xc5
 8004d9e:	f7ff fef1 	bl	8004b84 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x3E, 0x28 };
 8004da2:	f642 033e 	movw	r3, #10302	@ 0x283e
 8004da6:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
        ILI9341_WriteData(data, sizeof(data));
 8004daa:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8004dae:	2102      	movs	r1, #2
 8004db0:	4618      	mov	r0, r3
 8004db2:	f7ff ff01 	bl	8004bb8 <ILI9341_WriteData>
    }

    // VCM CONTROL 2
    ILI9341_WriteCommand(0xC7);
 8004db6:	20c7      	movs	r0, #199	@ 0xc7
 8004db8:	f7ff fee4 	bl	8004b84 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x86 };
 8004dbc:	2386      	movs	r3, #134	@ 0x86
 8004dbe:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
        ILI9341_WriteData(data, sizeof(data));
 8004dc2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8004dc6:	2101      	movs	r1, #1
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f7ff fef5 	bl	8004bb8 <ILI9341_WriteData>
    }

    // MEMORY ACCESS CONTROL
    ILI9341_WriteCommand(0x36);
 8004dce:	2036      	movs	r0, #54	@ 0x36
 8004dd0:	f7ff fed8 	bl	8004b84 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x48 };
 8004dd4:	2348      	movs	r3, #72	@ 0x48
 8004dd6:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
        ILI9341_WriteData(data, sizeof(data));
 8004dda:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8004dde:	2101      	movs	r1, #1
 8004de0:	4618      	mov	r0, r3
 8004de2:	f7ff fee9 	bl	8004bb8 <ILI9341_WriteData>
    }

    // PIXEL FORMAT
    ILI9341_WriteCommand(0x3A);
 8004de6:	203a      	movs	r0, #58	@ 0x3a
 8004de8:	f7ff fecc 	bl	8004b84 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x55 };
 8004dec:	2355      	movs	r3, #85	@ 0x55
 8004dee:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        ILI9341_WriteData(data, sizeof(data));
 8004df2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8004df6:	2101      	movs	r1, #1
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f7ff fedd 	bl	8004bb8 <ILI9341_WriteData>
    }

    // FRAME RATIO CONTROL, STANDARD RGB COLOR
    ILI9341_WriteCommand(0xB1);
 8004dfe:	20b1      	movs	r0, #177	@ 0xb1
 8004e00:	f7ff fec0 	bl	8004b84 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x18 };
 8004e04:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8004e08:	863b      	strh	r3, [r7, #48]	@ 0x30
        ILI9341_WriteData(data, sizeof(data));
 8004e0a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004e0e:	2102      	movs	r1, #2
 8004e10:	4618      	mov	r0, r3
 8004e12:	f7ff fed1 	bl	8004bb8 <ILI9341_WriteData>
    }

    // DISPLAY FUNCTION CONTROL
    ILI9341_WriteCommand(0xB6);
 8004e16:	20b6      	movs	r0, #182	@ 0xb6
 8004e18:	f7ff feb4 	bl	8004b84 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x08, 0x82, 0x27 };
 8004e1c:	4a34      	ldr	r2, [pc, #208]	@ (8004ef0 <ILI9341_Init+0x250>)
 8004e1e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004e22:	6812      	ldr	r2, [r2, #0]
 8004e24:	4611      	mov	r1, r2
 8004e26:	8019      	strh	r1, [r3, #0]
 8004e28:	3302      	adds	r3, #2
 8004e2a:	0c12      	lsrs	r2, r2, #16
 8004e2c:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 8004e2e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004e32:	2103      	movs	r1, #3
 8004e34:	4618      	mov	r0, r3
 8004e36:	f7ff febf 	bl	8004bb8 <ILI9341_WriteData>
    }

    // 3GAMMA FUNCTION DISABLE
    ILI9341_WriteCommand(0xF2);
 8004e3a:	20f2      	movs	r0, #242	@ 0xf2
 8004e3c:	f7ff fea2 	bl	8004b84 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00 };
 8004e40:	2300      	movs	r3, #0
 8004e42:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
        ILI9341_WriteData(data, sizeof(data));
 8004e46:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004e4a:	2101      	movs	r1, #1
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f7ff feb3 	bl	8004bb8 <ILI9341_WriteData>
    }

    // GAMMA CURVE SELECTED
    ILI9341_WriteCommand(0x26);
 8004e52:	2026      	movs	r0, #38	@ 0x26
 8004e54:	f7ff fe96 	bl	8004b84 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x01 };
 8004e58:	2301      	movs	r3, #1
 8004e5a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        ILI9341_WriteData(data, sizeof(data));
 8004e5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004e62:	2101      	movs	r1, #1
 8004e64:	4618      	mov	r0, r3
 8004e66:	f7ff fea7 	bl	8004bb8 <ILI9341_WriteData>
    }

    // POSITIVE GAMMA CORRECTION
    ILI9341_WriteCommand(0xE0);
 8004e6a:	20e0      	movs	r0, #224	@ 0xe0
 8004e6c:	f7ff fe8a 	bl	8004b84 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x0F, 0x31, 0x2B, 0x0C, 0x0E, 0x08, 0x4E, 0xF1,
 8004e70:	4b20      	ldr	r3, [pc, #128]	@ (8004ef4 <ILI9341_Init+0x254>)
 8004e72:	f107 0414 	add.w	r4, r7, #20
 8004e76:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004e78:	c407      	stmia	r4!, {r0, r1, r2}
 8004e7a:	8023      	strh	r3, [r4, #0]
 8004e7c:	3402      	adds	r4, #2
 8004e7e:	0c1b      	lsrs	r3, r3, #16
 8004e80:	7023      	strb	r3, [r4, #0]
                           0x37, 0x07, 0x10, 0x03, 0x0E, 0x09, 0x00 };
        ILI9341_WriteData(data, sizeof(data));
 8004e82:	f107 0314 	add.w	r3, r7, #20
 8004e86:	210f      	movs	r1, #15
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f7ff fe95 	bl	8004bb8 <ILI9341_WriteData>
    }

    // NEGATIVE GAMMA CORRECTION
    ILI9341_WriteCommand(0xE1);
 8004e8e:	20e1      	movs	r0, #225	@ 0xe1
 8004e90:	f7ff fe78 	bl	8004b84 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x0E, 0x14, 0x03, 0x11, 0x07, 0x31, 0xC1,
 8004e94:	4b18      	ldr	r3, [pc, #96]	@ (8004ef8 <ILI9341_Init+0x258>)
 8004e96:	1d3c      	adds	r4, r7, #4
 8004e98:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004e9a:	c407      	stmia	r4!, {r0, r1, r2}
 8004e9c:	8023      	strh	r3, [r4, #0]
 8004e9e:	3402      	adds	r4, #2
 8004ea0:	0c1b      	lsrs	r3, r3, #16
 8004ea2:	7023      	strb	r3, [r4, #0]
                           0x48, 0x08, 0x0F, 0x0C, 0x31, 0x36, 0x0F };
        ILI9341_WriteData(data, sizeof(data));
 8004ea4:	1d3b      	adds	r3, r7, #4
 8004ea6:	210f      	movs	r1, #15
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f7ff fe85 	bl	8004bb8 <ILI9341_WriteData>
    }

    // EXIT SLEEP
    ILI9341_WriteCommand(0x11);
 8004eae:	2011      	movs	r0, #17
 8004eb0:	f7ff fe68 	bl	8004b84 <ILI9341_WriteCommand>
    HAL_Delay(120);
 8004eb4:	2078      	movs	r0, #120	@ 0x78
 8004eb6:	f7fd f885 	bl	8001fc4 <HAL_Delay>

    // TURN ON DISPLAY
    ILI9341_WriteCommand(0x29);
 8004eba:	2029      	movs	r0, #41	@ 0x29
 8004ebc:	f7ff fe62 	bl	8004b84 <ILI9341_WriteCommand>

    // MADCTL
    ILI9341_WriteCommand(0x36);
 8004ec0:	2036      	movs	r0, #54	@ 0x36
 8004ec2:	f7ff fe5f 	bl	8004b84 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { ILI9341_ROTATION };
 8004ec6:	23e8      	movs	r3, #232	@ 0xe8
 8004ec8:	703b      	strb	r3, [r7, #0]
        ILI9341_WriteData(data, sizeof(data));
 8004eca:	463b      	mov	r3, r7
 8004ecc:	2101      	movs	r1, #1
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f7ff fe72 	bl	8004bb8 <ILI9341_WriteData>
    }

    ILI9341_Unselect();
 8004ed4:	f7ff fe36 	bl	8004b44 <ILI9341_Unselect>
}
 8004ed8:	bf00      	nop
 8004eda:	376c      	adds	r7, #108	@ 0x6c
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd90      	pop	{r4, r7, pc}
 8004ee0:	08006284 	.word	0x08006284
 8004ee4:	0800628c 	.word	0x0800628c
 8004ee8:	08006290 	.word	0x08006290
 8004eec:	81120364 	.word	0x81120364
 8004ef0:	08006294 	.word	0x08006294
 8004ef4:	08006298 	.word	0x08006298
 8004ef8:	080062a8 	.word	0x080062a8

08004efc <ILI9341_WriteChar>:
    ILI9341_WriteData(data, sizeof(data));

    ILI9341_Unselect();
}

static void ILI9341_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8004efc:	b082      	sub	sp, #8
 8004efe:	b580      	push	{r7, lr}
 8004f00:	b088      	sub	sp, #32
 8004f02:	af00      	add	r7, sp, #0
 8004f04:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f06:	4603      	mov	r3, r0
 8004f08:	80fb      	strh	r3, [r7, #6]
 8004f0a:	460b      	mov	r3, r1
 8004f0c:	80bb      	strh	r3, [r7, #4]
 8004f0e:	4613      	mov	r3, r2
 8004f10:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ILI9341_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8004f12:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8004f16:	461a      	mov	r2, r3
 8004f18:	88fb      	ldrh	r3, [r7, #6]
 8004f1a:	4413      	add	r3, r2
 8004f1c:	b29b      	uxth	r3, r3
 8004f1e:	3b01      	subs	r3, #1
 8004f20:	b29a      	uxth	r2, r3
 8004f22:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8004f26:	4619      	mov	r1, r3
 8004f28:	88bb      	ldrh	r3, [r7, #4]
 8004f2a:	440b      	add	r3, r1
 8004f2c:	b29b      	uxth	r3, r3
 8004f2e:	3b01      	subs	r3, #1
 8004f30:	b29b      	uxth	r3, r3
 8004f32:	88b9      	ldrh	r1, [r7, #4]
 8004f34:	88f8      	ldrh	r0, [r7, #6]
 8004f36:	f7ff fe6b 	bl	8004c10 <ILI9341_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	61fb      	str	r3, [r7, #28]
 8004f3e:	e041      	b.n	8004fc4 <ILI9341_WriteChar+0xc8>
        b = font.data[(ch - 32) * font.height + i];
 8004f40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f42:	78fb      	ldrb	r3, [r7, #3]
 8004f44:	3b20      	subs	r3, #32
 8004f46:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 8004f4a:	fb01 f303 	mul.w	r3, r1, r3
 8004f4e:	4619      	mov	r1, r3
 8004f50:	69fb      	ldr	r3, [r7, #28]
 8004f52:	440b      	add	r3, r1
 8004f54:	005b      	lsls	r3, r3, #1
 8004f56:	4413      	add	r3, r2
 8004f58:	881b      	ldrh	r3, [r3, #0]
 8004f5a:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	61bb      	str	r3, [r7, #24]
 8004f60:	e027      	b.n	8004fb2 <ILI9341_WriteChar+0xb6>
            if((b << j) & 0x8000)  {
 8004f62:	697a      	ldr	r2, [r7, #20]
 8004f64:	69bb      	ldr	r3, [r7, #24]
 8004f66:	fa02 f303 	lsl.w	r3, r2, r3
 8004f6a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d00e      	beq.n	8004f90 <ILI9341_WriteChar+0x94>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8004f72:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8004f74:	0a1b      	lsrs	r3, r3, #8
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	b2db      	uxtb	r3, r3
 8004f7a:	743b      	strb	r3, [r7, #16]
 8004f7c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8004f7e:	b2db      	uxtb	r3, r3
 8004f80:	747b      	strb	r3, [r7, #17]
                ILI9341_WriteData(data, sizeof(data));
 8004f82:	f107 0310 	add.w	r3, r7, #16
 8004f86:	2102      	movs	r1, #2
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f7ff fe15 	bl	8004bb8 <ILI9341_WriteData>
 8004f8e:	e00d      	b.n	8004fac <ILI9341_WriteChar+0xb0>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8004f90:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004f92:	0a1b      	lsrs	r3, r3, #8
 8004f94:	b29b      	uxth	r3, r3
 8004f96:	b2db      	uxtb	r3, r3
 8004f98:	733b      	strb	r3, [r7, #12]
 8004f9a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004f9c:	b2db      	uxtb	r3, r3
 8004f9e:	737b      	strb	r3, [r7, #13]
                ILI9341_WriteData(data, sizeof(data));
 8004fa0:	f107 030c 	add.w	r3, r7, #12
 8004fa4:	2102      	movs	r1, #2
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f7ff fe06 	bl	8004bb8 <ILI9341_WriteData>
        for(j = 0; j < font.width; j++) {
 8004fac:	69bb      	ldr	r3, [r7, #24]
 8004fae:	3301      	adds	r3, #1
 8004fb0:	61bb      	str	r3, [r7, #24]
 8004fb2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8004fb6:	461a      	mov	r2, r3
 8004fb8:	69bb      	ldr	r3, [r7, #24]
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d3d1      	bcc.n	8004f62 <ILI9341_WriteChar+0x66>
    for(i = 0; i < font.height; i++) {
 8004fbe:	69fb      	ldr	r3, [r7, #28]
 8004fc0:	3301      	adds	r3, #1
 8004fc2:	61fb      	str	r3, [r7, #28]
 8004fc4:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8004fc8:	461a      	mov	r2, r3
 8004fca:	69fb      	ldr	r3, [r7, #28]
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d3b7      	bcc.n	8004f40 <ILI9341_WriteChar+0x44>
            }
        }
    }
}
 8004fd0:	bf00      	nop
 8004fd2:	bf00      	nop
 8004fd4:	3720      	adds	r7, #32
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004fdc:	b002      	add	sp, #8
 8004fde:	4770      	bx	lr

08004fe0 <ILI9341_WriteString>:

void ILI9341_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8004fe0:	b082      	sub	sp, #8
 8004fe2:	b580      	push	{r7, lr}
 8004fe4:	b086      	sub	sp, #24
 8004fe6:	af04      	add	r7, sp, #16
 8004fe8:	603a      	str	r2, [r7, #0]
 8004fea:	617b      	str	r3, [r7, #20]
 8004fec:	4603      	mov	r3, r0
 8004fee:	80fb      	strh	r3, [r7, #6]
 8004ff0:	460b      	mov	r3, r1
 8004ff2:	80bb      	strh	r3, [r7, #4]
    ILI9341_Select();
 8004ff4:	f7ff fd9a 	bl	8004b2c <ILI9341_Select>

    while(*str) {
 8004ff8:	e02e      	b.n	8005058 <ILI9341_WriteString+0x78>
        if(x + font.width >= ILI9341_WIDTH) {
 8004ffa:	88fb      	ldrh	r3, [r7, #6]
 8004ffc:	7d3a      	ldrb	r2, [r7, #20]
 8004ffe:	4413      	add	r3, r2
 8005000:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8005004:	db13      	blt.n	800502e <ILI9341_WriteString+0x4e>
            x = 0;
 8005006:	2300      	movs	r3, #0
 8005008:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 800500a:	7d7b      	ldrb	r3, [r7, #21]
 800500c:	461a      	mov	r2, r3
 800500e:	88bb      	ldrh	r3, [r7, #4]
 8005010:	4413      	add	r3, r2
 8005012:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ILI9341_HEIGHT) {
 8005014:	88bb      	ldrh	r3, [r7, #4]
 8005016:	7d7a      	ldrb	r2, [r7, #21]
 8005018:	4413      	add	r3, r2
 800501a:	2bef      	cmp	r3, #239	@ 0xef
 800501c:	dc21      	bgt.n	8005062 <ILI9341_WriteString+0x82>
                break;
            }

            if(*str == ' ') {
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	781b      	ldrb	r3, [r3, #0]
 8005022:	2b20      	cmp	r3, #32
 8005024:	d103      	bne.n	800502e <ILI9341_WriteString+0x4e>
                // skip spaces in the beginning of the new line
                str++;
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	3301      	adds	r3, #1
 800502a:	603b      	str	r3, [r7, #0]
                continue;
 800502c:	e014      	b.n	8005058 <ILI9341_WriteString+0x78>
            }
        }

        ILI9341_WriteChar(x, y, *str, font, color, bgcolor);
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	781a      	ldrb	r2, [r3, #0]
 8005032:	88b9      	ldrh	r1, [r7, #4]
 8005034:	88f8      	ldrh	r0, [r7, #6]
 8005036:	8c3b      	ldrh	r3, [r7, #32]
 8005038:	9302      	str	r3, [sp, #8]
 800503a:	8bbb      	ldrh	r3, [r7, #28]
 800503c:	9301      	str	r3, [sp, #4]
 800503e:	69bb      	ldr	r3, [r7, #24]
 8005040:	9300      	str	r3, [sp, #0]
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	f7ff ff5a 	bl	8004efc <ILI9341_WriteChar>
        x += font.width;
 8005048:	7d3b      	ldrb	r3, [r7, #20]
 800504a:	461a      	mov	r2, r3
 800504c:	88fb      	ldrh	r3, [r7, #6]
 800504e:	4413      	add	r3, r2
 8005050:	80fb      	strh	r3, [r7, #6]
        str++;
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	3301      	adds	r3, #1
 8005056:	603b      	str	r3, [r7, #0]
    while(*str) {
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	781b      	ldrb	r3, [r3, #0]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d1cc      	bne.n	8004ffa <ILI9341_WriteString+0x1a>
 8005060:	e000      	b.n	8005064 <ILI9341_WriteString+0x84>
                break;
 8005062:	bf00      	nop
    }

    ILI9341_Unselect();
 8005064:	f7ff fd6e 	bl	8004b44 <ILI9341_Unselect>
}
 8005068:	bf00      	nop
 800506a:	3708      	adds	r7, #8
 800506c:	46bd      	mov	sp, r7
 800506e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005072:	b002      	add	sp, #8
 8005074:	4770      	bx	lr
	...

08005078 <ILI9341_FillRectangle>:

void ILI9341_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8005078:	b590      	push	{r4, r7, lr}
 800507a:	b085      	sub	sp, #20
 800507c:	af00      	add	r7, sp, #0
 800507e:	4604      	mov	r4, r0
 8005080:	4608      	mov	r0, r1
 8005082:	4611      	mov	r1, r2
 8005084:	461a      	mov	r2, r3
 8005086:	4623      	mov	r3, r4
 8005088:	80fb      	strh	r3, [r7, #6]
 800508a:	4603      	mov	r3, r0
 800508c:	80bb      	strh	r3, [r7, #4]
 800508e:	460b      	mov	r3, r1
 8005090:	807b      	strh	r3, [r7, #2]
 8005092:	4613      	mov	r3, r2
 8005094:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 8005096:	88fb      	ldrh	r3, [r7, #6]
 8005098:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800509c:	d251      	bcs.n	8005142 <ILI9341_FillRectangle+0xca>
 800509e:	88bb      	ldrh	r3, [r7, #4]
 80050a0:	2bef      	cmp	r3, #239	@ 0xef
 80050a2:	d84e      	bhi.n	8005142 <ILI9341_FillRectangle+0xca>
    if((x + w - 1) >= ILI9341_WIDTH) w = ILI9341_WIDTH - x;
 80050a4:	88fa      	ldrh	r2, [r7, #6]
 80050a6:	887b      	ldrh	r3, [r7, #2]
 80050a8:	4413      	add	r3, r2
 80050aa:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80050ae:	dd03      	ble.n	80050b8 <ILI9341_FillRectangle+0x40>
 80050b0:	88fb      	ldrh	r3, [r7, #6]
 80050b2:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 80050b6:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ILI9341_HEIGHT) h = ILI9341_HEIGHT - y;
 80050b8:	88ba      	ldrh	r2, [r7, #4]
 80050ba:	883b      	ldrh	r3, [r7, #0]
 80050bc:	4413      	add	r3, r2
 80050be:	2bf0      	cmp	r3, #240	@ 0xf0
 80050c0:	dd03      	ble.n	80050ca <ILI9341_FillRectangle+0x52>
 80050c2:	88bb      	ldrh	r3, [r7, #4]
 80050c4:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 80050c8:	803b      	strh	r3, [r7, #0]

    ILI9341_Select();
 80050ca:	f7ff fd2f 	bl	8004b2c <ILI9341_Select>
    ILI9341_SetAddressWindow(x, y, x+w-1, y+h-1);
 80050ce:	88fa      	ldrh	r2, [r7, #6]
 80050d0:	887b      	ldrh	r3, [r7, #2]
 80050d2:	4413      	add	r3, r2
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	3b01      	subs	r3, #1
 80050d8:	b29c      	uxth	r4, r3
 80050da:	88ba      	ldrh	r2, [r7, #4]
 80050dc:	883b      	ldrh	r3, [r7, #0]
 80050de:	4413      	add	r3, r2
 80050e0:	b29b      	uxth	r3, r3
 80050e2:	3b01      	subs	r3, #1
 80050e4:	b29b      	uxth	r3, r3
 80050e6:	88b9      	ldrh	r1, [r7, #4]
 80050e8:	88f8      	ldrh	r0, [r7, #6]
 80050ea:	4622      	mov	r2, r4
 80050ec:	f7ff fd90 	bl	8004c10 <ILI9341_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 80050f0:	8c3b      	ldrh	r3, [r7, #32]
 80050f2:	0a1b      	lsrs	r3, r3, #8
 80050f4:	b29b      	uxth	r3, r3
 80050f6:	b2db      	uxtb	r3, r3
 80050f8:	733b      	strb	r3, [r7, #12]
 80050fa:	8c3b      	ldrh	r3, [r7, #32]
 80050fc:	b2db      	uxtb	r3, r3
 80050fe:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 8005100:	2201      	movs	r2, #1
 8005102:	2110      	movs	r1, #16
 8005104:	4811      	ldr	r0, [pc, #68]	@ (800514c <ILI9341_FillRectangle+0xd4>)
 8005106:	f7fd fde5 	bl	8002cd4 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 800510a:	883b      	ldrh	r3, [r7, #0]
 800510c:	80bb      	strh	r3, [r7, #4]
 800510e:	e012      	b.n	8005136 <ILI9341_FillRectangle+0xbe>
        for(x = w; x > 0; x--) {
 8005110:	887b      	ldrh	r3, [r7, #2]
 8005112:	80fb      	strh	r3, [r7, #6]
 8005114:	e009      	b.n	800512a <ILI9341_FillRectangle+0xb2>
            HAL_SPI_Transmit(&ILI9341_SPI_PORT, data, sizeof(data), 100);
 8005116:	f107 010c 	add.w	r1, r7, #12
 800511a:	2364      	movs	r3, #100	@ 0x64
 800511c:	2202      	movs	r2, #2
 800511e:	480c      	ldr	r0, [pc, #48]	@ (8005150 <ILI9341_FillRectangle+0xd8>)
 8005120:	f7ff fae3 	bl	80046ea <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8005124:	88fb      	ldrh	r3, [r7, #6]
 8005126:	3b01      	subs	r3, #1
 8005128:	80fb      	strh	r3, [r7, #6]
 800512a:	88fb      	ldrh	r3, [r7, #6]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d1f2      	bne.n	8005116 <ILI9341_FillRectangle+0x9e>
    for(y = h; y > 0; y--) {
 8005130:	88bb      	ldrh	r3, [r7, #4]
 8005132:	3b01      	subs	r3, #1
 8005134:	80bb      	strh	r3, [r7, #4]
 8005136:	88bb      	ldrh	r3, [r7, #4]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d1e9      	bne.n	8005110 <ILI9341_FillRectangle+0x98>
        }
    }

    ILI9341_Unselect();
 800513c:	f7ff fd02 	bl	8004b44 <ILI9341_Unselect>
 8005140:	e000      	b.n	8005144 <ILI9341_FillRectangle+0xcc>
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 8005142:	bf00      	nop
}
 8005144:	3714      	adds	r7, #20
 8005146:	46bd      	mov	sp, r7
 8005148:	bd90      	pop	{r4, r7, pc}
 800514a:	bf00      	nop
 800514c:	40020000 	.word	0x40020000
 8005150:	2000013c 	.word	0x2000013c

08005154 <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color) {
 8005154:	b580      	push	{r7, lr}
 8005156:	b084      	sub	sp, #16
 8005158:	af02      	add	r7, sp, #8
 800515a:	4603      	mov	r3, r0
 800515c:	80fb      	strh	r3, [r7, #6]
    ILI9341_FillRectangle(0, 0, ILI9341_WIDTH, ILI9341_HEIGHT, color);
 800515e:	88fb      	ldrh	r3, [r7, #6]
 8005160:	9300      	str	r3, [sp, #0]
 8005162:	23f0      	movs	r3, #240	@ 0xf0
 8005164:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8005168:	2100      	movs	r1, #0
 800516a:	2000      	movs	r0, #0
 800516c:	f7ff ff84 	bl	8005078 <ILI9341_FillRectangle>
}
 8005170:	bf00      	nop
 8005172:	3708      	adds	r7, #8
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}

08005178 <ILI9341_DrawImage>:

void ILI9341_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t* data) {
 8005178:	b590      	push	{r4, r7, lr}
 800517a:	b083      	sub	sp, #12
 800517c:	af00      	add	r7, sp, #0
 800517e:	4604      	mov	r4, r0
 8005180:	4608      	mov	r0, r1
 8005182:	4611      	mov	r1, r2
 8005184:	461a      	mov	r2, r3
 8005186:	4623      	mov	r3, r4
 8005188:	80fb      	strh	r3, [r7, #6]
 800518a:	4603      	mov	r3, r0
 800518c:	80bb      	strh	r3, [r7, #4]
 800518e:	460b      	mov	r3, r1
 8005190:	807b      	strh	r3, [r7, #2]
 8005192:	4613      	mov	r3, r2
 8005194:	803b      	strh	r3, [r7, #0]
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 8005196:	88fb      	ldrh	r3, [r7, #6]
 8005198:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800519c:	d22c      	bcs.n	80051f8 <ILI9341_DrawImage+0x80>
 800519e:	88bb      	ldrh	r3, [r7, #4]
 80051a0:	2bef      	cmp	r3, #239	@ 0xef
 80051a2:	d829      	bhi.n	80051f8 <ILI9341_DrawImage+0x80>
    if((x + w - 1) >= ILI9341_WIDTH) return;
 80051a4:	88fa      	ldrh	r2, [r7, #6]
 80051a6:	887b      	ldrh	r3, [r7, #2]
 80051a8:	4413      	add	r3, r2
 80051aa:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80051ae:	dc25      	bgt.n	80051fc <ILI9341_DrawImage+0x84>
    if((y + h - 1) >= ILI9341_HEIGHT) return;
 80051b0:	88ba      	ldrh	r2, [r7, #4]
 80051b2:	883b      	ldrh	r3, [r7, #0]
 80051b4:	4413      	add	r3, r2
 80051b6:	2bf0      	cmp	r3, #240	@ 0xf0
 80051b8:	dc22      	bgt.n	8005200 <ILI9341_DrawImage+0x88>

    ILI9341_Select();
 80051ba:	f7ff fcb7 	bl	8004b2c <ILI9341_Select>
    ILI9341_SetAddressWindow(x, y, x+w-1, y+h-1);
 80051be:	88fa      	ldrh	r2, [r7, #6]
 80051c0:	887b      	ldrh	r3, [r7, #2]
 80051c2:	4413      	add	r3, r2
 80051c4:	b29b      	uxth	r3, r3
 80051c6:	3b01      	subs	r3, #1
 80051c8:	b29c      	uxth	r4, r3
 80051ca:	88ba      	ldrh	r2, [r7, #4]
 80051cc:	883b      	ldrh	r3, [r7, #0]
 80051ce:	4413      	add	r3, r2
 80051d0:	b29b      	uxth	r3, r3
 80051d2:	3b01      	subs	r3, #1
 80051d4:	b29b      	uxth	r3, r3
 80051d6:	88b9      	ldrh	r1, [r7, #4]
 80051d8:	88f8      	ldrh	r0, [r7, #6]
 80051da:	4622      	mov	r2, r4
 80051dc:	f7ff fd18 	bl	8004c10 <ILI9341_SetAddressWindow>
    ILI9341_WriteData((uint8_t*)data, sizeof(uint16_t)*w*h);
 80051e0:	887b      	ldrh	r3, [r7, #2]
 80051e2:	883a      	ldrh	r2, [r7, #0]
 80051e4:	fb02 f303 	mul.w	r3, r2, r3
 80051e8:	005b      	lsls	r3, r3, #1
 80051ea:	4619      	mov	r1, r3
 80051ec:	69b8      	ldr	r0, [r7, #24]
 80051ee:	f7ff fce3 	bl	8004bb8 <ILI9341_WriteData>
    ILI9341_Unselect();
 80051f2:	f7ff fca7 	bl	8004b44 <ILI9341_Unselect>
 80051f6:	e004      	b.n	8005202 <ILI9341_DrawImage+0x8a>
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 80051f8:	bf00      	nop
 80051fa:	e002      	b.n	8005202 <ILI9341_DrawImage+0x8a>
    if((x + w - 1) >= ILI9341_WIDTH) return;
 80051fc:	bf00      	nop
 80051fe:	e000      	b.n	8005202 <ILI9341_DrawImage+0x8a>
    if((y + h - 1) >= ILI9341_HEIGHT) return;
 8005200:	bf00      	nop
}
 8005202:	370c      	adds	r7, #12
 8005204:	46bd      	mov	sp, r7
 8005206:	bd90      	pop	{r4, r7, pc}

08005208 <srand>:
 8005208:	b538      	push	{r3, r4, r5, lr}
 800520a:	4b10      	ldr	r3, [pc, #64]	@ (800524c <srand+0x44>)
 800520c:	681d      	ldr	r5, [r3, #0]
 800520e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8005210:	4604      	mov	r4, r0
 8005212:	b9b3      	cbnz	r3, 8005242 <srand+0x3a>
 8005214:	2018      	movs	r0, #24
 8005216:	f000 fa4d 	bl	80056b4 <malloc>
 800521a:	4602      	mov	r2, r0
 800521c:	6328      	str	r0, [r5, #48]	@ 0x30
 800521e:	b920      	cbnz	r0, 800522a <srand+0x22>
 8005220:	4b0b      	ldr	r3, [pc, #44]	@ (8005250 <srand+0x48>)
 8005222:	480c      	ldr	r0, [pc, #48]	@ (8005254 <srand+0x4c>)
 8005224:	2146      	movs	r1, #70	@ 0x46
 8005226:	f000 f9dd 	bl	80055e4 <__assert_func>
 800522a:	490b      	ldr	r1, [pc, #44]	@ (8005258 <srand+0x50>)
 800522c:	4b0b      	ldr	r3, [pc, #44]	@ (800525c <srand+0x54>)
 800522e:	e9c0 1300 	strd	r1, r3, [r0]
 8005232:	4b0b      	ldr	r3, [pc, #44]	@ (8005260 <srand+0x58>)
 8005234:	6083      	str	r3, [r0, #8]
 8005236:	230b      	movs	r3, #11
 8005238:	8183      	strh	r3, [r0, #12]
 800523a:	2100      	movs	r1, #0
 800523c:	2001      	movs	r0, #1
 800523e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8005242:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8005244:	2200      	movs	r2, #0
 8005246:	611c      	str	r4, [r3, #16]
 8005248:	615a      	str	r2, [r3, #20]
 800524a:	bd38      	pop	{r3, r4, r5, pc}
 800524c:	20000034 	.word	0x20000034
 8005250:	08063284 	.word	0x08063284
 8005254:	0806329b 	.word	0x0806329b
 8005258:	abcd330e 	.word	0xabcd330e
 800525c:	e66d1234 	.word	0xe66d1234
 8005260:	0005deec 	.word	0x0005deec

08005264 <rand>:
 8005264:	4b16      	ldr	r3, [pc, #88]	@ (80052c0 <rand+0x5c>)
 8005266:	b510      	push	{r4, lr}
 8005268:	681c      	ldr	r4, [r3, #0]
 800526a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800526c:	b9b3      	cbnz	r3, 800529c <rand+0x38>
 800526e:	2018      	movs	r0, #24
 8005270:	f000 fa20 	bl	80056b4 <malloc>
 8005274:	4602      	mov	r2, r0
 8005276:	6320      	str	r0, [r4, #48]	@ 0x30
 8005278:	b920      	cbnz	r0, 8005284 <rand+0x20>
 800527a:	4b12      	ldr	r3, [pc, #72]	@ (80052c4 <rand+0x60>)
 800527c:	4812      	ldr	r0, [pc, #72]	@ (80052c8 <rand+0x64>)
 800527e:	2152      	movs	r1, #82	@ 0x52
 8005280:	f000 f9b0 	bl	80055e4 <__assert_func>
 8005284:	4911      	ldr	r1, [pc, #68]	@ (80052cc <rand+0x68>)
 8005286:	4b12      	ldr	r3, [pc, #72]	@ (80052d0 <rand+0x6c>)
 8005288:	e9c0 1300 	strd	r1, r3, [r0]
 800528c:	4b11      	ldr	r3, [pc, #68]	@ (80052d4 <rand+0x70>)
 800528e:	6083      	str	r3, [r0, #8]
 8005290:	230b      	movs	r3, #11
 8005292:	8183      	strh	r3, [r0, #12]
 8005294:	2100      	movs	r1, #0
 8005296:	2001      	movs	r0, #1
 8005298:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800529c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800529e:	480e      	ldr	r0, [pc, #56]	@ (80052d8 <rand+0x74>)
 80052a0:	690b      	ldr	r3, [r1, #16]
 80052a2:	694c      	ldr	r4, [r1, #20]
 80052a4:	4a0d      	ldr	r2, [pc, #52]	@ (80052dc <rand+0x78>)
 80052a6:	4358      	muls	r0, r3
 80052a8:	fb02 0004 	mla	r0, r2, r4, r0
 80052ac:	fba3 3202 	umull	r3, r2, r3, r2
 80052b0:	3301      	adds	r3, #1
 80052b2:	eb40 0002 	adc.w	r0, r0, r2
 80052b6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80052ba:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80052be:	bd10      	pop	{r4, pc}
 80052c0:	20000034 	.word	0x20000034
 80052c4:	08063284 	.word	0x08063284
 80052c8:	0806329b 	.word	0x0806329b
 80052cc:	abcd330e 	.word	0xabcd330e
 80052d0:	e66d1234 	.word	0xe66d1234
 80052d4:	0005deec 	.word	0x0005deec
 80052d8:	5851f42d 	.word	0x5851f42d
 80052dc:	4c957f2d 	.word	0x4c957f2d

080052e0 <std>:
 80052e0:	2300      	movs	r3, #0
 80052e2:	b510      	push	{r4, lr}
 80052e4:	4604      	mov	r4, r0
 80052e6:	e9c0 3300 	strd	r3, r3, [r0]
 80052ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80052ee:	6083      	str	r3, [r0, #8]
 80052f0:	8181      	strh	r1, [r0, #12]
 80052f2:	6643      	str	r3, [r0, #100]	@ 0x64
 80052f4:	81c2      	strh	r2, [r0, #14]
 80052f6:	6183      	str	r3, [r0, #24]
 80052f8:	4619      	mov	r1, r3
 80052fa:	2208      	movs	r2, #8
 80052fc:	305c      	adds	r0, #92	@ 0x5c
 80052fe:	f000 f8f4 	bl	80054ea <memset>
 8005302:	4b0d      	ldr	r3, [pc, #52]	@ (8005338 <std+0x58>)
 8005304:	6263      	str	r3, [r4, #36]	@ 0x24
 8005306:	4b0d      	ldr	r3, [pc, #52]	@ (800533c <std+0x5c>)
 8005308:	62a3      	str	r3, [r4, #40]	@ 0x28
 800530a:	4b0d      	ldr	r3, [pc, #52]	@ (8005340 <std+0x60>)
 800530c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800530e:	4b0d      	ldr	r3, [pc, #52]	@ (8005344 <std+0x64>)
 8005310:	6323      	str	r3, [r4, #48]	@ 0x30
 8005312:	4b0d      	ldr	r3, [pc, #52]	@ (8005348 <std+0x68>)
 8005314:	6224      	str	r4, [r4, #32]
 8005316:	429c      	cmp	r4, r3
 8005318:	d006      	beq.n	8005328 <std+0x48>
 800531a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800531e:	4294      	cmp	r4, r2
 8005320:	d002      	beq.n	8005328 <std+0x48>
 8005322:	33d0      	adds	r3, #208	@ 0xd0
 8005324:	429c      	cmp	r4, r3
 8005326:	d105      	bne.n	8005334 <std+0x54>
 8005328:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800532c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005330:	f000 b954 	b.w	80055dc <__retarget_lock_init_recursive>
 8005334:	bd10      	pop	{r4, pc}
 8005336:	bf00      	nop
 8005338:	08005465 	.word	0x08005465
 800533c:	08005487 	.word	0x08005487
 8005340:	080054bf 	.word	0x080054bf
 8005344:	080054e3 	.word	0x080054e3
 8005348:	20000500 	.word	0x20000500

0800534c <stdio_exit_handler>:
 800534c:	4a02      	ldr	r2, [pc, #8]	@ (8005358 <stdio_exit_handler+0xc>)
 800534e:	4903      	ldr	r1, [pc, #12]	@ (800535c <stdio_exit_handler+0x10>)
 8005350:	4803      	ldr	r0, [pc, #12]	@ (8005360 <stdio_exit_handler+0x14>)
 8005352:	f000 b869 	b.w	8005428 <_fwalk_sglue>
 8005356:	bf00      	nop
 8005358:	20000028 	.word	0x20000028
 800535c:	08005929 	.word	0x08005929
 8005360:	20000038 	.word	0x20000038

08005364 <cleanup_stdio>:
 8005364:	6841      	ldr	r1, [r0, #4]
 8005366:	4b0c      	ldr	r3, [pc, #48]	@ (8005398 <cleanup_stdio+0x34>)
 8005368:	4299      	cmp	r1, r3
 800536a:	b510      	push	{r4, lr}
 800536c:	4604      	mov	r4, r0
 800536e:	d001      	beq.n	8005374 <cleanup_stdio+0x10>
 8005370:	f000 fada 	bl	8005928 <_fflush_r>
 8005374:	68a1      	ldr	r1, [r4, #8]
 8005376:	4b09      	ldr	r3, [pc, #36]	@ (800539c <cleanup_stdio+0x38>)
 8005378:	4299      	cmp	r1, r3
 800537a:	d002      	beq.n	8005382 <cleanup_stdio+0x1e>
 800537c:	4620      	mov	r0, r4
 800537e:	f000 fad3 	bl	8005928 <_fflush_r>
 8005382:	68e1      	ldr	r1, [r4, #12]
 8005384:	4b06      	ldr	r3, [pc, #24]	@ (80053a0 <cleanup_stdio+0x3c>)
 8005386:	4299      	cmp	r1, r3
 8005388:	d004      	beq.n	8005394 <cleanup_stdio+0x30>
 800538a:	4620      	mov	r0, r4
 800538c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005390:	f000 baca 	b.w	8005928 <_fflush_r>
 8005394:	bd10      	pop	{r4, pc}
 8005396:	bf00      	nop
 8005398:	20000500 	.word	0x20000500
 800539c:	20000568 	.word	0x20000568
 80053a0:	200005d0 	.word	0x200005d0

080053a4 <global_stdio_init.part.0>:
 80053a4:	b510      	push	{r4, lr}
 80053a6:	4b0b      	ldr	r3, [pc, #44]	@ (80053d4 <global_stdio_init.part.0+0x30>)
 80053a8:	4c0b      	ldr	r4, [pc, #44]	@ (80053d8 <global_stdio_init.part.0+0x34>)
 80053aa:	4a0c      	ldr	r2, [pc, #48]	@ (80053dc <global_stdio_init.part.0+0x38>)
 80053ac:	601a      	str	r2, [r3, #0]
 80053ae:	4620      	mov	r0, r4
 80053b0:	2200      	movs	r2, #0
 80053b2:	2104      	movs	r1, #4
 80053b4:	f7ff ff94 	bl	80052e0 <std>
 80053b8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80053bc:	2201      	movs	r2, #1
 80053be:	2109      	movs	r1, #9
 80053c0:	f7ff ff8e 	bl	80052e0 <std>
 80053c4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80053c8:	2202      	movs	r2, #2
 80053ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053ce:	2112      	movs	r1, #18
 80053d0:	f7ff bf86 	b.w	80052e0 <std>
 80053d4:	20000638 	.word	0x20000638
 80053d8:	20000500 	.word	0x20000500
 80053dc:	0800534d 	.word	0x0800534d

080053e0 <__sfp_lock_acquire>:
 80053e0:	4801      	ldr	r0, [pc, #4]	@ (80053e8 <__sfp_lock_acquire+0x8>)
 80053e2:	f000 b8fc 	b.w	80055de <__retarget_lock_acquire_recursive>
 80053e6:	bf00      	nop
 80053e8:	20000641 	.word	0x20000641

080053ec <__sfp_lock_release>:
 80053ec:	4801      	ldr	r0, [pc, #4]	@ (80053f4 <__sfp_lock_release+0x8>)
 80053ee:	f000 b8f7 	b.w	80055e0 <__retarget_lock_release_recursive>
 80053f2:	bf00      	nop
 80053f4:	20000641 	.word	0x20000641

080053f8 <__sinit>:
 80053f8:	b510      	push	{r4, lr}
 80053fa:	4604      	mov	r4, r0
 80053fc:	f7ff fff0 	bl	80053e0 <__sfp_lock_acquire>
 8005400:	6a23      	ldr	r3, [r4, #32]
 8005402:	b11b      	cbz	r3, 800540c <__sinit+0x14>
 8005404:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005408:	f7ff bff0 	b.w	80053ec <__sfp_lock_release>
 800540c:	4b04      	ldr	r3, [pc, #16]	@ (8005420 <__sinit+0x28>)
 800540e:	6223      	str	r3, [r4, #32]
 8005410:	4b04      	ldr	r3, [pc, #16]	@ (8005424 <__sinit+0x2c>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d1f5      	bne.n	8005404 <__sinit+0xc>
 8005418:	f7ff ffc4 	bl	80053a4 <global_stdio_init.part.0>
 800541c:	e7f2      	b.n	8005404 <__sinit+0xc>
 800541e:	bf00      	nop
 8005420:	08005365 	.word	0x08005365
 8005424:	20000638 	.word	0x20000638

08005428 <_fwalk_sglue>:
 8005428:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800542c:	4607      	mov	r7, r0
 800542e:	4688      	mov	r8, r1
 8005430:	4614      	mov	r4, r2
 8005432:	2600      	movs	r6, #0
 8005434:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005438:	f1b9 0901 	subs.w	r9, r9, #1
 800543c:	d505      	bpl.n	800544a <_fwalk_sglue+0x22>
 800543e:	6824      	ldr	r4, [r4, #0]
 8005440:	2c00      	cmp	r4, #0
 8005442:	d1f7      	bne.n	8005434 <_fwalk_sglue+0xc>
 8005444:	4630      	mov	r0, r6
 8005446:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800544a:	89ab      	ldrh	r3, [r5, #12]
 800544c:	2b01      	cmp	r3, #1
 800544e:	d907      	bls.n	8005460 <_fwalk_sglue+0x38>
 8005450:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005454:	3301      	adds	r3, #1
 8005456:	d003      	beq.n	8005460 <_fwalk_sglue+0x38>
 8005458:	4629      	mov	r1, r5
 800545a:	4638      	mov	r0, r7
 800545c:	47c0      	blx	r8
 800545e:	4306      	orrs	r6, r0
 8005460:	3568      	adds	r5, #104	@ 0x68
 8005462:	e7e9      	b.n	8005438 <_fwalk_sglue+0x10>

08005464 <__sread>:
 8005464:	b510      	push	{r4, lr}
 8005466:	460c      	mov	r4, r1
 8005468:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800546c:	f000 f868 	bl	8005540 <_read_r>
 8005470:	2800      	cmp	r0, #0
 8005472:	bfab      	itete	ge
 8005474:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005476:	89a3      	ldrhlt	r3, [r4, #12]
 8005478:	181b      	addge	r3, r3, r0
 800547a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800547e:	bfac      	ite	ge
 8005480:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005482:	81a3      	strhlt	r3, [r4, #12]
 8005484:	bd10      	pop	{r4, pc}

08005486 <__swrite>:
 8005486:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800548a:	461f      	mov	r7, r3
 800548c:	898b      	ldrh	r3, [r1, #12]
 800548e:	05db      	lsls	r3, r3, #23
 8005490:	4605      	mov	r5, r0
 8005492:	460c      	mov	r4, r1
 8005494:	4616      	mov	r6, r2
 8005496:	d505      	bpl.n	80054a4 <__swrite+0x1e>
 8005498:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800549c:	2302      	movs	r3, #2
 800549e:	2200      	movs	r2, #0
 80054a0:	f000 f83c 	bl	800551c <_lseek_r>
 80054a4:	89a3      	ldrh	r3, [r4, #12]
 80054a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80054aa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80054ae:	81a3      	strh	r3, [r4, #12]
 80054b0:	4632      	mov	r2, r6
 80054b2:	463b      	mov	r3, r7
 80054b4:	4628      	mov	r0, r5
 80054b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80054ba:	f000 b853 	b.w	8005564 <_write_r>

080054be <__sseek>:
 80054be:	b510      	push	{r4, lr}
 80054c0:	460c      	mov	r4, r1
 80054c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054c6:	f000 f829 	bl	800551c <_lseek_r>
 80054ca:	1c43      	adds	r3, r0, #1
 80054cc:	89a3      	ldrh	r3, [r4, #12]
 80054ce:	bf15      	itete	ne
 80054d0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80054d2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80054d6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80054da:	81a3      	strheq	r3, [r4, #12]
 80054dc:	bf18      	it	ne
 80054de:	81a3      	strhne	r3, [r4, #12]
 80054e0:	bd10      	pop	{r4, pc}

080054e2 <__sclose>:
 80054e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054e6:	f000 b809 	b.w	80054fc <_close_r>

080054ea <memset>:
 80054ea:	4402      	add	r2, r0
 80054ec:	4603      	mov	r3, r0
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d100      	bne.n	80054f4 <memset+0xa>
 80054f2:	4770      	bx	lr
 80054f4:	f803 1b01 	strb.w	r1, [r3], #1
 80054f8:	e7f9      	b.n	80054ee <memset+0x4>
	...

080054fc <_close_r>:
 80054fc:	b538      	push	{r3, r4, r5, lr}
 80054fe:	4d06      	ldr	r5, [pc, #24]	@ (8005518 <_close_r+0x1c>)
 8005500:	2300      	movs	r3, #0
 8005502:	4604      	mov	r4, r0
 8005504:	4608      	mov	r0, r1
 8005506:	602b      	str	r3, [r5, #0]
 8005508:	f7fb fe95 	bl	8001236 <_close>
 800550c:	1c43      	adds	r3, r0, #1
 800550e:	d102      	bne.n	8005516 <_close_r+0x1a>
 8005510:	682b      	ldr	r3, [r5, #0]
 8005512:	b103      	cbz	r3, 8005516 <_close_r+0x1a>
 8005514:	6023      	str	r3, [r4, #0]
 8005516:	bd38      	pop	{r3, r4, r5, pc}
 8005518:	2000063c 	.word	0x2000063c

0800551c <_lseek_r>:
 800551c:	b538      	push	{r3, r4, r5, lr}
 800551e:	4d07      	ldr	r5, [pc, #28]	@ (800553c <_lseek_r+0x20>)
 8005520:	4604      	mov	r4, r0
 8005522:	4608      	mov	r0, r1
 8005524:	4611      	mov	r1, r2
 8005526:	2200      	movs	r2, #0
 8005528:	602a      	str	r2, [r5, #0]
 800552a:	461a      	mov	r2, r3
 800552c:	f7fb feaa 	bl	8001284 <_lseek>
 8005530:	1c43      	adds	r3, r0, #1
 8005532:	d102      	bne.n	800553a <_lseek_r+0x1e>
 8005534:	682b      	ldr	r3, [r5, #0]
 8005536:	b103      	cbz	r3, 800553a <_lseek_r+0x1e>
 8005538:	6023      	str	r3, [r4, #0]
 800553a:	bd38      	pop	{r3, r4, r5, pc}
 800553c:	2000063c 	.word	0x2000063c

08005540 <_read_r>:
 8005540:	b538      	push	{r3, r4, r5, lr}
 8005542:	4d07      	ldr	r5, [pc, #28]	@ (8005560 <_read_r+0x20>)
 8005544:	4604      	mov	r4, r0
 8005546:	4608      	mov	r0, r1
 8005548:	4611      	mov	r1, r2
 800554a:	2200      	movs	r2, #0
 800554c:	602a      	str	r2, [r5, #0]
 800554e:	461a      	mov	r2, r3
 8005550:	f7fb fe38 	bl	80011c4 <_read>
 8005554:	1c43      	adds	r3, r0, #1
 8005556:	d102      	bne.n	800555e <_read_r+0x1e>
 8005558:	682b      	ldr	r3, [r5, #0]
 800555a:	b103      	cbz	r3, 800555e <_read_r+0x1e>
 800555c:	6023      	str	r3, [r4, #0]
 800555e:	bd38      	pop	{r3, r4, r5, pc}
 8005560:	2000063c 	.word	0x2000063c

08005564 <_write_r>:
 8005564:	b538      	push	{r3, r4, r5, lr}
 8005566:	4d07      	ldr	r5, [pc, #28]	@ (8005584 <_write_r+0x20>)
 8005568:	4604      	mov	r4, r0
 800556a:	4608      	mov	r0, r1
 800556c:	4611      	mov	r1, r2
 800556e:	2200      	movs	r2, #0
 8005570:	602a      	str	r2, [r5, #0]
 8005572:	461a      	mov	r2, r3
 8005574:	f7fb fe43 	bl	80011fe <_write>
 8005578:	1c43      	adds	r3, r0, #1
 800557a:	d102      	bne.n	8005582 <_write_r+0x1e>
 800557c:	682b      	ldr	r3, [r5, #0]
 800557e:	b103      	cbz	r3, 8005582 <_write_r+0x1e>
 8005580:	6023      	str	r3, [r4, #0]
 8005582:	bd38      	pop	{r3, r4, r5, pc}
 8005584:	2000063c 	.word	0x2000063c

08005588 <__errno>:
 8005588:	4b01      	ldr	r3, [pc, #4]	@ (8005590 <__errno+0x8>)
 800558a:	6818      	ldr	r0, [r3, #0]
 800558c:	4770      	bx	lr
 800558e:	bf00      	nop
 8005590:	20000034 	.word	0x20000034

08005594 <__libc_init_array>:
 8005594:	b570      	push	{r4, r5, r6, lr}
 8005596:	4d0d      	ldr	r5, [pc, #52]	@ (80055cc <__libc_init_array+0x38>)
 8005598:	4c0d      	ldr	r4, [pc, #52]	@ (80055d0 <__libc_init_array+0x3c>)
 800559a:	1b64      	subs	r4, r4, r5
 800559c:	10a4      	asrs	r4, r4, #2
 800559e:	2600      	movs	r6, #0
 80055a0:	42a6      	cmp	r6, r4
 80055a2:	d109      	bne.n	80055b8 <__libc_init_array+0x24>
 80055a4:	4d0b      	ldr	r5, [pc, #44]	@ (80055d4 <__libc_init_array+0x40>)
 80055a6:	4c0c      	ldr	r4, [pc, #48]	@ (80055d8 <__libc_init_array+0x44>)
 80055a8:	f000 fe38 	bl	800621c <_init>
 80055ac:	1b64      	subs	r4, r4, r5
 80055ae:	10a4      	asrs	r4, r4, #2
 80055b0:	2600      	movs	r6, #0
 80055b2:	42a6      	cmp	r6, r4
 80055b4:	d105      	bne.n	80055c2 <__libc_init_array+0x2e>
 80055b6:	bd70      	pop	{r4, r5, r6, pc}
 80055b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80055bc:	4798      	blx	r3
 80055be:	3601      	adds	r6, #1
 80055c0:	e7ee      	b.n	80055a0 <__libc_init_array+0xc>
 80055c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80055c6:	4798      	blx	r3
 80055c8:	3601      	adds	r6, #1
 80055ca:	e7f2      	b.n	80055b2 <__libc_init_array+0x1e>
 80055cc:	0806336c 	.word	0x0806336c
 80055d0:	0806336c 	.word	0x0806336c
 80055d4:	0806336c 	.word	0x0806336c
 80055d8:	08063370 	.word	0x08063370

080055dc <__retarget_lock_init_recursive>:
 80055dc:	4770      	bx	lr

080055de <__retarget_lock_acquire_recursive>:
 80055de:	4770      	bx	lr

080055e0 <__retarget_lock_release_recursive>:
 80055e0:	4770      	bx	lr
	...

080055e4 <__assert_func>:
 80055e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80055e6:	4614      	mov	r4, r2
 80055e8:	461a      	mov	r2, r3
 80055ea:	4b09      	ldr	r3, [pc, #36]	@ (8005610 <__assert_func+0x2c>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4605      	mov	r5, r0
 80055f0:	68d8      	ldr	r0, [r3, #12]
 80055f2:	b14c      	cbz	r4, 8005608 <__assert_func+0x24>
 80055f4:	4b07      	ldr	r3, [pc, #28]	@ (8005614 <__assert_func+0x30>)
 80055f6:	9100      	str	r1, [sp, #0]
 80055f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80055fc:	4906      	ldr	r1, [pc, #24]	@ (8005618 <__assert_func+0x34>)
 80055fe:	462b      	mov	r3, r5
 8005600:	f000 f9ba 	bl	8005978 <fiprintf>
 8005604:	f000 f9da 	bl	80059bc <abort>
 8005608:	4b04      	ldr	r3, [pc, #16]	@ (800561c <__assert_func+0x38>)
 800560a:	461c      	mov	r4, r3
 800560c:	e7f3      	b.n	80055f6 <__assert_func+0x12>
 800560e:	bf00      	nop
 8005610:	20000034 	.word	0x20000034
 8005614:	080632f3 	.word	0x080632f3
 8005618:	08063300 	.word	0x08063300
 800561c:	0806332e 	.word	0x0806332e

08005620 <_free_r>:
 8005620:	b538      	push	{r3, r4, r5, lr}
 8005622:	4605      	mov	r5, r0
 8005624:	2900      	cmp	r1, #0
 8005626:	d041      	beq.n	80056ac <_free_r+0x8c>
 8005628:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800562c:	1f0c      	subs	r4, r1, #4
 800562e:	2b00      	cmp	r3, #0
 8005630:	bfb8      	it	lt
 8005632:	18e4      	addlt	r4, r4, r3
 8005634:	f000 f8e8 	bl	8005808 <__malloc_lock>
 8005638:	4a1d      	ldr	r2, [pc, #116]	@ (80056b0 <_free_r+0x90>)
 800563a:	6813      	ldr	r3, [r2, #0]
 800563c:	b933      	cbnz	r3, 800564c <_free_r+0x2c>
 800563e:	6063      	str	r3, [r4, #4]
 8005640:	6014      	str	r4, [r2, #0]
 8005642:	4628      	mov	r0, r5
 8005644:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005648:	f000 b8e4 	b.w	8005814 <__malloc_unlock>
 800564c:	42a3      	cmp	r3, r4
 800564e:	d908      	bls.n	8005662 <_free_r+0x42>
 8005650:	6820      	ldr	r0, [r4, #0]
 8005652:	1821      	adds	r1, r4, r0
 8005654:	428b      	cmp	r3, r1
 8005656:	bf01      	itttt	eq
 8005658:	6819      	ldreq	r1, [r3, #0]
 800565a:	685b      	ldreq	r3, [r3, #4]
 800565c:	1809      	addeq	r1, r1, r0
 800565e:	6021      	streq	r1, [r4, #0]
 8005660:	e7ed      	b.n	800563e <_free_r+0x1e>
 8005662:	461a      	mov	r2, r3
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	b10b      	cbz	r3, 800566c <_free_r+0x4c>
 8005668:	42a3      	cmp	r3, r4
 800566a:	d9fa      	bls.n	8005662 <_free_r+0x42>
 800566c:	6811      	ldr	r1, [r2, #0]
 800566e:	1850      	adds	r0, r2, r1
 8005670:	42a0      	cmp	r0, r4
 8005672:	d10b      	bne.n	800568c <_free_r+0x6c>
 8005674:	6820      	ldr	r0, [r4, #0]
 8005676:	4401      	add	r1, r0
 8005678:	1850      	adds	r0, r2, r1
 800567a:	4283      	cmp	r3, r0
 800567c:	6011      	str	r1, [r2, #0]
 800567e:	d1e0      	bne.n	8005642 <_free_r+0x22>
 8005680:	6818      	ldr	r0, [r3, #0]
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	6053      	str	r3, [r2, #4]
 8005686:	4408      	add	r0, r1
 8005688:	6010      	str	r0, [r2, #0]
 800568a:	e7da      	b.n	8005642 <_free_r+0x22>
 800568c:	d902      	bls.n	8005694 <_free_r+0x74>
 800568e:	230c      	movs	r3, #12
 8005690:	602b      	str	r3, [r5, #0]
 8005692:	e7d6      	b.n	8005642 <_free_r+0x22>
 8005694:	6820      	ldr	r0, [r4, #0]
 8005696:	1821      	adds	r1, r4, r0
 8005698:	428b      	cmp	r3, r1
 800569a:	bf04      	itt	eq
 800569c:	6819      	ldreq	r1, [r3, #0]
 800569e:	685b      	ldreq	r3, [r3, #4]
 80056a0:	6063      	str	r3, [r4, #4]
 80056a2:	bf04      	itt	eq
 80056a4:	1809      	addeq	r1, r1, r0
 80056a6:	6021      	streq	r1, [r4, #0]
 80056a8:	6054      	str	r4, [r2, #4]
 80056aa:	e7ca      	b.n	8005642 <_free_r+0x22>
 80056ac:	bd38      	pop	{r3, r4, r5, pc}
 80056ae:	bf00      	nop
 80056b0:	20000648 	.word	0x20000648

080056b4 <malloc>:
 80056b4:	4b02      	ldr	r3, [pc, #8]	@ (80056c0 <malloc+0xc>)
 80056b6:	4601      	mov	r1, r0
 80056b8:	6818      	ldr	r0, [r3, #0]
 80056ba:	f000 b825 	b.w	8005708 <_malloc_r>
 80056be:	bf00      	nop
 80056c0:	20000034 	.word	0x20000034

080056c4 <sbrk_aligned>:
 80056c4:	b570      	push	{r4, r5, r6, lr}
 80056c6:	4e0f      	ldr	r6, [pc, #60]	@ (8005704 <sbrk_aligned+0x40>)
 80056c8:	460c      	mov	r4, r1
 80056ca:	6831      	ldr	r1, [r6, #0]
 80056cc:	4605      	mov	r5, r0
 80056ce:	b911      	cbnz	r1, 80056d6 <sbrk_aligned+0x12>
 80056d0:	f000 f964 	bl	800599c <_sbrk_r>
 80056d4:	6030      	str	r0, [r6, #0]
 80056d6:	4621      	mov	r1, r4
 80056d8:	4628      	mov	r0, r5
 80056da:	f000 f95f 	bl	800599c <_sbrk_r>
 80056de:	1c43      	adds	r3, r0, #1
 80056e0:	d103      	bne.n	80056ea <sbrk_aligned+0x26>
 80056e2:	f04f 34ff 	mov.w	r4, #4294967295
 80056e6:	4620      	mov	r0, r4
 80056e8:	bd70      	pop	{r4, r5, r6, pc}
 80056ea:	1cc4      	adds	r4, r0, #3
 80056ec:	f024 0403 	bic.w	r4, r4, #3
 80056f0:	42a0      	cmp	r0, r4
 80056f2:	d0f8      	beq.n	80056e6 <sbrk_aligned+0x22>
 80056f4:	1a21      	subs	r1, r4, r0
 80056f6:	4628      	mov	r0, r5
 80056f8:	f000 f950 	bl	800599c <_sbrk_r>
 80056fc:	3001      	adds	r0, #1
 80056fe:	d1f2      	bne.n	80056e6 <sbrk_aligned+0x22>
 8005700:	e7ef      	b.n	80056e2 <sbrk_aligned+0x1e>
 8005702:	bf00      	nop
 8005704:	20000644 	.word	0x20000644

08005708 <_malloc_r>:
 8005708:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800570c:	1ccd      	adds	r5, r1, #3
 800570e:	f025 0503 	bic.w	r5, r5, #3
 8005712:	3508      	adds	r5, #8
 8005714:	2d0c      	cmp	r5, #12
 8005716:	bf38      	it	cc
 8005718:	250c      	movcc	r5, #12
 800571a:	2d00      	cmp	r5, #0
 800571c:	4606      	mov	r6, r0
 800571e:	db01      	blt.n	8005724 <_malloc_r+0x1c>
 8005720:	42a9      	cmp	r1, r5
 8005722:	d904      	bls.n	800572e <_malloc_r+0x26>
 8005724:	230c      	movs	r3, #12
 8005726:	6033      	str	r3, [r6, #0]
 8005728:	2000      	movs	r0, #0
 800572a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800572e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005804 <_malloc_r+0xfc>
 8005732:	f000 f869 	bl	8005808 <__malloc_lock>
 8005736:	f8d8 3000 	ldr.w	r3, [r8]
 800573a:	461c      	mov	r4, r3
 800573c:	bb44      	cbnz	r4, 8005790 <_malloc_r+0x88>
 800573e:	4629      	mov	r1, r5
 8005740:	4630      	mov	r0, r6
 8005742:	f7ff ffbf 	bl	80056c4 <sbrk_aligned>
 8005746:	1c43      	adds	r3, r0, #1
 8005748:	4604      	mov	r4, r0
 800574a:	d158      	bne.n	80057fe <_malloc_r+0xf6>
 800574c:	f8d8 4000 	ldr.w	r4, [r8]
 8005750:	4627      	mov	r7, r4
 8005752:	2f00      	cmp	r7, #0
 8005754:	d143      	bne.n	80057de <_malloc_r+0xd6>
 8005756:	2c00      	cmp	r4, #0
 8005758:	d04b      	beq.n	80057f2 <_malloc_r+0xea>
 800575a:	6823      	ldr	r3, [r4, #0]
 800575c:	4639      	mov	r1, r7
 800575e:	4630      	mov	r0, r6
 8005760:	eb04 0903 	add.w	r9, r4, r3
 8005764:	f000 f91a 	bl	800599c <_sbrk_r>
 8005768:	4581      	cmp	r9, r0
 800576a:	d142      	bne.n	80057f2 <_malloc_r+0xea>
 800576c:	6821      	ldr	r1, [r4, #0]
 800576e:	1a6d      	subs	r5, r5, r1
 8005770:	4629      	mov	r1, r5
 8005772:	4630      	mov	r0, r6
 8005774:	f7ff ffa6 	bl	80056c4 <sbrk_aligned>
 8005778:	3001      	adds	r0, #1
 800577a:	d03a      	beq.n	80057f2 <_malloc_r+0xea>
 800577c:	6823      	ldr	r3, [r4, #0]
 800577e:	442b      	add	r3, r5
 8005780:	6023      	str	r3, [r4, #0]
 8005782:	f8d8 3000 	ldr.w	r3, [r8]
 8005786:	685a      	ldr	r2, [r3, #4]
 8005788:	bb62      	cbnz	r2, 80057e4 <_malloc_r+0xdc>
 800578a:	f8c8 7000 	str.w	r7, [r8]
 800578e:	e00f      	b.n	80057b0 <_malloc_r+0xa8>
 8005790:	6822      	ldr	r2, [r4, #0]
 8005792:	1b52      	subs	r2, r2, r5
 8005794:	d420      	bmi.n	80057d8 <_malloc_r+0xd0>
 8005796:	2a0b      	cmp	r2, #11
 8005798:	d917      	bls.n	80057ca <_malloc_r+0xc2>
 800579a:	1961      	adds	r1, r4, r5
 800579c:	42a3      	cmp	r3, r4
 800579e:	6025      	str	r5, [r4, #0]
 80057a0:	bf18      	it	ne
 80057a2:	6059      	strne	r1, [r3, #4]
 80057a4:	6863      	ldr	r3, [r4, #4]
 80057a6:	bf08      	it	eq
 80057a8:	f8c8 1000 	streq.w	r1, [r8]
 80057ac:	5162      	str	r2, [r4, r5]
 80057ae:	604b      	str	r3, [r1, #4]
 80057b0:	4630      	mov	r0, r6
 80057b2:	f000 f82f 	bl	8005814 <__malloc_unlock>
 80057b6:	f104 000b 	add.w	r0, r4, #11
 80057ba:	1d23      	adds	r3, r4, #4
 80057bc:	f020 0007 	bic.w	r0, r0, #7
 80057c0:	1ac2      	subs	r2, r0, r3
 80057c2:	bf1c      	itt	ne
 80057c4:	1a1b      	subne	r3, r3, r0
 80057c6:	50a3      	strne	r3, [r4, r2]
 80057c8:	e7af      	b.n	800572a <_malloc_r+0x22>
 80057ca:	6862      	ldr	r2, [r4, #4]
 80057cc:	42a3      	cmp	r3, r4
 80057ce:	bf0c      	ite	eq
 80057d0:	f8c8 2000 	streq.w	r2, [r8]
 80057d4:	605a      	strne	r2, [r3, #4]
 80057d6:	e7eb      	b.n	80057b0 <_malloc_r+0xa8>
 80057d8:	4623      	mov	r3, r4
 80057da:	6864      	ldr	r4, [r4, #4]
 80057dc:	e7ae      	b.n	800573c <_malloc_r+0x34>
 80057de:	463c      	mov	r4, r7
 80057e0:	687f      	ldr	r7, [r7, #4]
 80057e2:	e7b6      	b.n	8005752 <_malloc_r+0x4a>
 80057e4:	461a      	mov	r2, r3
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	42a3      	cmp	r3, r4
 80057ea:	d1fb      	bne.n	80057e4 <_malloc_r+0xdc>
 80057ec:	2300      	movs	r3, #0
 80057ee:	6053      	str	r3, [r2, #4]
 80057f0:	e7de      	b.n	80057b0 <_malloc_r+0xa8>
 80057f2:	230c      	movs	r3, #12
 80057f4:	6033      	str	r3, [r6, #0]
 80057f6:	4630      	mov	r0, r6
 80057f8:	f000 f80c 	bl	8005814 <__malloc_unlock>
 80057fc:	e794      	b.n	8005728 <_malloc_r+0x20>
 80057fe:	6005      	str	r5, [r0, #0]
 8005800:	e7d6      	b.n	80057b0 <_malloc_r+0xa8>
 8005802:	bf00      	nop
 8005804:	20000648 	.word	0x20000648

08005808 <__malloc_lock>:
 8005808:	4801      	ldr	r0, [pc, #4]	@ (8005810 <__malloc_lock+0x8>)
 800580a:	f7ff bee8 	b.w	80055de <__retarget_lock_acquire_recursive>
 800580e:	bf00      	nop
 8005810:	20000640 	.word	0x20000640

08005814 <__malloc_unlock>:
 8005814:	4801      	ldr	r0, [pc, #4]	@ (800581c <__malloc_unlock+0x8>)
 8005816:	f7ff bee3 	b.w	80055e0 <__retarget_lock_release_recursive>
 800581a:	bf00      	nop
 800581c:	20000640 	.word	0x20000640

08005820 <__sflush_r>:
 8005820:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005828:	0716      	lsls	r6, r2, #28
 800582a:	4605      	mov	r5, r0
 800582c:	460c      	mov	r4, r1
 800582e:	d454      	bmi.n	80058da <__sflush_r+0xba>
 8005830:	684b      	ldr	r3, [r1, #4]
 8005832:	2b00      	cmp	r3, #0
 8005834:	dc02      	bgt.n	800583c <__sflush_r+0x1c>
 8005836:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005838:	2b00      	cmp	r3, #0
 800583a:	dd48      	ble.n	80058ce <__sflush_r+0xae>
 800583c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800583e:	2e00      	cmp	r6, #0
 8005840:	d045      	beq.n	80058ce <__sflush_r+0xae>
 8005842:	2300      	movs	r3, #0
 8005844:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005848:	682f      	ldr	r7, [r5, #0]
 800584a:	6a21      	ldr	r1, [r4, #32]
 800584c:	602b      	str	r3, [r5, #0]
 800584e:	d030      	beq.n	80058b2 <__sflush_r+0x92>
 8005850:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005852:	89a3      	ldrh	r3, [r4, #12]
 8005854:	0759      	lsls	r1, r3, #29
 8005856:	d505      	bpl.n	8005864 <__sflush_r+0x44>
 8005858:	6863      	ldr	r3, [r4, #4]
 800585a:	1ad2      	subs	r2, r2, r3
 800585c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800585e:	b10b      	cbz	r3, 8005864 <__sflush_r+0x44>
 8005860:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005862:	1ad2      	subs	r2, r2, r3
 8005864:	2300      	movs	r3, #0
 8005866:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005868:	6a21      	ldr	r1, [r4, #32]
 800586a:	4628      	mov	r0, r5
 800586c:	47b0      	blx	r6
 800586e:	1c43      	adds	r3, r0, #1
 8005870:	89a3      	ldrh	r3, [r4, #12]
 8005872:	d106      	bne.n	8005882 <__sflush_r+0x62>
 8005874:	6829      	ldr	r1, [r5, #0]
 8005876:	291d      	cmp	r1, #29
 8005878:	d82b      	bhi.n	80058d2 <__sflush_r+0xb2>
 800587a:	4a2a      	ldr	r2, [pc, #168]	@ (8005924 <__sflush_r+0x104>)
 800587c:	40ca      	lsrs	r2, r1
 800587e:	07d6      	lsls	r6, r2, #31
 8005880:	d527      	bpl.n	80058d2 <__sflush_r+0xb2>
 8005882:	2200      	movs	r2, #0
 8005884:	6062      	str	r2, [r4, #4]
 8005886:	04d9      	lsls	r1, r3, #19
 8005888:	6922      	ldr	r2, [r4, #16]
 800588a:	6022      	str	r2, [r4, #0]
 800588c:	d504      	bpl.n	8005898 <__sflush_r+0x78>
 800588e:	1c42      	adds	r2, r0, #1
 8005890:	d101      	bne.n	8005896 <__sflush_r+0x76>
 8005892:	682b      	ldr	r3, [r5, #0]
 8005894:	b903      	cbnz	r3, 8005898 <__sflush_r+0x78>
 8005896:	6560      	str	r0, [r4, #84]	@ 0x54
 8005898:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800589a:	602f      	str	r7, [r5, #0]
 800589c:	b1b9      	cbz	r1, 80058ce <__sflush_r+0xae>
 800589e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80058a2:	4299      	cmp	r1, r3
 80058a4:	d002      	beq.n	80058ac <__sflush_r+0x8c>
 80058a6:	4628      	mov	r0, r5
 80058a8:	f7ff feba 	bl	8005620 <_free_r>
 80058ac:	2300      	movs	r3, #0
 80058ae:	6363      	str	r3, [r4, #52]	@ 0x34
 80058b0:	e00d      	b.n	80058ce <__sflush_r+0xae>
 80058b2:	2301      	movs	r3, #1
 80058b4:	4628      	mov	r0, r5
 80058b6:	47b0      	blx	r6
 80058b8:	4602      	mov	r2, r0
 80058ba:	1c50      	adds	r0, r2, #1
 80058bc:	d1c9      	bne.n	8005852 <__sflush_r+0x32>
 80058be:	682b      	ldr	r3, [r5, #0]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d0c6      	beq.n	8005852 <__sflush_r+0x32>
 80058c4:	2b1d      	cmp	r3, #29
 80058c6:	d001      	beq.n	80058cc <__sflush_r+0xac>
 80058c8:	2b16      	cmp	r3, #22
 80058ca:	d11e      	bne.n	800590a <__sflush_r+0xea>
 80058cc:	602f      	str	r7, [r5, #0]
 80058ce:	2000      	movs	r0, #0
 80058d0:	e022      	b.n	8005918 <__sflush_r+0xf8>
 80058d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80058d6:	b21b      	sxth	r3, r3
 80058d8:	e01b      	b.n	8005912 <__sflush_r+0xf2>
 80058da:	690f      	ldr	r7, [r1, #16]
 80058dc:	2f00      	cmp	r7, #0
 80058de:	d0f6      	beq.n	80058ce <__sflush_r+0xae>
 80058e0:	0793      	lsls	r3, r2, #30
 80058e2:	680e      	ldr	r6, [r1, #0]
 80058e4:	bf08      	it	eq
 80058e6:	694b      	ldreq	r3, [r1, #20]
 80058e8:	600f      	str	r7, [r1, #0]
 80058ea:	bf18      	it	ne
 80058ec:	2300      	movne	r3, #0
 80058ee:	eba6 0807 	sub.w	r8, r6, r7
 80058f2:	608b      	str	r3, [r1, #8]
 80058f4:	f1b8 0f00 	cmp.w	r8, #0
 80058f8:	dde9      	ble.n	80058ce <__sflush_r+0xae>
 80058fa:	6a21      	ldr	r1, [r4, #32]
 80058fc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80058fe:	4643      	mov	r3, r8
 8005900:	463a      	mov	r2, r7
 8005902:	4628      	mov	r0, r5
 8005904:	47b0      	blx	r6
 8005906:	2800      	cmp	r0, #0
 8005908:	dc08      	bgt.n	800591c <__sflush_r+0xfc>
 800590a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800590e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005912:	81a3      	strh	r3, [r4, #12]
 8005914:	f04f 30ff 	mov.w	r0, #4294967295
 8005918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800591c:	4407      	add	r7, r0
 800591e:	eba8 0800 	sub.w	r8, r8, r0
 8005922:	e7e7      	b.n	80058f4 <__sflush_r+0xd4>
 8005924:	20400001 	.word	0x20400001

08005928 <_fflush_r>:
 8005928:	b538      	push	{r3, r4, r5, lr}
 800592a:	690b      	ldr	r3, [r1, #16]
 800592c:	4605      	mov	r5, r0
 800592e:	460c      	mov	r4, r1
 8005930:	b913      	cbnz	r3, 8005938 <_fflush_r+0x10>
 8005932:	2500      	movs	r5, #0
 8005934:	4628      	mov	r0, r5
 8005936:	bd38      	pop	{r3, r4, r5, pc}
 8005938:	b118      	cbz	r0, 8005942 <_fflush_r+0x1a>
 800593a:	6a03      	ldr	r3, [r0, #32]
 800593c:	b90b      	cbnz	r3, 8005942 <_fflush_r+0x1a>
 800593e:	f7ff fd5b 	bl	80053f8 <__sinit>
 8005942:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d0f3      	beq.n	8005932 <_fflush_r+0xa>
 800594a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800594c:	07d0      	lsls	r0, r2, #31
 800594e:	d404      	bmi.n	800595a <_fflush_r+0x32>
 8005950:	0599      	lsls	r1, r3, #22
 8005952:	d402      	bmi.n	800595a <_fflush_r+0x32>
 8005954:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005956:	f7ff fe42 	bl	80055de <__retarget_lock_acquire_recursive>
 800595a:	4628      	mov	r0, r5
 800595c:	4621      	mov	r1, r4
 800595e:	f7ff ff5f 	bl	8005820 <__sflush_r>
 8005962:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005964:	07da      	lsls	r2, r3, #31
 8005966:	4605      	mov	r5, r0
 8005968:	d4e4      	bmi.n	8005934 <_fflush_r+0xc>
 800596a:	89a3      	ldrh	r3, [r4, #12]
 800596c:	059b      	lsls	r3, r3, #22
 800596e:	d4e1      	bmi.n	8005934 <_fflush_r+0xc>
 8005970:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005972:	f7ff fe35 	bl	80055e0 <__retarget_lock_release_recursive>
 8005976:	e7dd      	b.n	8005934 <_fflush_r+0xc>

08005978 <fiprintf>:
 8005978:	b40e      	push	{r1, r2, r3}
 800597a:	b503      	push	{r0, r1, lr}
 800597c:	4601      	mov	r1, r0
 800597e:	ab03      	add	r3, sp, #12
 8005980:	4805      	ldr	r0, [pc, #20]	@ (8005998 <fiprintf+0x20>)
 8005982:	f853 2b04 	ldr.w	r2, [r3], #4
 8005986:	6800      	ldr	r0, [r0, #0]
 8005988:	9301      	str	r3, [sp, #4]
 800598a:	f000 f847 	bl	8005a1c <_vfiprintf_r>
 800598e:	b002      	add	sp, #8
 8005990:	f85d eb04 	ldr.w	lr, [sp], #4
 8005994:	b003      	add	sp, #12
 8005996:	4770      	bx	lr
 8005998:	20000034 	.word	0x20000034

0800599c <_sbrk_r>:
 800599c:	b538      	push	{r3, r4, r5, lr}
 800599e:	4d06      	ldr	r5, [pc, #24]	@ (80059b8 <_sbrk_r+0x1c>)
 80059a0:	2300      	movs	r3, #0
 80059a2:	4604      	mov	r4, r0
 80059a4:	4608      	mov	r0, r1
 80059a6:	602b      	str	r3, [r5, #0]
 80059a8:	f7fb fc7a 	bl	80012a0 <_sbrk>
 80059ac:	1c43      	adds	r3, r0, #1
 80059ae:	d102      	bne.n	80059b6 <_sbrk_r+0x1a>
 80059b0:	682b      	ldr	r3, [r5, #0]
 80059b2:	b103      	cbz	r3, 80059b6 <_sbrk_r+0x1a>
 80059b4:	6023      	str	r3, [r4, #0]
 80059b6:	bd38      	pop	{r3, r4, r5, pc}
 80059b8:	2000063c 	.word	0x2000063c

080059bc <abort>:
 80059bc:	b508      	push	{r3, lr}
 80059be:	2006      	movs	r0, #6
 80059c0:	f000 fb8c 	bl	80060dc <raise>
 80059c4:	2001      	movs	r0, #1
 80059c6:	f7fb fbf2 	bl	80011ae <_exit>

080059ca <__sfputc_r>:
 80059ca:	6893      	ldr	r3, [r2, #8]
 80059cc:	3b01      	subs	r3, #1
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	b410      	push	{r4}
 80059d2:	6093      	str	r3, [r2, #8]
 80059d4:	da08      	bge.n	80059e8 <__sfputc_r+0x1e>
 80059d6:	6994      	ldr	r4, [r2, #24]
 80059d8:	42a3      	cmp	r3, r4
 80059da:	db01      	blt.n	80059e0 <__sfputc_r+0x16>
 80059dc:	290a      	cmp	r1, #10
 80059de:	d103      	bne.n	80059e8 <__sfputc_r+0x1e>
 80059e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80059e4:	f000 babe 	b.w	8005f64 <__swbuf_r>
 80059e8:	6813      	ldr	r3, [r2, #0]
 80059ea:	1c58      	adds	r0, r3, #1
 80059ec:	6010      	str	r0, [r2, #0]
 80059ee:	7019      	strb	r1, [r3, #0]
 80059f0:	4608      	mov	r0, r1
 80059f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80059f6:	4770      	bx	lr

080059f8 <__sfputs_r>:
 80059f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059fa:	4606      	mov	r6, r0
 80059fc:	460f      	mov	r7, r1
 80059fe:	4614      	mov	r4, r2
 8005a00:	18d5      	adds	r5, r2, r3
 8005a02:	42ac      	cmp	r4, r5
 8005a04:	d101      	bne.n	8005a0a <__sfputs_r+0x12>
 8005a06:	2000      	movs	r0, #0
 8005a08:	e007      	b.n	8005a1a <__sfputs_r+0x22>
 8005a0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a0e:	463a      	mov	r2, r7
 8005a10:	4630      	mov	r0, r6
 8005a12:	f7ff ffda 	bl	80059ca <__sfputc_r>
 8005a16:	1c43      	adds	r3, r0, #1
 8005a18:	d1f3      	bne.n	8005a02 <__sfputs_r+0xa>
 8005a1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005a1c <_vfiprintf_r>:
 8005a1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a20:	460d      	mov	r5, r1
 8005a22:	b09d      	sub	sp, #116	@ 0x74
 8005a24:	4614      	mov	r4, r2
 8005a26:	4698      	mov	r8, r3
 8005a28:	4606      	mov	r6, r0
 8005a2a:	b118      	cbz	r0, 8005a34 <_vfiprintf_r+0x18>
 8005a2c:	6a03      	ldr	r3, [r0, #32]
 8005a2e:	b90b      	cbnz	r3, 8005a34 <_vfiprintf_r+0x18>
 8005a30:	f7ff fce2 	bl	80053f8 <__sinit>
 8005a34:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005a36:	07d9      	lsls	r1, r3, #31
 8005a38:	d405      	bmi.n	8005a46 <_vfiprintf_r+0x2a>
 8005a3a:	89ab      	ldrh	r3, [r5, #12]
 8005a3c:	059a      	lsls	r2, r3, #22
 8005a3e:	d402      	bmi.n	8005a46 <_vfiprintf_r+0x2a>
 8005a40:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005a42:	f7ff fdcc 	bl	80055de <__retarget_lock_acquire_recursive>
 8005a46:	89ab      	ldrh	r3, [r5, #12]
 8005a48:	071b      	lsls	r3, r3, #28
 8005a4a:	d501      	bpl.n	8005a50 <_vfiprintf_r+0x34>
 8005a4c:	692b      	ldr	r3, [r5, #16]
 8005a4e:	b99b      	cbnz	r3, 8005a78 <_vfiprintf_r+0x5c>
 8005a50:	4629      	mov	r1, r5
 8005a52:	4630      	mov	r0, r6
 8005a54:	f000 fac4 	bl	8005fe0 <__swsetup_r>
 8005a58:	b170      	cbz	r0, 8005a78 <_vfiprintf_r+0x5c>
 8005a5a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005a5c:	07dc      	lsls	r4, r3, #31
 8005a5e:	d504      	bpl.n	8005a6a <_vfiprintf_r+0x4e>
 8005a60:	f04f 30ff 	mov.w	r0, #4294967295
 8005a64:	b01d      	add	sp, #116	@ 0x74
 8005a66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a6a:	89ab      	ldrh	r3, [r5, #12]
 8005a6c:	0598      	lsls	r0, r3, #22
 8005a6e:	d4f7      	bmi.n	8005a60 <_vfiprintf_r+0x44>
 8005a70:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005a72:	f7ff fdb5 	bl	80055e0 <__retarget_lock_release_recursive>
 8005a76:	e7f3      	b.n	8005a60 <_vfiprintf_r+0x44>
 8005a78:	2300      	movs	r3, #0
 8005a7a:	9309      	str	r3, [sp, #36]	@ 0x24
 8005a7c:	2320      	movs	r3, #32
 8005a7e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005a82:	f8cd 800c 	str.w	r8, [sp, #12]
 8005a86:	2330      	movs	r3, #48	@ 0x30
 8005a88:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005c38 <_vfiprintf_r+0x21c>
 8005a8c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005a90:	f04f 0901 	mov.w	r9, #1
 8005a94:	4623      	mov	r3, r4
 8005a96:	469a      	mov	sl, r3
 8005a98:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005a9c:	b10a      	cbz	r2, 8005aa2 <_vfiprintf_r+0x86>
 8005a9e:	2a25      	cmp	r2, #37	@ 0x25
 8005aa0:	d1f9      	bne.n	8005a96 <_vfiprintf_r+0x7a>
 8005aa2:	ebba 0b04 	subs.w	fp, sl, r4
 8005aa6:	d00b      	beq.n	8005ac0 <_vfiprintf_r+0xa4>
 8005aa8:	465b      	mov	r3, fp
 8005aaa:	4622      	mov	r2, r4
 8005aac:	4629      	mov	r1, r5
 8005aae:	4630      	mov	r0, r6
 8005ab0:	f7ff ffa2 	bl	80059f8 <__sfputs_r>
 8005ab4:	3001      	adds	r0, #1
 8005ab6:	f000 80a7 	beq.w	8005c08 <_vfiprintf_r+0x1ec>
 8005aba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005abc:	445a      	add	r2, fp
 8005abe:	9209      	str	r2, [sp, #36]	@ 0x24
 8005ac0:	f89a 3000 	ldrb.w	r3, [sl]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	f000 809f 	beq.w	8005c08 <_vfiprintf_r+0x1ec>
 8005aca:	2300      	movs	r3, #0
 8005acc:	f04f 32ff 	mov.w	r2, #4294967295
 8005ad0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005ad4:	f10a 0a01 	add.w	sl, sl, #1
 8005ad8:	9304      	str	r3, [sp, #16]
 8005ada:	9307      	str	r3, [sp, #28]
 8005adc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005ae0:	931a      	str	r3, [sp, #104]	@ 0x68
 8005ae2:	4654      	mov	r4, sl
 8005ae4:	2205      	movs	r2, #5
 8005ae6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005aea:	4853      	ldr	r0, [pc, #332]	@ (8005c38 <_vfiprintf_r+0x21c>)
 8005aec:	f7fa fb78 	bl	80001e0 <memchr>
 8005af0:	9a04      	ldr	r2, [sp, #16]
 8005af2:	b9d8      	cbnz	r0, 8005b2c <_vfiprintf_r+0x110>
 8005af4:	06d1      	lsls	r1, r2, #27
 8005af6:	bf44      	itt	mi
 8005af8:	2320      	movmi	r3, #32
 8005afa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005afe:	0713      	lsls	r3, r2, #28
 8005b00:	bf44      	itt	mi
 8005b02:	232b      	movmi	r3, #43	@ 0x2b
 8005b04:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005b08:	f89a 3000 	ldrb.w	r3, [sl]
 8005b0c:	2b2a      	cmp	r3, #42	@ 0x2a
 8005b0e:	d015      	beq.n	8005b3c <_vfiprintf_r+0x120>
 8005b10:	9a07      	ldr	r2, [sp, #28]
 8005b12:	4654      	mov	r4, sl
 8005b14:	2000      	movs	r0, #0
 8005b16:	f04f 0c0a 	mov.w	ip, #10
 8005b1a:	4621      	mov	r1, r4
 8005b1c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005b20:	3b30      	subs	r3, #48	@ 0x30
 8005b22:	2b09      	cmp	r3, #9
 8005b24:	d94b      	bls.n	8005bbe <_vfiprintf_r+0x1a2>
 8005b26:	b1b0      	cbz	r0, 8005b56 <_vfiprintf_r+0x13a>
 8005b28:	9207      	str	r2, [sp, #28]
 8005b2a:	e014      	b.n	8005b56 <_vfiprintf_r+0x13a>
 8005b2c:	eba0 0308 	sub.w	r3, r0, r8
 8005b30:	fa09 f303 	lsl.w	r3, r9, r3
 8005b34:	4313      	orrs	r3, r2
 8005b36:	9304      	str	r3, [sp, #16]
 8005b38:	46a2      	mov	sl, r4
 8005b3a:	e7d2      	b.n	8005ae2 <_vfiprintf_r+0xc6>
 8005b3c:	9b03      	ldr	r3, [sp, #12]
 8005b3e:	1d19      	adds	r1, r3, #4
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	9103      	str	r1, [sp, #12]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	bfbb      	ittet	lt
 8005b48:	425b      	neglt	r3, r3
 8005b4a:	f042 0202 	orrlt.w	r2, r2, #2
 8005b4e:	9307      	strge	r3, [sp, #28]
 8005b50:	9307      	strlt	r3, [sp, #28]
 8005b52:	bfb8      	it	lt
 8005b54:	9204      	strlt	r2, [sp, #16]
 8005b56:	7823      	ldrb	r3, [r4, #0]
 8005b58:	2b2e      	cmp	r3, #46	@ 0x2e
 8005b5a:	d10a      	bne.n	8005b72 <_vfiprintf_r+0x156>
 8005b5c:	7863      	ldrb	r3, [r4, #1]
 8005b5e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005b60:	d132      	bne.n	8005bc8 <_vfiprintf_r+0x1ac>
 8005b62:	9b03      	ldr	r3, [sp, #12]
 8005b64:	1d1a      	adds	r2, r3, #4
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	9203      	str	r2, [sp, #12]
 8005b6a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005b6e:	3402      	adds	r4, #2
 8005b70:	9305      	str	r3, [sp, #20]
 8005b72:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005c48 <_vfiprintf_r+0x22c>
 8005b76:	7821      	ldrb	r1, [r4, #0]
 8005b78:	2203      	movs	r2, #3
 8005b7a:	4650      	mov	r0, sl
 8005b7c:	f7fa fb30 	bl	80001e0 <memchr>
 8005b80:	b138      	cbz	r0, 8005b92 <_vfiprintf_r+0x176>
 8005b82:	9b04      	ldr	r3, [sp, #16]
 8005b84:	eba0 000a 	sub.w	r0, r0, sl
 8005b88:	2240      	movs	r2, #64	@ 0x40
 8005b8a:	4082      	lsls	r2, r0
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	3401      	adds	r4, #1
 8005b90:	9304      	str	r3, [sp, #16]
 8005b92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b96:	4829      	ldr	r0, [pc, #164]	@ (8005c3c <_vfiprintf_r+0x220>)
 8005b98:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005b9c:	2206      	movs	r2, #6
 8005b9e:	f7fa fb1f 	bl	80001e0 <memchr>
 8005ba2:	2800      	cmp	r0, #0
 8005ba4:	d03f      	beq.n	8005c26 <_vfiprintf_r+0x20a>
 8005ba6:	4b26      	ldr	r3, [pc, #152]	@ (8005c40 <_vfiprintf_r+0x224>)
 8005ba8:	bb1b      	cbnz	r3, 8005bf2 <_vfiprintf_r+0x1d6>
 8005baa:	9b03      	ldr	r3, [sp, #12]
 8005bac:	3307      	adds	r3, #7
 8005bae:	f023 0307 	bic.w	r3, r3, #7
 8005bb2:	3308      	adds	r3, #8
 8005bb4:	9303      	str	r3, [sp, #12]
 8005bb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005bb8:	443b      	add	r3, r7
 8005bba:	9309      	str	r3, [sp, #36]	@ 0x24
 8005bbc:	e76a      	b.n	8005a94 <_vfiprintf_r+0x78>
 8005bbe:	fb0c 3202 	mla	r2, ip, r2, r3
 8005bc2:	460c      	mov	r4, r1
 8005bc4:	2001      	movs	r0, #1
 8005bc6:	e7a8      	b.n	8005b1a <_vfiprintf_r+0xfe>
 8005bc8:	2300      	movs	r3, #0
 8005bca:	3401      	adds	r4, #1
 8005bcc:	9305      	str	r3, [sp, #20]
 8005bce:	4619      	mov	r1, r3
 8005bd0:	f04f 0c0a 	mov.w	ip, #10
 8005bd4:	4620      	mov	r0, r4
 8005bd6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005bda:	3a30      	subs	r2, #48	@ 0x30
 8005bdc:	2a09      	cmp	r2, #9
 8005bde:	d903      	bls.n	8005be8 <_vfiprintf_r+0x1cc>
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d0c6      	beq.n	8005b72 <_vfiprintf_r+0x156>
 8005be4:	9105      	str	r1, [sp, #20]
 8005be6:	e7c4      	b.n	8005b72 <_vfiprintf_r+0x156>
 8005be8:	fb0c 2101 	mla	r1, ip, r1, r2
 8005bec:	4604      	mov	r4, r0
 8005bee:	2301      	movs	r3, #1
 8005bf0:	e7f0      	b.n	8005bd4 <_vfiprintf_r+0x1b8>
 8005bf2:	ab03      	add	r3, sp, #12
 8005bf4:	9300      	str	r3, [sp, #0]
 8005bf6:	462a      	mov	r2, r5
 8005bf8:	4b12      	ldr	r3, [pc, #72]	@ (8005c44 <_vfiprintf_r+0x228>)
 8005bfa:	a904      	add	r1, sp, #16
 8005bfc:	4630      	mov	r0, r6
 8005bfe:	f3af 8000 	nop.w
 8005c02:	4607      	mov	r7, r0
 8005c04:	1c78      	adds	r0, r7, #1
 8005c06:	d1d6      	bne.n	8005bb6 <_vfiprintf_r+0x19a>
 8005c08:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005c0a:	07d9      	lsls	r1, r3, #31
 8005c0c:	d405      	bmi.n	8005c1a <_vfiprintf_r+0x1fe>
 8005c0e:	89ab      	ldrh	r3, [r5, #12]
 8005c10:	059a      	lsls	r2, r3, #22
 8005c12:	d402      	bmi.n	8005c1a <_vfiprintf_r+0x1fe>
 8005c14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005c16:	f7ff fce3 	bl	80055e0 <__retarget_lock_release_recursive>
 8005c1a:	89ab      	ldrh	r3, [r5, #12]
 8005c1c:	065b      	lsls	r3, r3, #25
 8005c1e:	f53f af1f 	bmi.w	8005a60 <_vfiprintf_r+0x44>
 8005c22:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005c24:	e71e      	b.n	8005a64 <_vfiprintf_r+0x48>
 8005c26:	ab03      	add	r3, sp, #12
 8005c28:	9300      	str	r3, [sp, #0]
 8005c2a:	462a      	mov	r2, r5
 8005c2c:	4b05      	ldr	r3, [pc, #20]	@ (8005c44 <_vfiprintf_r+0x228>)
 8005c2e:	a904      	add	r1, sp, #16
 8005c30:	4630      	mov	r0, r6
 8005c32:	f000 f879 	bl	8005d28 <_printf_i>
 8005c36:	e7e4      	b.n	8005c02 <_vfiprintf_r+0x1e6>
 8005c38:	0806332f 	.word	0x0806332f
 8005c3c:	08063339 	.word	0x08063339
 8005c40:	00000000 	.word	0x00000000
 8005c44:	080059f9 	.word	0x080059f9
 8005c48:	08063335 	.word	0x08063335

08005c4c <_printf_common>:
 8005c4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c50:	4616      	mov	r6, r2
 8005c52:	4698      	mov	r8, r3
 8005c54:	688a      	ldr	r2, [r1, #8]
 8005c56:	690b      	ldr	r3, [r1, #16]
 8005c58:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	bfb8      	it	lt
 8005c60:	4613      	movlt	r3, r2
 8005c62:	6033      	str	r3, [r6, #0]
 8005c64:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005c68:	4607      	mov	r7, r0
 8005c6a:	460c      	mov	r4, r1
 8005c6c:	b10a      	cbz	r2, 8005c72 <_printf_common+0x26>
 8005c6e:	3301      	adds	r3, #1
 8005c70:	6033      	str	r3, [r6, #0]
 8005c72:	6823      	ldr	r3, [r4, #0]
 8005c74:	0699      	lsls	r1, r3, #26
 8005c76:	bf42      	ittt	mi
 8005c78:	6833      	ldrmi	r3, [r6, #0]
 8005c7a:	3302      	addmi	r3, #2
 8005c7c:	6033      	strmi	r3, [r6, #0]
 8005c7e:	6825      	ldr	r5, [r4, #0]
 8005c80:	f015 0506 	ands.w	r5, r5, #6
 8005c84:	d106      	bne.n	8005c94 <_printf_common+0x48>
 8005c86:	f104 0a19 	add.w	sl, r4, #25
 8005c8a:	68e3      	ldr	r3, [r4, #12]
 8005c8c:	6832      	ldr	r2, [r6, #0]
 8005c8e:	1a9b      	subs	r3, r3, r2
 8005c90:	42ab      	cmp	r3, r5
 8005c92:	dc26      	bgt.n	8005ce2 <_printf_common+0x96>
 8005c94:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005c98:	6822      	ldr	r2, [r4, #0]
 8005c9a:	3b00      	subs	r3, #0
 8005c9c:	bf18      	it	ne
 8005c9e:	2301      	movne	r3, #1
 8005ca0:	0692      	lsls	r2, r2, #26
 8005ca2:	d42b      	bmi.n	8005cfc <_printf_common+0xb0>
 8005ca4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005ca8:	4641      	mov	r1, r8
 8005caa:	4638      	mov	r0, r7
 8005cac:	47c8      	blx	r9
 8005cae:	3001      	adds	r0, #1
 8005cb0:	d01e      	beq.n	8005cf0 <_printf_common+0xa4>
 8005cb2:	6823      	ldr	r3, [r4, #0]
 8005cb4:	6922      	ldr	r2, [r4, #16]
 8005cb6:	f003 0306 	and.w	r3, r3, #6
 8005cba:	2b04      	cmp	r3, #4
 8005cbc:	bf02      	ittt	eq
 8005cbe:	68e5      	ldreq	r5, [r4, #12]
 8005cc0:	6833      	ldreq	r3, [r6, #0]
 8005cc2:	1aed      	subeq	r5, r5, r3
 8005cc4:	68a3      	ldr	r3, [r4, #8]
 8005cc6:	bf0c      	ite	eq
 8005cc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ccc:	2500      	movne	r5, #0
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	bfc4      	itt	gt
 8005cd2:	1a9b      	subgt	r3, r3, r2
 8005cd4:	18ed      	addgt	r5, r5, r3
 8005cd6:	2600      	movs	r6, #0
 8005cd8:	341a      	adds	r4, #26
 8005cda:	42b5      	cmp	r5, r6
 8005cdc:	d11a      	bne.n	8005d14 <_printf_common+0xc8>
 8005cde:	2000      	movs	r0, #0
 8005ce0:	e008      	b.n	8005cf4 <_printf_common+0xa8>
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	4652      	mov	r2, sl
 8005ce6:	4641      	mov	r1, r8
 8005ce8:	4638      	mov	r0, r7
 8005cea:	47c8      	blx	r9
 8005cec:	3001      	adds	r0, #1
 8005cee:	d103      	bne.n	8005cf8 <_printf_common+0xac>
 8005cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8005cf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cf8:	3501      	adds	r5, #1
 8005cfa:	e7c6      	b.n	8005c8a <_printf_common+0x3e>
 8005cfc:	18e1      	adds	r1, r4, r3
 8005cfe:	1c5a      	adds	r2, r3, #1
 8005d00:	2030      	movs	r0, #48	@ 0x30
 8005d02:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005d06:	4422      	add	r2, r4
 8005d08:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005d0c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005d10:	3302      	adds	r3, #2
 8005d12:	e7c7      	b.n	8005ca4 <_printf_common+0x58>
 8005d14:	2301      	movs	r3, #1
 8005d16:	4622      	mov	r2, r4
 8005d18:	4641      	mov	r1, r8
 8005d1a:	4638      	mov	r0, r7
 8005d1c:	47c8      	blx	r9
 8005d1e:	3001      	adds	r0, #1
 8005d20:	d0e6      	beq.n	8005cf0 <_printf_common+0xa4>
 8005d22:	3601      	adds	r6, #1
 8005d24:	e7d9      	b.n	8005cda <_printf_common+0x8e>
	...

08005d28 <_printf_i>:
 8005d28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d2c:	7e0f      	ldrb	r7, [r1, #24]
 8005d2e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005d30:	2f78      	cmp	r7, #120	@ 0x78
 8005d32:	4691      	mov	r9, r2
 8005d34:	4680      	mov	r8, r0
 8005d36:	460c      	mov	r4, r1
 8005d38:	469a      	mov	sl, r3
 8005d3a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005d3e:	d807      	bhi.n	8005d50 <_printf_i+0x28>
 8005d40:	2f62      	cmp	r7, #98	@ 0x62
 8005d42:	d80a      	bhi.n	8005d5a <_printf_i+0x32>
 8005d44:	2f00      	cmp	r7, #0
 8005d46:	f000 80d1 	beq.w	8005eec <_printf_i+0x1c4>
 8005d4a:	2f58      	cmp	r7, #88	@ 0x58
 8005d4c:	f000 80b8 	beq.w	8005ec0 <_printf_i+0x198>
 8005d50:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005d54:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005d58:	e03a      	b.n	8005dd0 <_printf_i+0xa8>
 8005d5a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005d5e:	2b15      	cmp	r3, #21
 8005d60:	d8f6      	bhi.n	8005d50 <_printf_i+0x28>
 8005d62:	a101      	add	r1, pc, #4	@ (adr r1, 8005d68 <_printf_i+0x40>)
 8005d64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005d68:	08005dc1 	.word	0x08005dc1
 8005d6c:	08005dd5 	.word	0x08005dd5
 8005d70:	08005d51 	.word	0x08005d51
 8005d74:	08005d51 	.word	0x08005d51
 8005d78:	08005d51 	.word	0x08005d51
 8005d7c:	08005d51 	.word	0x08005d51
 8005d80:	08005dd5 	.word	0x08005dd5
 8005d84:	08005d51 	.word	0x08005d51
 8005d88:	08005d51 	.word	0x08005d51
 8005d8c:	08005d51 	.word	0x08005d51
 8005d90:	08005d51 	.word	0x08005d51
 8005d94:	08005ed3 	.word	0x08005ed3
 8005d98:	08005dff 	.word	0x08005dff
 8005d9c:	08005e8d 	.word	0x08005e8d
 8005da0:	08005d51 	.word	0x08005d51
 8005da4:	08005d51 	.word	0x08005d51
 8005da8:	08005ef5 	.word	0x08005ef5
 8005dac:	08005d51 	.word	0x08005d51
 8005db0:	08005dff 	.word	0x08005dff
 8005db4:	08005d51 	.word	0x08005d51
 8005db8:	08005d51 	.word	0x08005d51
 8005dbc:	08005e95 	.word	0x08005e95
 8005dc0:	6833      	ldr	r3, [r6, #0]
 8005dc2:	1d1a      	adds	r2, r3, #4
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	6032      	str	r2, [r6, #0]
 8005dc8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005dcc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	e09c      	b.n	8005f0e <_printf_i+0x1e6>
 8005dd4:	6833      	ldr	r3, [r6, #0]
 8005dd6:	6820      	ldr	r0, [r4, #0]
 8005dd8:	1d19      	adds	r1, r3, #4
 8005dda:	6031      	str	r1, [r6, #0]
 8005ddc:	0606      	lsls	r6, r0, #24
 8005dde:	d501      	bpl.n	8005de4 <_printf_i+0xbc>
 8005de0:	681d      	ldr	r5, [r3, #0]
 8005de2:	e003      	b.n	8005dec <_printf_i+0xc4>
 8005de4:	0645      	lsls	r5, r0, #25
 8005de6:	d5fb      	bpl.n	8005de0 <_printf_i+0xb8>
 8005de8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005dec:	2d00      	cmp	r5, #0
 8005dee:	da03      	bge.n	8005df8 <_printf_i+0xd0>
 8005df0:	232d      	movs	r3, #45	@ 0x2d
 8005df2:	426d      	negs	r5, r5
 8005df4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005df8:	4858      	ldr	r0, [pc, #352]	@ (8005f5c <_printf_i+0x234>)
 8005dfa:	230a      	movs	r3, #10
 8005dfc:	e011      	b.n	8005e22 <_printf_i+0xfa>
 8005dfe:	6821      	ldr	r1, [r4, #0]
 8005e00:	6833      	ldr	r3, [r6, #0]
 8005e02:	0608      	lsls	r0, r1, #24
 8005e04:	f853 5b04 	ldr.w	r5, [r3], #4
 8005e08:	d402      	bmi.n	8005e10 <_printf_i+0xe8>
 8005e0a:	0649      	lsls	r1, r1, #25
 8005e0c:	bf48      	it	mi
 8005e0e:	b2ad      	uxthmi	r5, r5
 8005e10:	2f6f      	cmp	r7, #111	@ 0x6f
 8005e12:	4852      	ldr	r0, [pc, #328]	@ (8005f5c <_printf_i+0x234>)
 8005e14:	6033      	str	r3, [r6, #0]
 8005e16:	bf14      	ite	ne
 8005e18:	230a      	movne	r3, #10
 8005e1a:	2308      	moveq	r3, #8
 8005e1c:	2100      	movs	r1, #0
 8005e1e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005e22:	6866      	ldr	r6, [r4, #4]
 8005e24:	60a6      	str	r6, [r4, #8]
 8005e26:	2e00      	cmp	r6, #0
 8005e28:	db05      	blt.n	8005e36 <_printf_i+0x10e>
 8005e2a:	6821      	ldr	r1, [r4, #0]
 8005e2c:	432e      	orrs	r6, r5
 8005e2e:	f021 0104 	bic.w	r1, r1, #4
 8005e32:	6021      	str	r1, [r4, #0]
 8005e34:	d04b      	beq.n	8005ece <_printf_i+0x1a6>
 8005e36:	4616      	mov	r6, r2
 8005e38:	fbb5 f1f3 	udiv	r1, r5, r3
 8005e3c:	fb03 5711 	mls	r7, r3, r1, r5
 8005e40:	5dc7      	ldrb	r7, [r0, r7]
 8005e42:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005e46:	462f      	mov	r7, r5
 8005e48:	42bb      	cmp	r3, r7
 8005e4a:	460d      	mov	r5, r1
 8005e4c:	d9f4      	bls.n	8005e38 <_printf_i+0x110>
 8005e4e:	2b08      	cmp	r3, #8
 8005e50:	d10b      	bne.n	8005e6a <_printf_i+0x142>
 8005e52:	6823      	ldr	r3, [r4, #0]
 8005e54:	07df      	lsls	r7, r3, #31
 8005e56:	d508      	bpl.n	8005e6a <_printf_i+0x142>
 8005e58:	6923      	ldr	r3, [r4, #16]
 8005e5a:	6861      	ldr	r1, [r4, #4]
 8005e5c:	4299      	cmp	r1, r3
 8005e5e:	bfde      	ittt	le
 8005e60:	2330      	movle	r3, #48	@ 0x30
 8005e62:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005e66:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005e6a:	1b92      	subs	r2, r2, r6
 8005e6c:	6122      	str	r2, [r4, #16]
 8005e6e:	f8cd a000 	str.w	sl, [sp]
 8005e72:	464b      	mov	r3, r9
 8005e74:	aa03      	add	r2, sp, #12
 8005e76:	4621      	mov	r1, r4
 8005e78:	4640      	mov	r0, r8
 8005e7a:	f7ff fee7 	bl	8005c4c <_printf_common>
 8005e7e:	3001      	adds	r0, #1
 8005e80:	d14a      	bne.n	8005f18 <_printf_i+0x1f0>
 8005e82:	f04f 30ff 	mov.w	r0, #4294967295
 8005e86:	b004      	add	sp, #16
 8005e88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e8c:	6823      	ldr	r3, [r4, #0]
 8005e8e:	f043 0320 	orr.w	r3, r3, #32
 8005e92:	6023      	str	r3, [r4, #0]
 8005e94:	4832      	ldr	r0, [pc, #200]	@ (8005f60 <_printf_i+0x238>)
 8005e96:	2778      	movs	r7, #120	@ 0x78
 8005e98:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005e9c:	6823      	ldr	r3, [r4, #0]
 8005e9e:	6831      	ldr	r1, [r6, #0]
 8005ea0:	061f      	lsls	r7, r3, #24
 8005ea2:	f851 5b04 	ldr.w	r5, [r1], #4
 8005ea6:	d402      	bmi.n	8005eae <_printf_i+0x186>
 8005ea8:	065f      	lsls	r7, r3, #25
 8005eaa:	bf48      	it	mi
 8005eac:	b2ad      	uxthmi	r5, r5
 8005eae:	6031      	str	r1, [r6, #0]
 8005eb0:	07d9      	lsls	r1, r3, #31
 8005eb2:	bf44      	itt	mi
 8005eb4:	f043 0320 	orrmi.w	r3, r3, #32
 8005eb8:	6023      	strmi	r3, [r4, #0]
 8005eba:	b11d      	cbz	r5, 8005ec4 <_printf_i+0x19c>
 8005ebc:	2310      	movs	r3, #16
 8005ebe:	e7ad      	b.n	8005e1c <_printf_i+0xf4>
 8005ec0:	4826      	ldr	r0, [pc, #152]	@ (8005f5c <_printf_i+0x234>)
 8005ec2:	e7e9      	b.n	8005e98 <_printf_i+0x170>
 8005ec4:	6823      	ldr	r3, [r4, #0]
 8005ec6:	f023 0320 	bic.w	r3, r3, #32
 8005eca:	6023      	str	r3, [r4, #0]
 8005ecc:	e7f6      	b.n	8005ebc <_printf_i+0x194>
 8005ece:	4616      	mov	r6, r2
 8005ed0:	e7bd      	b.n	8005e4e <_printf_i+0x126>
 8005ed2:	6833      	ldr	r3, [r6, #0]
 8005ed4:	6825      	ldr	r5, [r4, #0]
 8005ed6:	6961      	ldr	r1, [r4, #20]
 8005ed8:	1d18      	adds	r0, r3, #4
 8005eda:	6030      	str	r0, [r6, #0]
 8005edc:	062e      	lsls	r6, r5, #24
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	d501      	bpl.n	8005ee6 <_printf_i+0x1be>
 8005ee2:	6019      	str	r1, [r3, #0]
 8005ee4:	e002      	b.n	8005eec <_printf_i+0x1c4>
 8005ee6:	0668      	lsls	r0, r5, #25
 8005ee8:	d5fb      	bpl.n	8005ee2 <_printf_i+0x1ba>
 8005eea:	8019      	strh	r1, [r3, #0]
 8005eec:	2300      	movs	r3, #0
 8005eee:	6123      	str	r3, [r4, #16]
 8005ef0:	4616      	mov	r6, r2
 8005ef2:	e7bc      	b.n	8005e6e <_printf_i+0x146>
 8005ef4:	6833      	ldr	r3, [r6, #0]
 8005ef6:	1d1a      	adds	r2, r3, #4
 8005ef8:	6032      	str	r2, [r6, #0]
 8005efa:	681e      	ldr	r6, [r3, #0]
 8005efc:	6862      	ldr	r2, [r4, #4]
 8005efe:	2100      	movs	r1, #0
 8005f00:	4630      	mov	r0, r6
 8005f02:	f7fa f96d 	bl	80001e0 <memchr>
 8005f06:	b108      	cbz	r0, 8005f0c <_printf_i+0x1e4>
 8005f08:	1b80      	subs	r0, r0, r6
 8005f0a:	6060      	str	r0, [r4, #4]
 8005f0c:	6863      	ldr	r3, [r4, #4]
 8005f0e:	6123      	str	r3, [r4, #16]
 8005f10:	2300      	movs	r3, #0
 8005f12:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005f16:	e7aa      	b.n	8005e6e <_printf_i+0x146>
 8005f18:	6923      	ldr	r3, [r4, #16]
 8005f1a:	4632      	mov	r2, r6
 8005f1c:	4649      	mov	r1, r9
 8005f1e:	4640      	mov	r0, r8
 8005f20:	47d0      	blx	sl
 8005f22:	3001      	adds	r0, #1
 8005f24:	d0ad      	beq.n	8005e82 <_printf_i+0x15a>
 8005f26:	6823      	ldr	r3, [r4, #0]
 8005f28:	079b      	lsls	r3, r3, #30
 8005f2a:	d413      	bmi.n	8005f54 <_printf_i+0x22c>
 8005f2c:	68e0      	ldr	r0, [r4, #12]
 8005f2e:	9b03      	ldr	r3, [sp, #12]
 8005f30:	4298      	cmp	r0, r3
 8005f32:	bfb8      	it	lt
 8005f34:	4618      	movlt	r0, r3
 8005f36:	e7a6      	b.n	8005e86 <_printf_i+0x15e>
 8005f38:	2301      	movs	r3, #1
 8005f3a:	4632      	mov	r2, r6
 8005f3c:	4649      	mov	r1, r9
 8005f3e:	4640      	mov	r0, r8
 8005f40:	47d0      	blx	sl
 8005f42:	3001      	adds	r0, #1
 8005f44:	d09d      	beq.n	8005e82 <_printf_i+0x15a>
 8005f46:	3501      	adds	r5, #1
 8005f48:	68e3      	ldr	r3, [r4, #12]
 8005f4a:	9903      	ldr	r1, [sp, #12]
 8005f4c:	1a5b      	subs	r3, r3, r1
 8005f4e:	42ab      	cmp	r3, r5
 8005f50:	dcf2      	bgt.n	8005f38 <_printf_i+0x210>
 8005f52:	e7eb      	b.n	8005f2c <_printf_i+0x204>
 8005f54:	2500      	movs	r5, #0
 8005f56:	f104 0619 	add.w	r6, r4, #25
 8005f5a:	e7f5      	b.n	8005f48 <_printf_i+0x220>
 8005f5c:	08063340 	.word	0x08063340
 8005f60:	08063351 	.word	0x08063351

08005f64 <__swbuf_r>:
 8005f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f66:	460e      	mov	r6, r1
 8005f68:	4614      	mov	r4, r2
 8005f6a:	4605      	mov	r5, r0
 8005f6c:	b118      	cbz	r0, 8005f76 <__swbuf_r+0x12>
 8005f6e:	6a03      	ldr	r3, [r0, #32]
 8005f70:	b90b      	cbnz	r3, 8005f76 <__swbuf_r+0x12>
 8005f72:	f7ff fa41 	bl	80053f8 <__sinit>
 8005f76:	69a3      	ldr	r3, [r4, #24]
 8005f78:	60a3      	str	r3, [r4, #8]
 8005f7a:	89a3      	ldrh	r3, [r4, #12]
 8005f7c:	071a      	lsls	r2, r3, #28
 8005f7e:	d501      	bpl.n	8005f84 <__swbuf_r+0x20>
 8005f80:	6923      	ldr	r3, [r4, #16]
 8005f82:	b943      	cbnz	r3, 8005f96 <__swbuf_r+0x32>
 8005f84:	4621      	mov	r1, r4
 8005f86:	4628      	mov	r0, r5
 8005f88:	f000 f82a 	bl	8005fe0 <__swsetup_r>
 8005f8c:	b118      	cbz	r0, 8005f96 <__swbuf_r+0x32>
 8005f8e:	f04f 37ff 	mov.w	r7, #4294967295
 8005f92:	4638      	mov	r0, r7
 8005f94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f96:	6823      	ldr	r3, [r4, #0]
 8005f98:	6922      	ldr	r2, [r4, #16]
 8005f9a:	1a98      	subs	r0, r3, r2
 8005f9c:	6963      	ldr	r3, [r4, #20]
 8005f9e:	b2f6      	uxtb	r6, r6
 8005fa0:	4283      	cmp	r3, r0
 8005fa2:	4637      	mov	r7, r6
 8005fa4:	dc05      	bgt.n	8005fb2 <__swbuf_r+0x4e>
 8005fa6:	4621      	mov	r1, r4
 8005fa8:	4628      	mov	r0, r5
 8005faa:	f7ff fcbd 	bl	8005928 <_fflush_r>
 8005fae:	2800      	cmp	r0, #0
 8005fb0:	d1ed      	bne.n	8005f8e <__swbuf_r+0x2a>
 8005fb2:	68a3      	ldr	r3, [r4, #8]
 8005fb4:	3b01      	subs	r3, #1
 8005fb6:	60a3      	str	r3, [r4, #8]
 8005fb8:	6823      	ldr	r3, [r4, #0]
 8005fba:	1c5a      	adds	r2, r3, #1
 8005fbc:	6022      	str	r2, [r4, #0]
 8005fbe:	701e      	strb	r6, [r3, #0]
 8005fc0:	6962      	ldr	r2, [r4, #20]
 8005fc2:	1c43      	adds	r3, r0, #1
 8005fc4:	429a      	cmp	r2, r3
 8005fc6:	d004      	beq.n	8005fd2 <__swbuf_r+0x6e>
 8005fc8:	89a3      	ldrh	r3, [r4, #12]
 8005fca:	07db      	lsls	r3, r3, #31
 8005fcc:	d5e1      	bpl.n	8005f92 <__swbuf_r+0x2e>
 8005fce:	2e0a      	cmp	r6, #10
 8005fd0:	d1df      	bne.n	8005f92 <__swbuf_r+0x2e>
 8005fd2:	4621      	mov	r1, r4
 8005fd4:	4628      	mov	r0, r5
 8005fd6:	f7ff fca7 	bl	8005928 <_fflush_r>
 8005fda:	2800      	cmp	r0, #0
 8005fdc:	d0d9      	beq.n	8005f92 <__swbuf_r+0x2e>
 8005fde:	e7d6      	b.n	8005f8e <__swbuf_r+0x2a>

08005fe0 <__swsetup_r>:
 8005fe0:	b538      	push	{r3, r4, r5, lr}
 8005fe2:	4b29      	ldr	r3, [pc, #164]	@ (8006088 <__swsetup_r+0xa8>)
 8005fe4:	4605      	mov	r5, r0
 8005fe6:	6818      	ldr	r0, [r3, #0]
 8005fe8:	460c      	mov	r4, r1
 8005fea:	b118      	cbz	r0, 8005ff4 <__swsetup_r+0x14>
 8005fec:	6a03      	ldr	r3, [r0, #32]
 8005fee:	b90b      	cbnz	r3, 8005ff4 <__swsetup_r+0x14>
 8005ff0:	f7ff fa02 	bl	80053f8 <__sinit>
 8005ff4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ff8:	0719      	lsls	r1, r3, #28
 8005ffa:	d422      	bmi.n	8006042 <__swsetup_r+0x62>
 8005ffc:	06da      	lsls	r2, r3, #27
 8005ffe:	d407      	bmi.n	8006010 <__swsetup_r+0x30>
 8006000:	2209      	movs	r2, #9
 8006002:	602a      	str	r2, [r5, #0]
 8006004:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006008:	81a3      	strh	r3, [r4, #12]
 800600a:	f04f 30ff 	mov.w	r0, #4294967295
 800600e:	e033      	b.n	8006078 <__swsetup_r+0x98>
 8006010:	0758      	lsls	r0, r3, #29
 8006012:	d512      	bpl.n	800603a <__swsetup_r+0x5a>
 8006014:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006016:	b141      	cbz	r1, 800602a <__swsetup_r+0x4a>
 8006018:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800601c:	4299      	cmp	r1, r3
 800601e:	d002      	beq.n	8006026 <__swsetup_r+0x46>
 8006020:	4628      	mov	r0, r5
 8006022:	f7ff fafd 	bl	8005620 <_free_r>
 8006026:	2300      	movs	r3, #0
 8006028:	6363      	str	r3, [r4, #52]	@ 0x34
 800602a:	89a3      	ldrh	r3, [r4, #12]
 800602c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006030:	81a3      	strh	r3, [r4, #12]
 8006032:	2300      	movs	r3, #0
 8006034:	6063      	str	r3, [r4, #4]
 8006036:	6923      	ldr	r3, [r4, #16]
 8006038:	6023      	str	r3, [r4, #0]
 800603a:	89a3      	ldrh	r3, [r4, #12]
 800603c:	f043 0308 	orr.w	r3, r3, #8
 8006040:	81a3      	strh	r3, [r4, #12]
 8006042:	6923      	ldr	r3, [r4, #16]
 8006044:	b94b      	cbnz	r3, 800605a <__swsetup_r+0x7a>
 8006046:	89a3      	ldrh	r3, [r4, #12]
 8006048:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800604c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006050:	d003      	beq.n	800605a <__swsetup_r+0x7a>
 8006052:	4621      	mov	r1, r4
 8006054:	4628      	mov	r0, r5
 8006056:	f000 f883 	bl	8006160 <__smakebuf_r>
 800605a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800605e:	f013 0201 	ands.w	r2, r3, #1
 8006062:	d00a      	beq.n	800607a <__swsetup_r+0x9a>
 8006064:	2200      	movs	r2, #0
 8006066:	60a2      	str	r2, [r4, #8]
 8006068:	6962      	ldr	r2, [r4, #20]
 800606a:	4252      	negs	r2, r2
 800606c:	61a2      	str	r2, [r4, #24]
 800606e:	6922      	ldr	r2, [r4, #16]
 8006070:	b942      	cbnz	r2, 8006084 <__swsetup_r+0xa4>
 8006072:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006076:	d1c5      	bne.n	8006004 <__swsetup_r+0x24>
 8006078:	bd38      	pop	{r3, r4, r5, pc}
 800607a:	0799      	lsls	r1, r3, #30
 800607c:	bf58      	it	pl
 800607e:	6962      	ldrpl	r2, [r4, #20]
 8006080:	60a2      	str	r2, [r4, #8]
 8006082:	e7f4      	b.n	800606e <__swsetup_r+0x8e>
 8006084:	2000      	movs	r0, #0
 8006086:	e7f7      	b.n	8006078 <__swsetup_r+0x98>
 8006088:	20000034 	.word	0x20000034

0800608c <_raise_r>:
 800608c:	291f      	cmp	r1, #31
 800608e:	b538      	push	{r3, r4, r5, lr}
 8006090:	4605      	mov	r5, r0
 8006092:	460c      	mov	r4, r1
 8006094:	d904      	bls.n	80060a0 <_raise_r+0x14>
 8006096:	2316      	movs	r3, #22
 8006098:	6003      	str	r3, [r0, #0]
 800609a:	f04f 30ff 	mov.w	r0, #4294967295
 800609e:	bd38      	pop	{r3, r4, r5, pc}
 80060a0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80060a2:	b112      	cbz	r2, 80060aa <_raise_r+0x1e>
 80060a4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80060a8:	b94b      	cbnz	r3, 80060be <_raise_r+0x32>
 80060aa:	4628      	mov	r0, r5
 80060ac:	f000 f830 	bl	8006110 <_getpid_r>
 80060b0:	4622      	mov	r2, r4
 80060b2:	4601      	mov	r1, r0
 80060b4:	4628      	mov	r0, r5
 80060b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80060ba:	f000 b817 	b.w	80060ec <_kill_r>
 80060be:	2b01      	cmp	r3, #1
 80060c0:	d00a      	beq.n	80060d8 <_raise_r+0x4c>
 80060c2:	1c59      	adds	r1, r3, #1
 80060c4:	d103      	bne.n	80060ce <_raise_r+0x42>
 80060c6:	2316      	movs	r3, #22
 80060c8:	6003      	str	r3, [r0, #0]
 80060ca:	2001      	movs	r0, #1
 80060cc:	e7e7      	b.n	800609e <_raise_r+0x12>
 80060ce:	2100      	movs	r1, #0
 80060d0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80060d4:	4620      	mov	r0, r4
 80060d6:	4798      	blx	r3
 80060d8:	2000      	movs	r0, #0
 80060da:	e7e0      	b.n	800609e <_raise_r+0x12>

080060dc <raise>:
 80060dc:	4b02      	ldr	r3, [pc, #8]	@ (80060e8 <raise+0xc>)
 80060de:	4601      	mov	r1, r0
 80060e0:	6818      	ldr	r0, [r3, #0]
 80060e2:	f7ff bfd3 	b.w	800608c <_raise_r>
 80060e6:	bf00      	nop
 80060e8:	20000034 	.word	0x20000034

080060ec <_kill_r>:
 80060ec:	b538      	push	{r3, r4, r5, lr}
 80060ee:	4d07      	ldr	r5, [pc, #28]	@ (800610c <_kill_r+0x20>)
 80060f0:	2300      	movs	r3, #0
 80060f2:	4604      	mov	r4, r0
 80060f4:	4608      	mov	r0, r1
 80060f6:	4611      	mov	r1, r2
 80060f8:	602b      	str	r3, [r5, #0]
 80060fa:	f7fb f848 	bl	800118e <_kill>
 80060fe:	1c43      	adds	r3, r0, #1
 8006100:	d102      	bne.n	8006108 <_kill_r+0x1c>
 8006102:	682b      	ldr	r3, [r5, #0]
 8006104:	b103      	cbz	r3, 8006108 <_kill_r+0x1c>
 8006106:	6023      	str	r3, [r4, #0]
 8006108:	bd38      	pop	{r3, r4, r5, pc}
 800610a:	bf00      	nop
 800610c:	2000063c 	.word	0x2000063c

08006110 <_getpid_r>:
 8006110:	f7fb b835 	b.w	800117e <_getpid>

08006114 <__swhatbuf_r>:
 8006114:	b570      	push	{r4, r5, r6, lr}
 8006116:	460c      	mov	r4, r1
 8006118:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800611c:	2900      	cmp	r1, #0
 800611e:	b096      	sub	sp, #88	@ 0x58
 8006120:	4615      	mov	r5, r2
 8006122:	461e      	mov	r6, r3
 8006124:	da0d      	bge.n	8006142 <__swhatbuf_r+0x2e>
 8006126:	89a3      	ldrh	r3, [r4, #12]
 8006128:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800612c:	f04f 0100 	mov.w	r1, #0
 8006130:	bf14      	ite	ne
 8006132:	2340      	movne	r3, #64	@ 0x40
 8006134:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006138:	2000      	movs	r0, #0
 800613a:	6031      	str	r1, [r6, #0]
 800613c:	602b      	str	r3, [r5, #0]
 800613e:	b016      	add	sp, #88	@ 0x58
 8006140:	bd70      	pop	{r4, r5, r6, pc}
 8006142:	466a      	mov	r2, sp
 8006144:	f000 f848 	bl	80061d8 <_fstat_r>
 8006148:	2800      	cmp	r0, #0
 800614a:	dbec      	blt.n	8006126 <__swhatbuf_r+0x12>
 800614c:	9901      	ldr	r1, [sp, #4]
 800614e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006152:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006156:	4259      	negs	r1, r3
 8006158:	4159      	adcs	r1, r3
 800615a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800615e:	e7eb      	b.n	8006138 <__swhatbuf_r+0x24>

08006160 <__smakebuf_r>:
 8006160:	898b      	ldrh	r3, [r1, #12]
 8006162:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006164:	079d      	lsls	r5, r3, #30
 8006166:	4606      	mov	r6, r0
 8006168:	460c      	mov	r4, r1
 800616a:	d507      	bpl.n	800617c <__smakebuf_r+0x1c>
 800616c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006170:	6023      	str	r3, [r4, #0]
 8006172:	6123      	str	r3, [r4, #16]
 8006174:	2301      	movs	r3, #1
 8006176:	6163      	str	r3, [r4, #20]
 8006178:	b003      	add	sp, #12
 800617a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800617c:	ab01      	add	r3, sp, #4
 800617e:	466a      	mov	r2, sp
 8006180:	f7ff ffc8 	bl	8006114 <__swhatbuf_r>
 8006184:	9f00      	ldr	r7, [sp, #0]
 8006186:	4605      	mov	r5, r0
 8006188:	4639      	mov	r1, r7
 800618a:	4630      	mov	r0, r6
 800618c:	f7ff fabc 	bl	8005708 <_malloc_r>
 8006190:	b948      	cbnz	r0, 80061a6 <__smakebuf_r+0x46>
 8006192:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006196:	059a      	lsls	r2, r3, #22
 8006198:	d4ee      	bmi.n	8006178 <__smakebuf_r+0x18>
 800619a:	f023 0303 	bic.w	r3, r3, #3
 800619e:	f043 0302 	orr.w	r3, r3, #2
 80061a2:	81a3      	strh	r3, [r4, #12]
 80061a4:	e7e2      	b.n	800616c <__smakebuf_r+0xc>
 80061a6:	89a3      	ldrh	r3, [r4, #12]
 80061a8:	6020      	str	r0, [r4, #0]
 80061aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80061ae:	81a3      	strh	r3, [r4, #12]
 80061b0:	9b01      	ldr	r3, [sp, #4]
 80061b2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80061b6:	b15b      	cbz	r3, 80061d0 <__smakebuf_r+0x70>
 80061b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80061bc:	4630      	mov	r0, r6
 80061be:	f000 f81d 	bl	80061fc <_isatty_r>
 80061c2:	b128      	cbz	r0, 80061d0 <__smakebuf_r+0x70>
 80061c4:	89a3      	ldrh	r3, [r4, #12]
 80061c6:	f023 0303 	bic.w	r3, r3, #3
 80061ca:	f043 0301 	orr.w	r3, r3, #1
 80061ce:	81a3      	strh	r3, [r4, #12]
 80061d0:	89a3      	ldrh	r3, [r4, #12]
 80061d2:	431d      	orrs	r5, r3
 80061d4:	81a5      	strh	r5, [r4, #12]
 80061d6:	e7cf      	b.n	8006178 <__smakebuf_r+0x18>

080061d8 <_fstat_r>:
 80061d8:	b538      	push	{r3, r4, r5, lr}
 80061da:	4d07      	ldr	r5, [pc, #28]	@ (80061f8 <_fstat_r+0x20>)
 80061dc:	2300      	movs	r3, #0
 80061de:	4604      	mov	r4, r0
 80061e0:	4608      	mov	r0, r1
 80061e2:	4611      	mov	r1, r2
 80061e4:	602b      	str	r3, [r5, #0]
 80061e6:	f7fb f832 	bl	800124e <_fstat>
 80061ea:	1c43      	adds	r3, r0, #1
 80061ec:	d102      	bne.n	80061f4 <_fstat_r+0x1c>
 80061ee:	682b      	ldr	r3, [r5, #0]
 80061f0:	b103      	cbz	r3, 80061f4 <_fstat_r+0x1c>
 80061f2:	6023      	str	r3, [r4, #0]
 80061f4:	bd38      	pop	{r3, r4, r5, pc}
 80061f6:	bf00      	nop
 80061f8:	2000063c 	.word	0x2000063c

080061fc <_isatty_r>:
 80061fc:	b538      	push	{r3, r4, r5, lr}
 80061fe:	4d06      	ldr	r5, [pc, #24]	@ (8006218 <_isatty_r+0x1c>)
 8006200:	2300      	movs	r3, #0
 8006202:	4604      	mov	r4, r0
 8006204:	4608      	mov	r0, r1
 8006206:	602b      	str	r3, [r5, #0]
 8006208:	f7fb f831 	bl	800126e <_isatty>
 800620c:	1c43      	adds	r3, r0, #1
 800620e:	d102      	bne.n	8006216 <_isatty_r+0x1a>
 8006210:	682b      	ldr	r3, [r5, #0]
 8006212:	b103      	cbz	r3, 8006216 <_isatty_r+0x1a>
 8006214:	6023      	str	r3, [r4, #0]
 8006216:	bd38      	pop	{r3, r4, r5, pc}
 8006218:	2000063c 	.word	0x2000063c

0800621c <_init>:
 800621c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800621e:	bf00      	nop
 8006220:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006222:	bc08      	pop	{r3}
 8006224:	469e      	mov	lr, r3
 8006226:	4770      	bx	lr

08006228 <_fini>:
 8006228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800622a:	bf00      	nop
 800622c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800622e:	bc08      	pop	{r3}
 8006230:	469e      	mov	lr, r3
 8006232:	4770      	bx	lr
