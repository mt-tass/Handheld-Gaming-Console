
HandHeld-Gaming-Console.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000067e8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0005d124  08006978  08006978  00007978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08063a9c  08063a9c  00065084  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08063a9c  08063a9c  00064a9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08063aa4  08063aa4  00065084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08063aa4  08063aa4  00064aa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08063aa8  08063aa8  00064aa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000084  20000000  08063aac  00065000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00065084  2**0
                  CONTENTS
 10 .bss          00000610  20000084  20000084  00065084  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000694  20000694  00065084  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00065084  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f7cc  00000000  00000000  000650b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002631  00000000  00000000  00074880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e50  00000000  00000000  00076eb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b0a  00000000  00000000  00077d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000239ec  00000000  00000000  00078812  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012fba  00000000  00000000  0009c1fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d5f93  00000000  00000000  000af1b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0018514b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000043fc  00000000  00000000  00185190  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000071  00000000  00000000  0018958c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000084 	.word	0x20000084
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006960 	.word	0x08006960

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000088 	.word	0x20000088
 80001cc:	08006960 	.word	0x08006960

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a0:	f001 fd30 	bl	8002004 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a4:	f000 fafc 	bl	8000ba0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a8:	f000 fc38 	bl	8000e1c <MX_GPIO_Init>
  MX_ADC1_Init();
 80005ac:	f000 fb56 	bl	8000c5c <MX_ADC1_Init>
  MX_I2C2_Init();
 80005b0:	f000 fba6 	bl	8000d00 <MX_I2C2_Init>
  MX_SPI2_Init();
 80005b4:	f000 fbd2 	bl	8000d5c <MX_SPI2_Init>
  MX_UART4_Init();
 80005b8:	f000 fc06 	bl	8000dc8 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  ILI9341_Init();
 80005bc:	f004 ff12 	bl	80053e4 <ILI9341_Init>
  MPU6050_Init();
 80005c0:	f001 fc74 	bl	8001eac <MPU6050_Init>
  drawIntroScreen();
 80005c4:	f000 f826 	bl	8000614 <drawIntroScreen>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  handleInput();
 80005c8:	f000 f8fe 	bl	80007c8 <handleInput>
    /* USER CODE END WHILE */
	  switch (currentState) {
 80005cc:	4b10      	ldr	r3, [pc, #64]	@ (8000610 <main+0x74>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	3b01      	subs	r3, #1
 80005d2:	2b03      	cmp	r3, #3
 80005d4:	d81a      	bhi.n	800060c <main+0x70>
 80005d6:	a201      	add	r2, pc, #4	@ (adr r2, 80005dc <main+0x40>)
 80005d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005dc:	080005ed 	.word	0x080005ed
 80005e0:	080005fb 	.word	0x080005fb
 80005e4:	08000601 	.word	0x08000601
 80005e8:	08000607 	.word	0x08000607
	              case STATE_MENU:
	                  drawMenuScreen();
 80005ec:	f000 f84a 	bl	8000684 <drawMenuScreen>
	                  HAL_Delay(500);
 80005f0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80005f4:	f001 fd78 	bl	80020e8 <HAL_Delay>
	                  break;
 80005f8:	e009      	b.n	800060e <main+0x72>
	              case STATE_GAME_SNAKE:
	                  runSnakeGame();
 80005fa:	f000 f9ad 	bl	8000958 <runSnakeGame>
	                  break;
 80005fe:	e006      	b.n	800060e <main+0x72>
	              case STATE_GAME_PONG:
	                  runPingPongGame();
 8000600:	f000 fa4a 	bl	8000a98 <runPingPongGame>
	                  break;
 8000604:	e003      	b.n	800060e <main+0x72>
	              case STATE_GAME_OVER:
	                  drawGameOverScreen();
 8000606:	f000 f895 	bl	8000734 <drawGameOverScreen>
	                  break;
 800060a:	e000      	b.n	800060e <main+0x72>
	              default:
	                  break;
 800060c:	bf00      	nop
	  handleInput();
 800060e:	e7db      	b.n	80005c8 <main+0x2c>
 8000610:	200000a0 	.word	0x200000a0

08000614 <drawIntroScreen>:

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
void drawIntroScreen(void) {
 8000614:	b5b0      	push	{r4, r5, r7, lr}
 8000616:	b08a      	sub	sp, #40	@ 0x28
 8000618:	af04      	add	r7, sp, #16
    ILI9341_FillScreen(ILI9341_BLACK);
 800061a:	2000      	movs	r0, #0
 800061c:	f005 f93c 	bl	8005898 <ILI9341_FillScreen>
    ILI9341_DrawImage(128, 40, 64, 64, intro);
 8000620:	4b14      	ldr	r3, [pc, #80]	@ (8000674 <drawIntroScreen+0x60>)
 8000622:	9300      	str	r3, [sp, #0]
 8000624:	2340      	movs	r3, #64	@ 0x40
 8000626:	2240      	movs	r2, #64	@ 0x40
 8000628:	2128      	movs	r1, #40	@ 0x28
 800062a:	2080      	movs	r0, #128	@ 0x80
 800062c:	f005 f946 	bl	80058bc <ILI9341_DrawImage>
    char temp_msg[] = "HANDHELD-CONSOLE";
 8000630:	4b11      	ldr	r3, [pc, #68]	@ (8000678 <drawIntroScreen+0x64>)
 8000632:	1d3c      	adds	r4, r7, #4
 8000634:	461d      	mov	r5, r3
 8000636:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000638:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800063a:	682b      	ldr	r3, [r5, #0]
 800063c:	7023      	strb	r3, [r4, #0]
    ILI9341_WriteString(32, 204,temp_msg, Font_16x26, ILI9341_WHITE, ILI9341_BLACK);
 800063e:	4b0f      	ldr	r3, [pc, #60]	@ (800067c <drawIntroScreen+0x68>)
 8000640:	1d39      	adds	r1, r7, #4
 8000642:	2200      	movs	r2, #0
 8000644:	9202      	str	r2, [sp, #8]
 8000646:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800064a:	9201      	str	r2, [sp, #4]
 800064c:	685a      	ldr	r2, [r3, #4]
 800064e:	9200      	str	r2, [sp, #0]
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	460a      	mov	r2, r1
 8000654:	21cc      	movs	r1, #204	@ 0xcc
 8000656:	2020      	movs	r0, #32
 8000658:	f005 f864 	bl	8005724 <ILI9341_WriteString>
    HAL_Delay(2000);
 800065c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000660:	f001 fd42 	bl	80020e8 <HAL_Delay>
    currentState = STATE_MENU;
 8000664:	4b06      	ldr	r3, [pc, #24]	@ (8000680 <drawIntroScreen+0x6c>)
 8000666:	2201      	movs	r2, #1
 8000668:	601a      	str	r2, [r3, #0]
}
 800066a:	bf00      	nop
 800066c:	3718      	adds	r7, #24
 800066e:	46bd      	mov	sp, r7
 8000670:	bdb0      	pop	{r4, r5, r7, pc}
 8000672:	bf00      	nop
 8000674:	080421c0 	.word	0x080421c0
 8000678:	08006978 	.word	0x08006978
 800067c:	20000020 	.word	0x20000020
 8000680:	200000a0 	.word	0x200000a0

08000684 <drawMenuScreen>:
void drawMenuScreen(void) {
 8000684:	b580      	push	{r7, lr}
 8000686:	b088      	sub	sp, #32
 8000688:	af04      	add	r7, sp, #16
    ILI9341_FillRectangle(30,40,260,200,ILI9341_BLACK);
 800068a:	2300      	movs	r3, #0
 800068c:	9300      	str	r3, [sp, #0]
 800068e:	23c8      	movs	r3, #200	@ 0xc8
 8000690:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000694:	2128      	movs	r1, #40	@ 0x28
 8000696:	201e      	movs	r0, #30
 8000698:	f005 f890 	bl	80057bc <ILI9341_FillRectangle>
    char temp_msg[] = "SELECT GAME";
 800069c:	4a1e      	ldr	r2, [pc, #120]	@ (8000718 <drawMenuScreen+0x94>)
 800069e:	1d3b      	adds	r3, r7, #4
 80006a0:	ca07      	ldmia	r2, {r0, r1, r2}
 80006a2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    ILI9341_WriteString(72, 10, temp_msg, Font_16x26, ILI9341_WHITE, ILI9341_BLACK);
 80006a6:	4b1d      	ldr	r3, [pc, #116]	@ (800071c <drawMenuScreen+0x98>)
 80006a8:	1d39      	adds	r1, r7, #4
 80006aa:	2200      	movs	r2, #0
 80006ac:	9202      	str	r2, [sp, #8]
 80006ae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80006b2:	9201      	str	r2, [sp, #4]
 80006b4:	685a      	ldr	r2, [r3, #4]
 80006b6:	9200      	str	r2, [sp, #0]
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	460a      	mov	r2, r1
 80006bc:	210a      	movs	r1, #10
 80006be:	2048      	movs	r0, #72	@ 0x48
 80006c0:	f005 f830 	bl	8005724 <ILI9341_WriteString>

    if (menuSelection == 0) {
 80006c4:	4b16      	ldr	r3, [pc, #88]	@ (8000720 <drawMenuScreen+0x9c>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d110      	bne.n	80006ee <drawMenuScreen+0x6a>
        ILI9341_DrawImage(80, 56, 160, 40, menu1_2); // Highlighted Snake
 80006cc:	4b15      	ldr	r3, [pc, #84]	@ (8000724 <drawMenuScreen+0xa0>)
 80006ce:	9300      	str	r3, [sp, #0]
 80006d0:	2328      	movs	r3, #40	@ 0x28
 80006d2:	22a0      	movs	r2, #160	@ 0xa0
 80006d4:	2138      	movs	r1, #56	@ 0x38
 80006d6:	2050      	movs	r0, #80	@ 0x50
 80006d8:	f005 f8f0 	bl	80058bc <ILI9341_DrawImage>
        ILI9341_DrawImage(80, 116, 160, 40, menu2_1); // Unhighlighted Pong
 80006dc:	4b12      	ldr	r3, [pc, #72]	@ (8000728 <drawMenuScreen+0xa4>)
 80006de:	9300      	str	r3, [sp, #0]
 80006e0:	2328      	movs	r3, #40	@ 0x28
 80006e2:	22a0      	movs	r2, #160	@ 0xa0
 80006e4:	2174      	movs	r1, #116	@ 0x74
 80006e6:	2050      	movs	r0, #80	@ 0x50
 80006e8:	f005 f8e8 	bl	80058bc <ILI9341_DrawImage>
    } else {
        ILI9341_DrawImage(80, 56, 160, 40, menu1_1); // Unhighlighted Snake
        ILI9341_DrawImage(80, 116, 160, 40, menu2_2); // Highlighted Pong
    }
}
 80006ec:	e00f      	b.n	800070e <drawMenuScreen+0x8a>
        ILI9341_DrawImage(80, 56, 160, 40, menu1_1); // Unhighlighted Snake
 80006ee:	4b0f      	ldr	r3, [pc, #60]	@ (800072c <drawMenuScreen+0xa8>)
 80006f0:	9300      	str	r3, [sp, #0]
 80006f2:	2328      	movs	r3, #40	@ 0x28
 80006f4:	22a0      	movs	r2, #160	@ 0xa0
 80006f6:	2138      	movs	r1, #56	@ 0x38
 80006f8:	2050      	movs	r0, #80	@ 0x50
 80006fa:	f005 f8df 	bl	80058bc <ILI9341_DrawImage>
        ILI9341_DrawImage(80, 116, 160, 40, menu2_2); // Highlighted Pong
 80006fe:	4b0c      	ldr	r3, [pc, #48]	@ (8000730 <drawMenuScreen+0xac>)
 8000700:	9300      	str	r3, [sp, #0]
 8000702:	2328      	movs	r3, #40	@ 0x28
 8000704:	22a0      	movs	r2, #160	@ 0xa0
 8000706:	2174      	movs	r1, #116	@ 0x74
 8000708:	2050      	movs	r0, #80	@ 0x50
 800070a:	f005 f8d7 	bl	80058bc <ILI9341_DrawImage>
}
 800070e:	bf00      	nop
 8000710:	3710      	adds	r7, #16
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	0800698c 	.word	0x0800698c
 800071c:	20000020 	.word	0x20000020
 8000720:	200000a4 	.word	0x200000a4
 8000724:	080441c0 	.word	0x080441c0
 8000728:	0804a5c0 	.word	0x0804a5c0
 800072c:	080473c0 	.word	0x080473c0
 8000730:	0804d7c0 	.word	0x0804d7c0

08000734 <drawGameOverScreen>:
void drawGameOverScreen(void) {
 8000734:	b580      	push	{r7, lr}
 8000736:	b08a      	sub	sp, #40	@ 0x28
 8000738:	af04      	add	r7, sp, #16
    ILI9341_FillScreen(ILI9341_BLACK);
 800073a:	2000      	movs	r0, #0
 800073c:	f005 f8ac 	bl	8005898 <ILI9341_FillScreen>
    char temp_msg1[] = "Game Over";
 8000740:	4a1b      	ldr	r2, [pc, #108]	@ (80007b0 <drawGameOverScreen+0x7c>)
 8000742:	f107 030c 	add.w	r3, r7, #12
 8000746:	ca07      	ldmia	r2, {r0, r1, r2}
 8000748:	c303      	stmia	r3!, {r0, r1}
 800074a:	801a      	strh	r2, [r3, #0]
    char temp_msg2[] = "Press Retry";
 800074c:	4a19      	ldr	r2, [pc, #100]	@ (80007b4 <drawGameOverScreen+0x80>)
 800074e:	463b      	mov	r3, r7
 8000750:	ca07      	ldmia	r2, {r0, r1, r2}
 8000752:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    ILI9341_WriteString(ILI9341_WIDTH / 2 - 50, ILI9341_HEIGHT / 2, temp_msg1, Font_16x26, ILI9341_RED, ILI9341_BLACK);
 8000756:	4b18      	ldr	r3, [pc, #96]	@ (80007b8 <drawGameOverScreen+0x84>)
 8000758:	f107 010c 	add.w	r1, r7, #12
 800075c:	2200      	movs	r2, #0
 800075e:	9202      	str	r2, [sp, #8]
 8000760:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8000764:	9201      	str	r2, [sp, #4]
 8000766:	685a      	ldr	r2, [r3, #4]
 8000768:	9200      	str	r2, [sp, #0]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	460a      	mov	r2, r1
 800076e:	2178      	movs	r1, #120	@ 0x78
 8000770:	206e      	movs	r0, #110	@ 0x6e
 8000772:	f004 ffd7 	bl	8005724 <ILI9341_WriteString>
    ILI9341_WriteString(ILI9341_WIDTH / 2 - 80, ILI9341_HEIGHT / 2 + 30, temp_msg2, Font_7x10, ILI9341_WHITE, ILI9341_BLACK);
 8000776:	4b11      	ldr	r3, [pc, #68]	@ (80007bc <drawGameOverScreen+0x88>)
 8000778:	4639      	mov	r1, r7
 800077a:	2200      	movs	r2, #0
 800077c:	9202      	str	r2, [sp, #8]
 800077e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000782:	9201      	str	r2, [sp, #4]
 8000784:	685a      	ldr	r2, [r3, #4]
 8000786:	9200      	str	r2, [sp, #0]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	460a      	mov	r2, r1
 800078c:	2196      	movs	r1, #150	@ 0x96
 800078e:	2050      	movs	r0, #80	@ 0x50
 8000790:	f004 ffc8 	bl	8005724 <ILI9341_WriteString>
    if (HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_0)==GPIO_PIN_RESET){
 8000794:	2101      	movs	r1, #1
 8000796:	480a      	ldr	r0, [pc, #40]	@ (80007c0 <drawGameOverScreen+0x8c>)
 8000798:	f002 fb4c 	bl	8002e34 <HAL_GPIO_ReadPin>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d102      	bne.n	80007a8 <drawGameOverScreen+0x74>
    	currentState = STATE_MENU;
 80007a2:	4b08      	ldr	r3, [pc, #32]	@ (80007c4 <drawGameOverScreen+0x90>)
 80007a4:	2201      	movs	r2, #1
 80007a6:	601a      	str	r2, [r3, #0]
    }
}
 80007a8:	bf00      	nop
 80007aa:	3718      	adds	r7, #24
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	08006998 	.word	0x08006998
 80007b4:	080069a4 	.word	0x080069a4
 80007b8:	20000020 	.word	0x20000020
 80007bc:	20000018 	.word	0x20000018
 80007c0:	40020400 	.word	0x40020400
 80007c4:	200000a0 	.word	0x200000a0

080007c8 <handleInput>:
void handleInput(void) {
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b084      	sub	sp, #16
 80007cc:	af02      	add	r7, sp, #8
    //bool selectButtonPressed = (HAL_GPIO_ReadPin(JOYSTICK_BUTTON_PORT, JOYSTICK_BUTTON_PIN) == GPIO_PIN_SET);

    if ((HAL_GPIO_ReadPin(GPIOC , GPIO_PIN_4)==GPIO_PIN_RESET) ) {
 80007ce:	2110      	movs	r1, #16
 80007d0:	484c      	ldr	r0, [pc, #304]	@ (8000904 <handleInput+0x13c>)
 80007d2:	f002 fb2f 	bl	8002e34 <HAL_GPIO_ReadPin>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d175      	bne.n	80008c8 <handleInput+0x100>
        if (currentState == STATE_MENU) {
 80007dc:	4b4a      	ldr	r3, [pc, #296]	@ (8000908 <handleInput+0x140>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	2b01      	cmp	r3, #1
 80007e2:	d147      	bne.n	8000874 <handleInput+0xac>
            if (menuSelection == 0) {
 80007e4:	4b49      	ldr	r3, [pc, #292]	@ (800090c <handleInput+0x144>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d136      	bne.n	800085a <handleInput+0x92>
            	 ILI9341_FillScreen(ILI9341_BLACK);
 80007ec:	2000      	movs	r0, #0
 80007ee:	f005 f853 	bl	8005898 <ILI9341_FillScreen>
                 ILI9341_DrawImage(40,0,240,240,snake_intro);
 80007f2:	4b47      	ldr	r3, [pc, #284]	@ (8000910 <handleInput+0x148>)
 80007f4:	9300      	str	r3, [sp, #0]
 80007f6:	23f0      	movs	r3, #240	@ 0xf0
 80007f8:	22f0      	movs	r2, #240	@ 0xf0
 80007fa:	2100      	movs	r1, #0
 80007fc:	2028      	movs	r0, #40	@ 0x28
 80007fe:	f005 f85d 	bl	80058bc <ILI9341_DrawImage>
                 ILI9341_FillScreen(ILI9341_BLACK);
 8000802:	2000      	movs	r0, #0
 8000804:	f005 f848 	bl	8005898 <ILI9341_FillScreen>
                 ILI9341_DrawImage(0,0,320,35,bg_final_top);
 8000808:	4b42      	ldr	r3, [pc, #264]	@ (8000914 <handleInput+0x14c>)
 800080a:	9300      	str	r3, [sp, #0]
 800080c:	2323      	movs	r3, #35	@ 0x23
 800080e:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000812:	2100      	movs	r1, #0
 8000814:	2000      	movs	r0, #0
 8000816:	f005 f851 	bl	80058bc <ILI9341_DrawImage>
                 ILI9341_DrawImage(0,205,320,35,bg_final_bottom);
 800081a:	4b3f      	ldr	r3, [pc, #252]	@ (8000918 <handleInput+0x150>)
 800081c:	9300      	str	r3, [sp, #0]
 800081e:	2323      	movs	r3, #35	@ 0x23
 8000820:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000824:	21cd      	movs	r1, #205	@ 0xcd
 8000826:	2000      	movs	r0, #0
 8000828:	f005 f848 	bl	80058bc <ILI9341_DrawImage>
                 ILI9341_DrawImage(0,35,47,170,bg_final_left);
 800082c:	4b3b      	ldr	r3, [pc, #236]	@ (800091c <handleInput+0x154>)
 800082e:	9300      	str	r3, [sp, #0]
 8000830:	23aa      	movs	r3, #170	@ 0xaa
 8000832:	222f      	movs	r2, #47	@ 0x2f
 8000834:	2123      	movs	r1, #35	@ 0x23
 8000836:	2000      	movs	r0, #0
 8000838:	f005 f840 	bl	80058bc <ILI9341_DrawImage>
                 ILI9341_DrawImage(274,35,46,170,bg_final_right);
 800083c:	4b38      	ldr	r3, [pc, #224]	@ (8000920 <handleInput+0x158>)
 800083e:	9300      	str	r3, [sp, #0]
 8000840:	23aa      	movs	r3, #170	@ 0xaa
 8000842:	222e      	movs	r2, #46	@ 0x2e
 8000844:	2123      	movs	r1, #35	@ 0x23
 8000846:	f44f 7089 	mov.w	r0, #274	@ 0x112
 800084a:	f005 f837 	bl	80058bc <ILI9341_DrawImage>
                currentState = STATE_GAME_SNAKE;
 800084e:	4b2e      	ldr	r3, [pc, #184]	@ (8000908 <handleInput+0x140>)
 8000850:	2202      	movs	r2, #2
 8000852:	601a      	str	r2, [r3, #0]
                SNAKE_Init();
 8000854:	f000 fe92 	bl	800157c <SNAKE_Init>
 8000858:	e036      	b.n	80008c8 <handleInput+0x100>
            } else if (menuSelection == 1) {
 800085a:	4b2c      	ldr	r3, [pc, #176]	@ (800090c <handleInput+0x144>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	2b01      	cmp	r3, #1
 8000860:	d132      	bne.n	80008c8 <handleInput+0x100>
                currentState = STATE_GAME_PONG;
 8000862:	4b29      	ldr	r3, [pc, #164]	@ (8000908 <handleInput+0x140>)
 8000864:	2203      	movs	r2, #3
 8000866:	601a      	str	r2, [r3, #0]
                ILI9341_FillScreen(ILI9341_BLACK);
 8000868:	2000      	movs	r0, #0
 800086a:	f005 f815 	bl	8005898 <ILI9341_FillScreen>
                PingPong_Init();
 800086e:	f001 f919 	bl	8001aa4 <PingPong_Init>
 8000872:	e029      	b.n	80008c8 <handleInput+0x100>
            }
        } else if (currentState == STATE_GAME_OVER) {
 8000874:	4b24      	ldr	r3, [pc, #144]	@ (8000908 <handleInput+0x140>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	2b04      	cmp	r3, #4
 800087a:	d105      	bne.n	8000888 <handleInput+0xc0>
            currentState = STATE_MENU;
 800087c:	4b22      	ldr	r3, [pc, #136]	@ (8000908 <handleInput+0x140>)
 800087e:	2201      	movs	r2, #1
 8000880:	601a      	str	r2, [r3, #0]
            drawMenuScreen();
 8000882:	f7ff feff 	bl	8000684 <drawMenuScreen>
 8000886:	e01f      	b.n	80008c8 <handleInput+0x100>
        } else {
            isMpuControl = !isMpuControl;
 8000888:	4b26      	ldr	r3, [pc, #152]	@ (8000924 <handleInput+0x15c>)
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	b2db      	uxtb	r3, r3
 800088e:	2b00      	cmp	r3, #0
 8000890:	bf14      	ite	ne
 8000892:	2301      	movne	r3, #1
 8000894:	2300      	moveq	r3, #0
 8000896:	b2db      	uxtb	r3, r3
 8000898:	f083 0301 	eor.w	r3, r3, #1
 800089c:	b2db      	uxtb	r3, r3
 800089e:	f003 0301 	and.w	r3, r3, #1
 80008a2:	b2da      	uxtb	r2, r3
 80008a4:	4b1f      	ldr	r3, [pc, #124]	@ (8000924 <handleInput+0x15c>)
 80008a6:	701a      	strb	r2, [r3, #0]
            if (isMpuControl) {
 80008a8:	4b1e      	ldr	r3, [pc, #120]	@ (8000924 <handleInput+0x15c>)
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	b2db      	uxtb	r3, r3
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d005      	beq.n	80008be <handleInput+0xf6>
                HAL_GPIO_WritePin(MPU_LED_PORT, MPU_LED_PIN, GPIO_PIN_SET);
 80008b2:	2201      	movs	r2, #1
 80008b4:	2104      	movs	r1, #4
 80008b6:	481c      	ldr	r0, [pc, #112]	@ (8000928 <handleInput+0x160>)
 80008b8:	f002 fad4 	bl	8002e64 <HAL_GPIO_WritePin>
 80008bc:	e004      	b.n	80008c8 <handleInput+0x100>
            } else {
                HAL_GPIO_WritePin(MPU_LED_PORT, MPU_LED_PIN, GPIO_PIN_RESET);
 80008be:	2200      	movs	r2, #0
 80008c0:	2104      	movs	r1, #4
 80008c2:	4819      	ldr	r0, [pc, #100]	@ (8000928 <handleInput+0x160>)
 80008c4:	f002 face 	bl	8002e64 <HAL_GPIO_WritePin>
            }
        }
    }

    if (currentState == STATE_MENU) {
 80008c8:	4b0f      	ldr	r3, [pc, #60]	@ (8000908 <handleInput+0x140>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	2b01      	cmp	r3, #1
 80008ce:	d115      	bne.n	80008fc <handleInput+0x134>
        uint16_t xVal = getADC(JOYSTICK_X_ADC_CHANNEL);
 80008d0:	2004      	movs	r0, #4
 80008d2:	f000 f937 	bl	8000b44 <getADC>
 80008d6:	4603      	mov	r3, r0
 80008d8:	80fb      	strh	r3, [r7, #6]
        if (xVal < 4095 - JOYSTICK_THRESHOLD) { // Joystick UP
 80008da:	88fb      	ldrh	r3, [r7, #6]
 80008dc:	f240 2252 	movw	r2, #594	@ 0x252
 80008e0:	4293      	cmp	r3, r2
 80008e2:	d803      	bhi.n	80008ec <handleInput+0x124>
            menuSelection = 0;
 80008e4:	4b09      	ldr	r3, [pc, #36]	@ (800090c <handleInput+0x144>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	601a      	str	r2, [r3, #0]
        } else if (xVal > JOYSTICK_THRESHOLD) { // Joystick DOWN
            menuSelection = 1;
        }
    }
}
 80008ea:	e007      	b.n	80008fc <handleInput+0x134>
        } else if (xVal > JOYSTICK_THRESHOLD) { // Joystick DOWN
 80008ec:	88fb      	ldrh	r3, [r7, #6]
 80008ee:	f640 52ac 	movw	r2, #3500	@ 0xdac
 80008f2:	4293      	cmp	r3, r2
 80008f4:	d902      	bls.n	80008fc <handleInput+0x134>
            menuSelection = 1;
 80008f6:	4b05      	ldr	r3, [pc, #20]	@ (800090c <handleInput+0x144>)
 80008f8:	2201      	movs	r2, #1
 80008fa:	601a      	str	r2, [r3, #0]
}
 80008fc:	bf00      	nop
 80008fe:	3708      	adds	r7, #8
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	40020800 	.word	0x40020800
 8000908:	200000a0 	.word	0x200000a0
 800090c:	200000a4 	.word	0x200000a4
 8000910:	08009dc0 	.word	0x08009dc0
 8000914:	080509c0 	.word	0x080509c0
 8000918:	08056140 	.word	0x08056140
 800091c:	0805b8c0 	.word	0x0805b8c0
 8000920:	0805f72c 	.word	0x0805f72c
 8000924:	200000a8 	.word	0x200000a8
 8000928:	40021000 	.word	0x40021000

0800092c <isButtonHeld>:
bool isButtonHeld(GPIO_TypeDef *port, uint16_t pin) {
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
 8000934:	460b      	mov	r3, r1
 8000936:	807b      	strh	r3, [r7, #2]
    return (HAL_GPIO_ReadPin(port, pin) == GPIO_PIN_RESET);
 8000938:	887b      	ldrh	r3, [r7, #2]
 800093a:	4619      	mov	r1, r3
 800093c:	6878      	ldr	r0, [r7, #4]
 800093e:	f002 fa79 	bl	8002e34 <HAL_GPIO_ReadPin>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	bf0c      	ite	eq
 8000948:	2301      	moveq	r3, #1
 800094a:	2300      	movne	r3, #0
 800094c:	b2db      	uxtb	r3, r3
}
 800094e:	4618      	mov	r0, r3
 8000950:	3708      	adds	r7, #8
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
	...

08000958 <runSnakeGame>:
void runSnakeGame(void) {
 8000958:	b580      	push	{r7, lr}
 800095a:	b084      	sub	sp, #16
 800095c:	af02      	add	r7, sp, #8
    if (SNAKE_getOver()) {
 800095e:	f001 f869 	bl	8001a34 <SNAKE_getOver>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d019      	beq.n	800099c <runSnakeGame+0x44>
    	ILI9341_FillScreen(ILI9341_BLACK);
 8000968:	2000      	movs	r0, #0
 800096a:	f004 ff95 	bl	8005898 <ILI9341_FillScreen>
    	ILI9341_DrawImage(40, 0, 240, 240, snake_outro);
 800096e:	4b42      	ldr	r3, [pc, #264]	@ (8000a78 <runSnakeGame+0x120>)
 8000970:	9300      	str	r3, [sp, #0]
 8000972:	23f0      	movs	r3, #240	@ 0xf0
 8000974:	22f0      	movs	r2, #240	@ 0xf0
 8000976:	2100      	movs	r1, #0
 8000978:	2028      	movs	r0, #40	@ 0x28
 800097a:	f004 ff9f 	bl	80058bc <ILI9341_DrawImage>
    	HAL_Delay(500);
 800097e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000982:	f001 fbb1 	bl	80020e8 <HAL_Delay>
        if(isButtonHeld(JOYSTICK_BUTTON_PORT,JOYSTICK_BUTTON_PIN)) currentState = STATE_MENU;
 8000986:	2110      	movs	r1, #16
 8000988:	483c      	ldr	r0, [pc, #240]	@ (8000a7c <runSnakeGame+0x124>)
 800098a:	f7ff ffcf 	bl	800092c <isButtonHeld>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d06c      	beq.n	8000a6e <runSnakeGame+0x116>
 8000994:	4b3a      	ldr	r3, [pc, #232]	@ (8000a80 <runSnakeGame+0x128>)
 8000996:	2201      	movs	r2, #1
 8000998:	601a      	str	r2, [r3, #0]
        return;
 800099a:	e068      	b.n	8000a6e <runSnakeGame+0x116>
    }

    int direction ;
    if (first_snake_dir){
 800099c:	4b39      	ldr	r3, [pc, #228]	@ (8000a84 <runSnakeGame+0x12c>)
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	b2db      	uxtb	r3, r3
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d004      	beq.n	80009b0 <runSnakeGame+0x58>
    	direction = 1;
 80009a6:	2301      	movs	r3, #1
 80009a8:	607b      	str	r3, [r7, #4]
    	first_snake_dir = false;
 80009aa:	4b36      	ldr	r3, [pc, #216]	@ (8000a84 <runSnakeGame+0x12c>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	701a      	strb	r2, [r3, #0]
    }
    if (isMpuControl) {
 80009b0:	4b35      	ldr	r3, [pc, #212]	@ (8000a88 <runSnakeGame+0x130>)
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d025      	beq.n	8000a06 <runSnakeGame+0xae>
        MPU6050_Read_Accel(&mpu_x, &mpu_y, &mpu_z);
 80009ba:	4a34      	ldr	r2, [pc, #208]	@ (8000a8c <runSnakeGame+0x134>)
 80009bc:	4934      	ldr	r1, [pc, #208]	@ (8000a90 <runSnakeGame+0x138>)
 80009be:	4835      	ldr	r0, [pc, #212]	@ (8000a94 <runSnakeGame+0x13c>)
 80009c0:	f001 fad8 	bl	8001f74 <MPU6050_Read_Accel>
        if (mpu_x > MPU_ACCEL_X_UP_THRESHOLD) direction = 2; // down
 80009c4:	4b33      	ldr	r3, [pc, #204]	@ (8000a94 <runSnakeGame+0x13c>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 80009cc:	4293      	cmp	r3, r2
 80009ce:	dd01      	ble.n	80009d4 <runSnakeGame+0x7c>
 80009d0:	2302      	movs	r3, #2
 80009d2:	607b      	str	r3, [r7, #4]
        if (mpu_x < MPU_ACCEL_X_DOWN_THRESHOLD) direction = 4; // up
 80009d4:	4b2f      	ldr	r3, [pc, #188]	@ (8000a94 <runSnakeGame+0x13c>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	f240 52db 	movw	r2, #1499	@ 0x5db
 80009dc:	4293      	cmp	r3, r2
 80009de:	dc01      	bgt.n	80009e4 <runSnakeGame+0x8c>
 80009e0:	2304      	movs	r3, #4
 80009e2:	607b      	str	r3, [r7, #4]
        if (mpu_y > MPU_ACCEL_Y_RIGHT_THRESHOLD) direction = 3; // left
 80009e4:	4b2a      	ldr	r3, [pc, #168]	@ (8000a90 <runSnakeGame+0x138>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 80009ec:	4293      	cmp	r3, r2
 80009ee:	dd01      	ble.n	80009f4 <runSnakeGame+0x9c>
 80009f0:	2303      	movs	r3, #3
 80009f2:	607b      	str	r3, [r7, #4]
        if (mpu_y < MPU_ACCEL_Y_LEFT_THRESHOLD) direction = 1; // right
 80009f4:	4b26      	ldr	r3, [pc, #152]	@ (8000a90 <runSnakeGame+0x138>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	f240 52db 	movw	r2, #1499	@ 0x5db
 80009fc:	4293      	cmp	r3, r2
 80009fe:	dc28      	bgt.n	8000a52 <runSnakeGame+0xfa>
 8000a00:	2301      	movs	r3, #1
 8000a02:	607b      	str	r3, [r7, #4]
 8000a04:	e025      	b.n	8000a52 <runSnakeGame+0xfa>
    } else {
        uint16_t xVal = getADC(JOYSTICK_X_ADC_CHANNEL);
 8000a06:	2004      	movs	r0, #4
 8000a08:	f000 f89c 	bl	8000b44 <getADC>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	807b      	strh	r3, [r7, #2]
        uint16_t yVal = getADC(JOYSTICK_Y_ADC_CHANNEL);
 8000a10:	2006      	movs	r0, #6
 8000a12:	f000 f897 	bl	8000b44 <getADC>
 8000a16:	4603      	mov	r3, r0
 8000a18:	803b      	strh	r3, [r7, #0]

        if (xVal > JOYSTICK_THRESHOLD) direction = 2;
 8000a1a:	887b      	ldrh	r3, [r7, #2]
 8000a1c:	f640 52ac 	movw	r2, #3500	@ 0xdac
 8000a20:	4293      	cmp	r3, r2
 8000a22:	d901      	bls.n	8000a28 <runSnakeGame+0xd0>
 8000a24:	2302      	movs	r3, #2
 8000a26:	607b      	str	r3, [r7, #4]
        if (xVal < 4095 - JOYSTICK_THRESHOLD) direction = 4;
 8000a28:	887b      	ldrh	r3, [r7, #2]
 8000a2a:	f240 2252 	movw	r2, #594	@ 0x252
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d801      	bhi.n	8000a36 <runSnakeGame+0xde>
 8000a32:	2304      	movs	r3, #4
 8000a34:	607b      	str	r3, [r7, #4]
        if (yVal > JOYSTICK_THRESHOLD) direction = 3;
 8000a36:	883b      	ldrh	r3, [r7, #0]
 8000a38:	f640 52ac 	movw	r2, #3500	@ 0xdac
 8000a3c:	4293      	cmp	r3, r2
 8000a3e:	d901      	bls.n	8000a44 <runSnakeGame+0xec>
 8000a40:	2303      	movs	r3, #3
 8000a42:	607b      	str	r3, [r7, #4]
        if (yVal < 4095 - JOYSTICK_THRESHOLD) direction = 1;
 8000a44:	883b      	ldrh	r3, [r7, #0]
 8000a46:	f240 2252 	movw	r2, #594	@ 0x252
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d801      	bhi.n	8000a52 <runSnakeGame+0xfa>
 8000a4e:	2301      	movs	r3, #1
 8000a50:	607b      	str	r3, [r7, #4]
    }

    if (direction != 0) {
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d002      	beq.n	8000a5e <runSnakeGame+0x106>
        SNAKE_ChangeDirection(direction);
 8000a58:	6878      	ldr	r0, [r7, #4]
 8000a5a:	f000 ffb9 	bl	80019d0 <SNAKE_ChangeDirection>
    }

    SNAKE_updateGame();
 8000a5e:	f000 fdc9 	bl	80015f4 <SNAKE_updateGame>
    SNAKE_drawGame();
 8000a62:	f000 fea7 	bl	80017b4 <SNAKE_drawGame>
    HAL_Delay(100);
 8000a66:	2064      	movs	r0, #100	@ 0x64
 8000a68:	f001 fb3e 	bl	80020e8 <HAL_Delay>
 8000a6c:	e000      	b.n	8000a70 <runSnakeGame+0x118>
        return;
 8000a6e:	bf00      	nop
}
 8000a70:	3708      	adds	r7, #8
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	08025fc0 	.word	0x08025fc0
 8000a7c:	40020800 	.word	0x40020800
 8000a80:	200000a0 	.word	0x200000a0
 8000a84:	20000000 	.word	0x20000000
 8000a88:	200000a8 	.word	0x200000a8
 8000a8c:	200000b4 	.word	0x200000b4
 8000a90:	200000b0 	.word	0x200000b0
 8000a94:	200000ac 	.word	0x200000ac

08000a98 <runPingPongGame>:
void runPingPongGame(void) {
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
    if (PingPong_IsGameOver()) {
 8000a9e:	f001 f9f9 	bl	8001e94 <PingPong_IsGameOver>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d003      	beq.n	8000ab0 <runPingPongGame+0x18>
        currentState = STATE_GAME_OVER;
 8000aa8:	4b21      	ldr	r3, [pc, #132]	@ (8000b30 <runPingPongGame+0x98>)
 8000aaa:	2204      	movs	r2, #4
 8000aac:	601a      	str	r2, [r3, #0]
        return;
 8000aae:	e03c      	b.n	8000b2a <runPingPongGame+0x92>
    }

    bool upPressed = false;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	71fb      	strb	r3, [r7, #7]
    bool downPressed = false;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	71bb      	strb	r3, [r7, #6]

    if (isMpuControl) {
 8000ab8:	4b1e      	ldr	r3, [pc, #120]	@ (8000b34 <runPingPongGame+0x9c>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	b2db      	uxtb	r3, r3
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d015      	beq.n	8000aee <runPingPongGame+0x56>
        MPU6050_Read_Accel(&mpu_x, &mpu_y, &mpu_z);
 8000ac2:	4a1d      	ldr	r2, [pc, #116]	@ (8000b38 <runPingPongGame+0xa0>)
 8000ac4:	491d      	ldr	r1, [pc, #116]	@ (8000b3c <runPingPongGame+0xa4>)
 8000ac6:	481e      	ldr	r0, [pc, #120]	@ (8000b40 <runPingPongGame+0xa8>)
 8000ac8:	f001 fa54 	bl	8001f74 <MPU6050_Read_Accel>
        if (mpu_x > MPU_ACCEL_X_UP_THRESHOLD) downPressed = true;
 8000acc:	4b1c      	ldr	r3, [pc, #112]	@ (8000b40 <runPingPongGame+0xa8>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8000ad4:	4293      	cmp	r3, r2
 8000ad6:	dd01      	ble.n	8000adc <runPingPongGame+0x44>
 8000ad8:	2301      	movs	r3, #1
 8000ada:	71bb      	strb	r3, [r7, #6]
        if (mpu_x < MPU_ACCEL_X_DOWN_THRESHOLD) upPressed = true;
 8000adc:	4b18      	ldr	r3, [pc, #96]	@ (8000b40 <runPingPongGame+0xa8>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	f240 52db 	movw	r2, #1499	@ 0x5db
 8000ae4:	4293      	cmp	r3, r2
 8000ae6:	dc15      	bgt.n	8000b14 <runPingPongGame+0x7c>
 8000ae8:	2301      	movs	r3, #1
 8000aea:	71fb      	strb	r3, [r7, #7]
 8000aec:	e012      	b.n	8000b14 <runPingPongGame+0x7c>
    } else {
        uint16_t xVal = getADC(JOYSTICK_X_ADC_CHANNEL);
 8000aee:	2004      	movs	r0, #4
 8000af0:	f000 f828 	bl	8000b44 <getADC>
 8000af4:	4603      	mov	r3, r0
 8000af6:	80bb      	strh	r3, [r7, #4]
        if (xVal > JOYSTICK_THRESHOLD) downPressed = true;
 8000af8:	88bb      	ldrh	r3, [r7, #4]
 8000afa:	f640 52ac 	movw	r2, #3500	@ 0xdac
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d901      	bls.n	8000b06 <runPingPongGame+0x6e>
 8000b02:	2301      	movs	r3, #1
 8000b04:	71bb      	strb	r3, [r7, #6]
        if (xVal < 4095 - JOYSTICK_THRESHOLD) upPressed = true;
 8000b06:	88bb      	ldrh	r3, [r7, #4]
 8000b08:	f240 2252 	movw	r2, #594	@ 0x252
 8000b0c:	4293      	cmp	r3, r2
 8000b0e:	d801      	bhi.n	8000b14 <runPingPongGame+0x7c>
 8000b10:	2301      	movs	r3, #1
 8000b12:	71fb      	strb	r3, [r7, #7]
    }

    PingPong_Update(upPressed, downPressed);
 8000b14:	79ba      	ldrb	r2, [r7, #6]
 8000b16:	79fb      	ldrb	r3, [r7, #7]
 8000b18:	4611      	mov	r1, r2
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f000 fffc 	bl	8001b18 <PingPong_Update>
    PingPong_Draw();
 8000b20:	f001 f930 	bl	8001d84 <PingPong_Draw>
    HAL_Delay(20);
 8000b24:	2014      	movs	r0, #20
 8000b26:	f001 fadf 	bl	80020e8 <HAL_Delay>
}
 8000b2a:	3708      	adds	r7, #8
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	200000a0 	.word	0x200000a0
 8000b34:	200000a8 	.word	0x200000a8
 8000b38:	200000b4 	.word	0x200000b4
 8000b3c:	200000b0 	.word	0x200000b0
 8000b40:	200000ac 	.word	0x200000ac

08000b44 <getADC>:

uint16_t getADC(uint32_t channel){
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b088      	sub	sp, #32
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
    ADC_ChannelConfTypeDef adc_confg = {0};
 8000b4c:	f107 030c 	add.w	r3, r7, #12
 8000b50:	2200      	movs	r2, #0
 8000b52:	601a      	str	r2, [r3, #0]
 8000b54:	605a      	str	r2, [r3, #4]
 8000b56:	609a      	str	r2, [r3, #8]
 8000b58:	60da      	str	r2, [r3, #12]
    adc_confg.Channel = channel;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	60fb      	str	r3, [r7, #12]
    adc_confg.Rank = 1;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	613b      	str	r3, [r7, #16]
    adc_confg.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8000b62:	2303      	movs	r3, #3
 8000b64:	617b      	str	r3, [r7, #20]
    HAL_ADC_ConfigChannel(&hadc1,&adc_confg);
 8000b66:	f107 030c 	add.w	r3, r7, #12
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	480b      	ldr	r0, [pc, #44]	@ (8000b9c <getADC+0x58>)
 8000b6e:	f001 fcc1 	bl	80024f4 <HAL_ADC_ConfigChannel>
    HAL_ADC_Start(&hadc1);
 8000b72:	480a      	ldr	r0, [pc, #40]	@ (8000b9c <getADC+0x58>)
 8000b74:	f001 fb20 	bl	80021b8 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1 , HAL_MAX_DELAY);
 8000b78:	f04f 31ff 	mov.w	r1, #4294967295
 8000b7c:	4807      	ldr	r0, [pc, #28]	@ (8000b9c <getADC+0x58>)
 8000b7e:	f001 fc20 	bl	80023c2 <HAL_ADC_PollForConversion>
    uint16_t val = HAL_ADC_GetValue(&hadc1);
 8000b82:	4806      	ldr	r0, [pc, #24]	@ (8000b9c <getADC+0x58>)
 8000b84:	f001 fca8 	bl	80024d8 <HAL_ADC_GetValue>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	83fb      	strh	r3, [r7, #30]
    HAL_ADC_Stop(&hadc1);
 8000b8c:	4803      	ldr	r0, [pc, #12]	@ (8000b9c <getADC+0x58>)
 8000b8e:	f001 fbe5 	bl	800235c <HAL_ADC_Stop>
    return val;
 8000b92:	8bfb      	ldrh	r3, [r7, #30]
}
 8000b94:	4618      	mov	r0, r3
 8000b96:	3720      	adds	r7, #32
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	200000b8 	.word	0x200000b8

08000ba0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b094      	sub	sp, #80	@ 0x50
 8000ba4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ba6:	f107 0320 	add.w	r3, r7, #32
 8000baa:	2230      	movs	r2, #48	@ 0x30
 8000bac:	2100      	movs	r1, #0
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f005 f83d 	bl	8005c2e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bb4:	f107 030c 	add.w	r3, r7, #12
 8000bb8:	2200      	movs	r2, #0
 8000bba:	601a      	str	r2, [r3, #0]
 8000bbc:	605a      	str	r2, [r3, #4]
 8000bbe:	609a      	str	r2, [r3, #8]
 8000bc0:	60da      	str	r2, [r3, #12]
 8000bc2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	60bb      	str	r3, [r7, #8]
 8000bc8:	4b22      	ldr	r3, [pc, #136]	@ (8000c54 <SystemClock_Config+0xb4>)
 8000bca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bcc:	4a21      	ldr	r2, [pc, #132]	@ (8000c54 <SystemClock_Config+0xb4>)
 8000bce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bd2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bd4:	4b1f      	ldr	r3, [pc, #124]	@ (8000c54 <SystemClock_Config+0xb4>)
 8000bd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bd8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bdc:	60bb      	str	r3, [r7, #8]
 8000bde:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000be0:	2300      	movs	r3, #0
 8000be2:	607b      	str	r3, [r7, #4]
 8000be4:	4b1c      	ldr	r3, [pc, #112]	@ (8000c58 <SystemClock_Config+0xb8>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a1b      	ldr	r2, [pc, #108]	@ (8000c58 <SystemClock_Config+0xb8>)
 8000bea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bee:	6013      	str	r3, [r2, #0]
 8000bf0:	4b19      	ldr	r3, [pc, #100]	@ (8000c58 <SystemClock_Config+0xb8>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bf8:	607b      	str	r3, [r7, #4]
 8000bfa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c00:	2301      	movs	r3, #1
 8000c02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c04:	2310      	movs	r3, #16
 8000c06:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c0c:	f107 0320 	add.w	r3, r7, #32
 8000c10:	4618      	mov	r0, r3
 8000c12:	f003 f965 	bl	8003ee0 <HAL_RCC_OscConfig>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000c1c:	f000 f9a8 	bl	8000f70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c20:	230f      	movs	r3, #15
 8000c22:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c24:	2300      	movs	r3, #0
 8000c26:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c30:	2300      	movs	r3, #0
 8000c32:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c34:	f107 030c 	add.w	r3, r7, #12
 8000c38:	2100      	movs	r1, #0
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f003 fbc8 	bl	80043d0 <HAL_RCC_ClockConfig>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000c46:	f000 f993 	bl	8000f70 <Error_Handler>
  }
}
 8000c4a:	bf00      	nop
 8000c4c:	3750      	adds	r7, #80	@ 0x50
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	40023800 	.word	0x40023800
 8000c58:	40007000 	.word	0x40007000

08000c5c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b084      	sub	sp, #16
 8000c60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c62:	463b      	mov	r3, r7
 8000c64:	2200      	movs	r2, #0
 8000c66:	601a      	str	r2, [r3, #0]
 8000c68:	605a      	str	r2, [r3, #4]
 8000c6a:	609a      	str	r2, [r3, #8]
 8000c6c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000c6e:	4b21      	ldr	r3, [pc, #132]	@ (8000cf4 <MX_ADC1_Init+0x98>)
 8000c70:	4a21      	ldr	r2, [pc, #132]	@ (8000cf8 <MX_ADC1_Init+0x9c>)
 8000c72:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000c74:	4b1f      	ldr	r3, [pc, #124]	@ (8000cf4 <MX_ADC1_Init+0x98>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c7a:	4b1e      	ldr	r3, [pc, #120]	@ (8000cf4 <MX_ADC1_Init+0x98>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000c80:	4b1c      	ldr	r3, [pc, #112]	@ (8000cf4 <MX_ADC1_Init+0x98>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c86:	4b1b      	ldr	r3, [pc, #108]	@ (8000cf4 <MX_ADC1_Init+0x98>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c8c:	4b19      	ldr	r3, [pc, #100]	@ (8000cf4 <MX_ADC1_Init+0x98>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c94:	4b17      	ldr	r3, [pc, #92]	@ (8000cf4 <MX_ADC1_Init+0x98>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c9a:	4b16      	ldr	r3, [pc, #88]	@ (8000cf4 <MX_ADC1_Init+0x98>)
 8000c9c:	4a17      	ldr	r2, [pc, #92]	@ (8000cfc <MX_ADC1_Init+0xa0>)
 8000c9e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ca0:	4b14      	ldr	r3, [pc, #80]	@ (8000cf4 <MX_ADC1_Init+0x98>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000ca6:	4b13      	ldr	r3, [pc, #76]	@ (8000cf4 <MX_ADC1_Init+0x98>)
 8000ca8:	2201      	movs	r2, #1
 8000caa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000cac:	4b11      	ldr	r3, [pc, #68]	@ (8000cf4 <MX_ADC1_Init+0x98>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cb4:	4b0f      	ldr	r3, [pc, #60]	@ (8000cf4 <MX_ADC1_Init+0x98>)
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cba:	480e      	ldr	r0, [pc, #56]	@ (8000cf4 <MX_ADC1_Init+0x98>)
 8000cbc:	f001 fa38 	bl	8002130 <HAL_ADC_Init>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000cc6:	f000 f953 	bl	8000f70 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000cca:	2304      	movs	r3, #4
 8000ccc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cd6:	463b      	mov	r3, r7
 8000cd8:	4619      	mov	r1, r3
 8000cda:	4806      	ldr	r0, [pc, #24]	@ (8000cf4 <MX_ADC1_Init+0x98>)
 8000cdc:	f001 fc0a 	bl	80024f4 <HAL_ADC_ConfigChannel>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000ce6:	f000 f943 	bl	8000f70 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000cea:	bf00      	nop
 8000cec:	3710      	adds	r7, #16
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	200000b8 	.word	0x200000b8
 8000cf8:	40012000 	.word	0x40012000
 8000cfc:	0f000001 	.word	0x0f000001

08000d00 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000d04:	4b12      	ldr	r3, [pc, #72]	@ (8000d50 <MX_I2C2_Init+0x50>)
 8000d06:	4a13      	ldr	r2, [pc, #76]	@ (8000d54 <MX_I2C2_Init+0x54>)
 8000d08:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000d0a:	4b11      	ldr	r3, [pc, #68]	@ (8000d50 <MX_I2C2_Init+0x50>)
 8000d0c:	4a12      	ldr	r2, [pc, #72]	@ (8000d58 <MX_I2C2_Init+0x58>)
 8000d0e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d10:	4b0f      	ldr	r3, [pc, #60]	@ (8000d50 <MX_I2C2_Init+0x50>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000d16:	4b0e      	ldr	r3, [pc, #56]	@ (8000d50 <MX_I2C2_Init+0x50>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000d50 <MX_I2C2_Init+0x50>)
 8000d1e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000d22:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d24:	4b0a      	ldr	r3, [pc, #40]	@ (8000d50 <MX_I2C2_Init+0x50>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000d2a:	4b09      	ldr	r3, [pc, #36]	@ (8000d50 <MX_I2C2_Init+0x50>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d30:	4b07      	ldr	r3, [pc, #28]	@ (8000d50 <MX_I2C2_Init+0x50>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d36:	4b06      	ldr	r3, [pc, #24]	@ (8000d50 <MX_I2C2_Init+0x50>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000d3c:	4804      	ldr	r0, [pc, #16]	@ (8000d50 <MX_I2C2_Init+0x50>)
 8000d3e:	f002 f8ab 	bl	8002e98 <HAL_I2C_Init>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000d48:	f000 f912 	bl	8000f70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000d4c:	bf00      	nop
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	20000100 	.word	0x20000100
 8000d54:	40005800 	.word	0x40005800
 8000d58:	000186a0 	.word	0x000186a0

08000d5c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000d60:	4b17      	ldr	r3, [pc, #92]	@ (8000dc0 <MX_SPI2_Init+0x64>)
 8000d62:	4a18      	ldr	r2, [pc, #96]	@ (8000dc4 <MX_SPI2_Init+0x68>)
 8000d64:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000d66:	4b16      	ldr	r3, [pc, #88]	@ (8000dc0 <MX_SPI2_Init+0x64>)
 8000d68:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000d6c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000d6e:	4b14      	ldr	r3, [pc, #80]	@ (8000dc0 <MX_SPI2_Init+0x64>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d74:	4b12      	ldr	r3, [pc, #72]	@ (8000dc0 <MX_SPI2_Init+0x64>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d7a:	4b11      	ldr	r3, [pc, #68]	@ (8000dc0 <MX_SPI2_Init+0x64>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d80:	4b0f      	ldr	r3, [pc, #60]	@ (8000dc0 <MX_SPI2_Init+0x64>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000d86:	4b0e      	ldr	r3, [pc, #56]	@ (8000dc0 <MX_SPI2_Init+0x64>)
 8000d88:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d8c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d8e:	4b0c      	ldr	r3, [pc, #48]	@ (8000dc0 <MX_SPI2_Init+0x64>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d94:	4b0a      	ldr	r3, [pc, #40]	@ (8000dc0 <MX_SPI2_Init+0x64>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d9a:	4b09      	ldr	r3, [pc, #36]	@ (8000dc0 <MX_SPI2_Init+0x64>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000da0:	4b07      	ldr	r3, [pc, #28]	@ (8000dc0 <MX_SPI2_Init+0x64>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000da6:	4b06      	ldr	r3, [pc, #24]	@ (8000dc0 <MX_SPI2_Init+0x64>)
 8000da8:	220a      	movs	r2, #10
 8000daa:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000dac:	4804      	ldr	r0, [pc, #16]	@ (8000dc0 <MX_SPI2_Init+0x64>)
 8000dae:	f003 fcef 	bl	8004790 <HAL_SPI_Init>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000db8:	f000 f8da 	bl	8000f70 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000dbc:	bf00      	nop
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	20000154 	.word	0x20000154
 8000dc4:	40003800 	.word	0x40003800

08000dc8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000dcc:	4b11      	ldr	r3, [pc, #68]	@ (8000e14 <MX_UART4_Init+0x4c>)
 8000dce:	4a12      	ldr	r2, [pc, #72]	@ (8000e18 <MX_UART4_Init+0x50>)
 8000dd0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000dd2:	4b10      	ldr	r3, [pc, #64]	@ (8000e14 <MX_UART4_Init+0x4c>)
 8000dd4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000dd8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000dda:	4b0e      	ldr	r3, [pc, #56]	@ (8000e14 <MX_UART4_Init+0x4c>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000de0:	4b0c      	ldr	r3, [pc, #48]	@ (8000e14 <MX_UART4_Init+0x4c>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000de6:	4b0b      	ldr	r3, [pc, #44]	@ (8000e14 <MX_UART4_Init+0x4c>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000dec:	4b09      	ldr	r3, [pc, #36]	@ (8000e14 <MX_UART4_Init+0x4c>)
 8000dee:	220c      	movs	r2, #12
 8000df0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000df2:	4b08      	ldr	r3, [pc, #32]	@ (8000e14 <MX_UART4_Init+0x4c>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000df8:	4b06      	ldr	r3, [pc, #24]	@ (8000e14 <MX_UART4_Init+0x4c>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000dfe:	4805      	ldr	r0, [pc, #20]	@ (8000e14 <MX_UART4_Init+0x4c>)
 8000e00:	f003 ff70 	bl	8004ce4 <HAL_UART_Init>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000e0a:	f000 f8b1 	bl	8000f70 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000e0e:	bf00      	nop
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	200001ac 	.word	0x200001ac
 8000e18:	40004c00 	.word	0x40004c00

08000e1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b08a      	sub	sp, #40	@ 0x28
 8000e20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e22:	f107 0314 	add.w	r3, r7, #20
 8000e26:	2200      	movs	r2, #0
 8000e28:	601a      	str	r2, [r3, #0]
 8000e2a:	605a      	str	r2, [r3, #4]
 8000e2c:	609a      	str	r2, [r3, #8]
 8000e2e:	60da      	str	r2, [r3, #12]
 8000e30:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e32:	2300      	movs	r3, #0
 8000e34:	613b      	str	r3, [r7, #16]
 8000e36:	4b4a      	ldr	r3, [pc, #296]	@ (8000f60 <MX_GPIO_Init+0x144>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e3a:	4a49      	ldr	r2, [pc, #292]	@ (8000f60 <MX_GPIO_Init+0x144>)
 8000e3c:	f043 0310 	orr.w	r3, r3, #16
 8000e40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e42:	4b47      	ldr	r3, [pc, #284]	@ (8000f60 <MX_GPIO_Init+0x144>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e46:	f003 0310 	and.w	r3, r3, #16
 8000e4a:	613b      	str	r3, [r7, #16]
 8000e4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e4e:	2300      	movs	r3, #0
 8000e50:	60fb      	str	r3, [r7, #12]
 8000e52:	4b43      	ldr	r3, [pc, #268]	@ (8000f60 <MX_GPIO_Init+0x144>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e56:	4a42      	ldr	r2, [pc, #264]	@ (8000f60 <MX_GPIO_Init+0x144>)
 8000e58:	f043 0304 	orr.w	r3, r3, #4
 8000e5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e5e:	4b40      	ldr	r3, [pc, #256]	@ (8000f60 <MX_GPIO_Init+0x144>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e62:	f003 0304 	and.w	r3, r3, #4
 8000e66:	60fb      	str	r3, [r7, #12]
 8000e68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	60bb      	str	r3, [r7, #8]
 8000e6e:	4b3c      	ldr	r3, [pc, #240]	@ (8000f60 <MX_GPIO_Init+0x144>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e72:	4a3b      	ldr	r2, [pc, #236]	@ (8000f60 <MX_GPIO_Init+0x144>)
 8000e74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e7a:	4b39      	ldr	r3, [pc, #228]	@ (8000f60 <MX_GPIO_Init+0x144>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e82:	60bb      	str	r3, [r7, #8]
 8000e84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e86:	2300      	movs	r3, #0
 8000e88:	607b      	str	r3, [r7, #4]
 8000e8a:	4b35      	ldr	r3, [pc, #212]	@ (8000f60 <MX_GPIO_Init+0x144>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e8e:	4a34      	ldr	r2, [pc, #208]	@ (8000f60 <MX_GPIO_Init+0x144>)
 8000e90:	f043 0301 	orr.w	r3, r3, #1
 8000e94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e96:	4b32      	ldr	r3, [pc, #200]	@ (8000f60 <MX_GPIO_Init+0x144>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e9a:	f003 0301 	and.w	r3, r3, #1
 8000e9e:	607b      	str	r3, [r7, #4]
 8000ea0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	603b      	str	r3, [r7, #0]
 8000ea6:	4b2e      	ldr	r3, [pc, #184]	@ (8000f60 <MX_GPIO_Init+0x144>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eaa:	4a2d      	ldr	r2, [pc, #180]	@ (8000f60 <MX_GPIO_Init+0x144>)
 8000eac:	f043 0302 	orr.w	r3, r3, #2
 8000eb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eb2:	4b2b      	ldr	r3, [pc, #172]	@ (8000f60 <MX_GPIO_Init+0x144>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb6:	f003 0302 	and.w	r3, r3, #2
 8000eba:	603b      	str	r3, [r7, #0]
 8000ebc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4|GPIO_PIN_6, GPIO_PIN_RESET);
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	2150      	movs	r1, #80	@ 0x50
 8000ec2:	4828      	ldr	r0, [pc, #160]	@ (8000f64 <MX_GPIO_Init+0x148>)
 8000ec4:	f001 ffce 	bl	8002e64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000ec8:	2200      	movs	r2, #0
 8000eca:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ece:	4826      	ldr	r0, [pc, #152]	@ (8000f68 <MX_GPIO_Init+0x14c>)
 8000ed0:	f001 ffc8 	bl	8002e64 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE4 PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8000ed4:	2350      	movs	r3, #80	@ 0x50
 8000ed6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000edc:	2300      	movs	r3, #0
 8000ede:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ee4:	f107 0314 	add.w	r3, r7, #20
 8000ee8:	4619      	mov	r1, r3
 8000eea:	481e      	ldr	r0, [pc, #120]	@ (8000f64 <MX_GPIO_Init+0x148>)
 8000eec:	f001 fe06 	bl	8002afc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000ef0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ef4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efa:	2300      	movs	r3, #0
 8000efc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efe:	2300      	movs	r3, #0
 8000f00:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f02:	f107 0314 	add.w	r3, r7, #20
 8000f06:	4619      	mov	r1, r3
 8000f08:	4817      	ldr	r0, [pc, #92]	@ (8000f68 <MX_GPIO_Init+0x14c>)
 8000f0a:	f001 fdf7 	bl	8002afc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000f0e:	2310      	movs	r3, #16
 8000f10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f12:	2300      	movs	r3, #0
 8000f14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f16:	2300      	movs	r3, #0
 8000f18:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f1a:	f107 0314 	add.w	r3, r7, #20
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4811      	ldr	r0, [pc, #68]	@ (8000f68 <MX_GPIO_Init+0x14c>)
 8000f22:	f001 fdeb 	bl	8002afc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 8000f26:	2305      	movs	r3, #5
 8000f28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f32:	f107 0314 	add.w	r3, r7, #20
 8000f36:	4619      	mov	r1, r3
 8000f38:	480c      	ldr	r0, [pc, #48]	@ (8000f6c <MX_GPIO_Init+0x150>)
 8000f3a:	f001 fddf 	bl	8002afc <HAL_GPIO_Init>

  /*Configure GPIO pins : PE8 PE10 PE12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_12;
 8000f3e:	f44f 53a8 	mov.w	r3, #5376	@ 0x1500
 8000f42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f44:	2300      	movs	r3, #0
 8000f46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f4c:	f107 0314 	add.w	r3, r7, #20
 8000f50:	4619      	mov	r1, r3
 8000f52:	4804      	ldr	r0, [pc, #16]	@ (8000f64 <MX_GPIO_Init+0x148>)
 8000f54:	f001 fdd2 	bl	8002afc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000f58:	bf00      	nop
 8000f5a:	3728      	adds	r7, #40	@ 0x28
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	40023800 	.word	0x40023800
 8000f64:	40021000 	.word	0x40021000
 8000f68:	40020800 	.word	0x40020800
 8000f6c:	40020400 	.word	0x40020400

08000f70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f74:	b672      	cpsid	i
}
 8000f76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f78:	bf00      	nop
 8000f7a:	e7fd      	b.n	8000f78 <Error_Handler+0x8>

08000f7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f82:	2300      	movs	r3, #0
 8000f84:	607b      	str	r3, [r7, #4]
 8000f86:	4b10      	ldr	r3, [pc, #64]	@ (8000fc8 <HAL_MspInit+0x4c>)
 8000f88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f8a:	4a0f      	ldr	r2, [pc, #60]	@ (8000fc8 <HAL_MspInit+0x4c>)
 8000f8c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f90:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f92:	4b0d      	ldr	r3, [pc, #52]	@ (8000fc8 <HAL_MspInit+0x4c>)
 8000f94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f9a:	607b      	str	r3, [r7, #4]
 8000f9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	603b      	str	r3, [r7, #0]
 8000fa2:	4b09      	ldr	r3, [pc, #36]	@ (8000fc8 <HAL_MspInit+0x4c>)
 8000fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fa6:	4a08      	ldr	r2, [pc, #32]	@ (8000fc8 <HAL_MspInit+0x4c>)
 8000fa8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fac:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fae:	4b06      	ldr	r3, [pc, #24]	@ (8000fc8 <HAL_MspInit+0x4c>)
 8000fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fb6:	603b      	str	r3, [r7, #0]
 8000fb8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fba:	bf00      	nop
 8000fbc:	370c      	adds	r7, #12
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	40023800 	.word	0x40023800

08000fcc <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b08a      	sub	sp, #40	@ 0x28
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd4:	f107 0314 	add.w	r3, r7, #20
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
 8000fdc:	605a      	str	r2, [r3, #4]
 8000fde:	609a      	str	r2, [r3, #8]
 8000fe0:	60da      	str	r2, [r3, #12]
 8000fe2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a17      	ldr	r2, [pc, #92]	@ (8001048 <HAL_ADC_MspInit+0x7c>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d127      	bne.n	800103e <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	613b      	str	r3, [r7, #16]
 8000ff2:	4b16      	ldr	r3, [pc, #88]	@ (800104c <HAL_ADC_MspInit+0x80>)
 8000ff4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ff6:	4a15      	ldr	r2, [pc, #84]	@ (800104c <HAL_ADC_MspInit+0x80>)
 8000ff8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ffc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ffe:	4b13      	ldr	r3, [pc, #76]	@ (800104c <HAL_ADC_MspInit+0x80>)
 8001000:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001002:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001006:	613b      	str	r3, [r7, #16]
 8001008:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800100a:	2300      	movs	r3, #0
 800100c:	60fb      	str	r3, [r7, #12]
 800100e:	4b0f      	ldr	r3, [pc, #60]	@ (800104c <HAL_ADC_MspInit+0x80>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001012:	4a0e      	ldr	r2, [pc, #56]	@ (800104c <HAL_ADC_MspInit+0x80>)
 8001014:	f043 0301 	orr.w	r3, r3, #1
 8001018:	6313      	str	r3, [r2, #48]	@ 0x30
 800101a:	4b0c      	ldr	r3, [pc, #48]	@ (800104c <HAL_ADC_MspInit+0x80>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800101e:	f003 0301 	and.w	r3, r3, #1
 8001022:	60fb      	str	r3, [r7, #12]
 8001024:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001026:	2350      	movs	r3, #80	@ 0x50
 8001028:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800102a:	2303      	movs	r3, #3
 800102c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102e:	2300      	movs	r3, #0
 8001030:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001032:	f107 0314 	add.w	r3, r7, #20
 8001036:	4619      	mov	r1, r3
 8001038:	4805      	ldr	r0, [pc, #20]	@ (8001050 <HAL_ADC_MspInit+0x84>)
 800103a:	f001 fd5f 	bl	8002afc <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800103e:	bf00      	nop
 8001040:	3728      	adds	r7, #40	@ 0x28
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	40012000 	.word	0x40012000
 800104c:	40023800 	.word	0x40023800
 8001050:	40020000 	.word	0x40020000

08001054 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b08a      	sub	sp, #40	@ 0x28
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800105c:	f107 0314 	add.w	r3, r7, #20
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	605a      	str	r2, [r3, #4]
 8001066:	609a      	str	r2, [r3, #8]
 8001068:	60da      	str	r2, [r3, #12]
 800106a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a19      	ldr	r2, [pc, #100]	@ (80010d8 <HAL_I2C_MspInit+0x84>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d12c      	bne.n	80010d0 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C2_MspInit 0 */

    /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001076:	2300      	movs	r3, #0
 8001078:	613b      	str	r3, [r7, #16]
 800107a:	4b18      	ldr	r3, [pc, #96]	@ (80010dc <HAL_I2C_MspInit+0x88>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800107e:	4a17      	ldr	r2, [pc, #92]	@ (80010dc <HAL_I2C_MspInit+0x88>)
 8001080:	f043 0302 	orr.w	r3, r3, #2
 8001084:	6313      	str	r3, [r2, #48]	@ 0x30
 8001086:	4b15      	ldr	r3, [pc, #84]	@ (80010dc <HAL_I2C_MspInit+0x88>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800108a:	f003 0302 	and.w	r3, r3, #2
 800108e:	613b      	str	r3, [r7, #16]
 8001090:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001092:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001096:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001098:	2312      	movs	r3, #18
 800109a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109c:	2300      	movs	r3, #0
 800109e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010a0:	2303      	movs	r3, #3
 80010a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80010a4:	2304      	movs	r3, #4
 80010a6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010a8:	f107 0314 	add.w	r3, r7, #20
 80010ac:	4619      	mov	r1, r3
 80010ae:	480c      	ldr	r0, [pc, #48]	@ (80010e0 <HAL_I2C_MspInit+0x8c>)
 80010b0:	f001 fd24 	bl	8002afc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80010b4:	2300      	movs	r3, #0
 80010b6:	60fb      	str	r3, [r7, #12]
 80010b8:	4b08      	ldr	r3, [pc, #32]	@ (80010dc <HAL_I2C_MspInit+0x88>)
 80010ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010bc:	4a07      	ldr	r2, [pc, #28]	@ (80010dc <HAL_I2C_MspInit+0x88>)
 80010be:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80010c2:	6413      	str	r3, [r2, #64]	@ 0x40
 80010c4:	4b05      	ldr	r3, [pc, #20]	@ (80010dc <HAL_I2C_MspInit+0x88>)
 80010c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010c8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80010cc:	60fb      	str	r3, [r7, #12]
 80010ce:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 80010d0:	bf00      	nop
 80010d2:	3728      	adds	r7, #40	@ 0x28
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	40005800 	.word	0x40005800
 80010dc:	40023800 	.word	0x40023800
 80010e0:	40020400 	.word	0x40020400

080010e4 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b08a      	sub	sp, #40	@ 0x28
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ec:	f107 0314 	add.w	r3, r7, #20
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	605a      	str	r2, [r3, #4]
 80010f6:	609a      	str	r2, [r3, #8]
 80010f8:	60da      	str	r2, [r3, #12]
 80010fa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a28      	ldr	r2, [pc, #160]	@ (80011a4 <HAL_SPI_MspInit+0xc0>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d14a      	bne.n	800119c <HAL_SPI_MspInit+0xb8>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001106:	2300      	movs	r3, #0
 8001108:	613b      	str	r3, [r7, #16]
 800110a:	4b27      	ldr	r3, [pc, #156]	@ (80011a8 <HAL_SPI_MspInit+0xc4>)
 800110c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800110e:	4a26      	ldr	r2, [pc, #152]	@ (80011a8 <HAL_SPI_MspInit+0xc4>)
 8001110:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001114:	6413      	str	r3, [r2, #64]	@ 0x40
 8001116:	4b24      	ldr	r3, [pc, #144]	@ (80011a8 <HAL_SPI_MspInit+0xc4>)
 8001118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800111a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800111e:	613b      	str	r3, [r7, #16]
 8001120:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001122:	2300      	movs	r3, #0
 8001124:	60fb      	str	r3, [r7, #12]
 8001126:	4b20      	ldr	r3, [pc, #128]	@ (80011a8 <HAL_SPI_MspInit+0xc4>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800112a:	4a1f      	ldr	r2, [pc, #124]	@ (80011a8 <HAL_SPI_MspInit+0xc4>)
 800112c:	f043 0304 	orr.w	r3, r3, #4
 8001130:	6313      	str	r3, [r2, #48]	@ 0x30
 8001132:	4b1d      	ldr	r3, [pc, #116]	@ (80011a8 <HAL_SPI_MspInit+0xc4>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001136:	f003 0304 	and.w	r3, r3, #4
 800113a:	60fb      	str	r3, [r7, #12]
 800113c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800113e:	2300      	movs	r3, #0
 8001140:	60bb      	str	r3, [r7, #8]
 8001142:	4b19      	ldr	r3, [pc, #100]	@ (80011a8 <HAL_SPI_MspInit+0xc4>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001146:	4a18      	ldr	r2, [pc, #96]	@ (80011a8 <HAL_SPI_MspInit+0xc4>)
 8001148:	f043 0302 	orr.w	r3, r3, #2
 800114c:	6313      	str	r3, [r2, #48]	@ 0x30
 800114e:	4b16      	ldr	r3, [pc, #88]	@ (80011a8 <HAL_SPI_MspInit+0xc4>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001152:	f003 0302 	and.w	r3, r3, #2
 8001156:	60bb      	str	r3, [r7, #8]
 8001158:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800115a:	230c      	movs	r3, #12
 800115c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115e:	2302      	movs	r3, #2
 8001160:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001162:	2300      	movs	r3, #0
 8001164:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001166:	2303      	movs	r3, #3
 8001168:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800116a:	2305      	movs	r3, #5
 800116c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800116e:	f107 0314 	add.w	r3, r7, #20
 8001172:	4619      	mov	r1, r3
 8001174:	480d      	ldr	r0, [pc, #52]	@ (80011ac <HAL_SPI_MspInit+0xc8>)
 8001176:	f001 fcc1 	bl	8002afc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800117a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800117e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001180:	2302      	movs	r3, #2
 8001182:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001184:	2300      	movs	r3, #0
 8001186:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001188:	2303      	movs	r3, #3
 800118a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800118c:	2305      	movs	r3, #5
 800118e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001190:	f107 0314 	add.w	r3, r7, #20
 8001194:	4619      	mov	r1, r3
 8001196:	4806      	ldr	r0, [pc, #24]	@ (80011b0 <HAL_SPI_MspInit+0xcc>)
 8001198:	f001 fcb0 	bl	8002afc <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 800119c:	bf00      	nop
 800119e:	3728      	adds	r7, #40	@ 0x28
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	40003800 	.word	0x40003800
 80011a8:	40023800 	.word	0x40023800
 80011ac:	40020800 	.word	0x40020800
 80011b0:	40020400 	.word	0x40020400

080011b4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b08a      	sub	sp, #40	@ 0x28
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011bc:	f107 0314 	add.w	r3, r7, #20
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
 80011c4:	605a      	str	r2, [r3, #4]
 80011c6:	609a      	str	r2, [r3, #8]
 80011c8:	60da      	str	r2, [r3, #12]
 80011ca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a19      	ldr	r2, [pc, #100]	@ (8001238 <HAL_UART_MspInit+0x84>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d12b      	bne.n	800122e <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN UART4_MspInit 0 */

    /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80011d6:	2300      	movs	r3, #0
 80011d8:	613b      	str	r3, [r7, #16]
 80011da:	4b18      	ldr	r3, [pc, #96]	@ (800123c <HAL_UART_MspInit+0x88>)
 80011dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011de:	4a17      	ldr	r2, [pc, #92]	@ (800123c <HAL_UART_MspInit+0x88>)
 80011e0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80011e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80011e6:	4b15      	ldr	r3, [pc, #84]	@ (800123c <HAL_UART_MspInit+0x88>)
 80011e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80011ee:	613b      	str	r3, [r7, #16]
 80011f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f2:	2300      	movs	r3, #0
 80011f4:	60fb      	str	r3, [r7, #12]
 80011f6:	4b11      	ldr	r3, [pc, #68]	@ (800123c <HAL_UART_MspInit+0x88>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fa:	4a10      	ldr	r2, [pc, #64]	@ (800123c <HAL_UART_MspInit+0x88>)
 80011fc:	f043 0301 	orr.w	r3, r3, #1
 8001200:	6313      	str	r3, [r2, #48]	@ 0x30
 8001202:	4b0e      	ldr	r3, [pc, #56]	@ (800123c <HAL_UART_MspInit+0x88>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001206:	f003 0301 	and.w	r3, r3, #1
 800120a:	60fb      	str	r3, [r7, #12]
 800120c:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800120e:	2303      	movs	r3, #3
 8001210:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001212:	2302      	movs	r3, #2
 8001214:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001216:	2300      	movs	r3, #0
 8001218:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800121a:	2303      	movs	r3, #3
 800121c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800121e:	2308      	movs	r3, #8
 8001220:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001222:	f107 0314 	add.w	r3, r7, #20
 8001226:	4619      	mov	r1, r3
 8001228:	4805      	ldr	r0, [pc, #20]	@ (8001240 <HAL_UART_MspInit+0x8c>)
 800122a:	f001 fc67 	bl	8002afc <HAL_GPIO_Init>

    /* USER CODE END UART4_MspInit 1 */

  }

}
 800122e:	bf00      	nop
 8001230:	3728      	adds	r7, #40	@ 0x28
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	40004c00 	.word	0x40004c00
 800123c:	40023800 	.word	0x40023800
 8001240:	40020000 	.word	0x40020000

08001244 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001248:	bf00      	nop
 800124a:	e7fd      	b.n	8001248 <NMI_Handler+0x4>

0800124c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001250:	bf00      	nop
 8001252:	e7fd      	b.n	8001250 <HardFault_Handler+0x4>

08001254 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001258:	bf00      	nop
 800125a:	e7fd      	b.n	8001258 <MemManage_Handler+0x4>

0800125c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001260:	bf00      	nop
 8001262:	e7fd      	b.n	8001260 <BusFault_Handler+0x4>

08001264 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001268:	bf00      	nop
 800126a:	e7fd      	b.n	8001268 <UsageFault_Handler+0x4>

0800126c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001270:	bf00      	nop
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr

0800127a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800127a:	b480      	push	{r7}
 800127c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800127e:	bf00      	nop
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr

08001288 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800128c:	bf00      	nop
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr

08001296 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001296:	b580      	push	{r7, lr}
 8001298:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800129a:	f000 ff05 	bl	80020a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800129e:	bf00      	nop
 80012a0:	bd80      	pop	{r7, pc}

080012a2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80012a2:	b480      	push	{r7}
 80012a4:	af00      	add	r7, sp, #0
  return 1;
 80012a6:	2301      	movs	r3, #1
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr

080012b2 <_kill>:

int _kill(int pid, int sig)
{
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b082      	sub	sp, #8
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
 80012ba:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80012bc:	f004 fd06 	bl	8005ccc <__errno>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2216      	movs	r2, #22
 80012c4:	601a      	str	r2, [r3, #0]
  return -1;
 80012c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}

080012d2 <_exit>:

void _exit (int status)
{
 80012d2:	b580      	push	{r7, lr}
 80012d4:	b082      	sub	sp, #8
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80012da:	f04f 31ff 	mov.w	r1, #4294967295
 80012de:	6878      	ldr	r0, [r7, #4]
 80012e0:	f7ff ffe7 	bl	80012b2 <_kill>
  while (1) {}    /* Make sure we hang here */
 80012e4:	bf00      	nop
 80012e6:	e7fd      	b.n	80012e4 <_exit+0x12>

080012e8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b086      	sub	sp, #24
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	60f8      	str	r0, [r7, #12]
 80012f0:	60b9      	str	r1, [r7, #8]
 80012f2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012f4:	2300      	movs	r3, #0
 80012f6:	617b      	str	r3, [r7, #20]
 80012f8:	e00a      	b.n	8001310 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80012fa:	f3af 8000 	nop.w
 80012fe:	4601      	mov	r1, r0
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	1c5a      	adds	r2, r3, #1
 8001304:	60ba      	str	r2, [r7, #8]
 8001306:	b2ca      	uxtb	r2, r1
 8001308:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	3301      	adds	r3, #1
 800130e:	617b      	str	r3, [r7, #20]
 8001310:	697a      	ldr	r2, [r7, #20]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	429a      	cmp	r2, r3
 8001316:	dbf0      	blt.n	80012fa <_read+0x12>
  }

  return len;
 8001318:	687b      	ldr	r3, [r7, #4]
}
 800131a:	4618      	mov	r0, r3
 800131c:	3718      	adds	r7, #24
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}

08001322 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001322:	b580      	push	{r7, lr}
 8001324:	b086      	sub	sp, #24
 8001326:	af00      	add	r7, sp, #0
 8001328:	60f8      	str	r0, [r7, #12]
 800132a:	60b9      	str	r1, [r7, #8]
 800132c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800132e:	2300      	movs	r3, #0
 8001330:	617b      	str	r3, [r7, #20]
 8001332:	e009      	b.n	8001348 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	1c5a      	adds	r2, r3, #1
 8001338:	60ba      	str	r2, [r7, #8]
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	4618      	mov	r0, r3
 800133e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	3301      	adds	r3, #1
 8001346:	617b      	str	r3, [r7, #20]
 8001348:	697a      	ldr	r2, [r7, #20]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	429a      	cmp	r2, r3
 800134e:	dbf1      	blt.n	8001334 <_write+0x12>
  }
  return len;
 8001350:	687b      	ldr	r3, [r7, #4]
}
 8001352:	4618      	mov	r0, r3
 8001354:	3718      	adds	r7, #24
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}

0800135a <_close>:

int _close(int file)
{
 800135a:	b480      	push	{r7}
 800135c:	b083      	sub	sp, #12
 800135e:	af00      	add	r7, sp, #0
 8001360:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001362:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001366:	4618      	mov	r0, r3
 8001368:	370c      	adds	r7, #12
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr

08001372 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001372:	b480      	push	{r7}
 8001374:	b083      	sub	sp, #12
 8001376:	af00      	add	r7, sp, #0
 8001378:	6078      	str	r0, [r7, #4]
 800137a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001382:	605a      	str	r2, [r3, #4]
  return 0;
 8001384:	2300      	movs	r3, #0
}
 8001386:	4618      	mov	r0, r3
 8001388:	370c      	adds	r7, #12
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr

08001392 <_isatty>:

int _isatty(int file)
{
 8001392:	b480      	push	{r7}
 8001394:	b083      	sub	sp, #12
 8001396:	af00      	add	r7, sp, #0
 8001398:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800139a:	2301      	movs	r3, #1
}
 800139c:	4618      	mov	r0, r3
 800139e:	370c      	adds	r7, #12
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr

080013a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b085      	sub	sp, #20
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	60f8      	str	r0, [r7, #12]
 80013b0:	60b9      	str	r1, [r7, #8]
 80013b2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80013b4:	2300      	movs	r3, #0
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3714      	adds	r7, #20
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
	...

080013c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b086      	sub	sp, #24
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013cc:	4a14      	ldr	r2, [pc, #80]	@ (8001420 <_sbrk+0x5c>)
 80013ce:	4b15      	ldr	r3, [pc, #84]	@ (8001424 <_sbrk+0x60>)
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013d8:	4b13      	ldr	r3, [pc, #76]	@ (8001428 <_sbrk+0x64>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d102      	bne.n	80013e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013e0:	4b11      	ldr	r3, [pc, #68]	@ (8001428 <_sbrk+0x64>)
 80013e2:	4a12      	ldr	r2, [pc, #72]	@ (800142c <_sbrk+0x68>)
 80013e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013e6:	4b10      	ldr	r3, [pc, #64]	@ (8001428 <_sbrk+0x64>)
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4413      	add	r3, r2
 80013ee:	693a      	ldr	r2, [r7, #16]
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d207      	bcs.n	8001404 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013f4:	f004 fc6a 	bl	8005ccc <__errno>
 80013f8:	4603      	mov	r3, r0
 80013fa:	220c      	movs	r2, #12
 80013fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001402:	e009      	b.n	8001418 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001404:	4b08      	ldr	r3, [pc, #32]	@ (8001428 <_sbrk+0x64>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800140a:	4b07      	ldr	r3, [pc, #28]	@ (8001428 <_sbrk+0x64>)
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4413      	add	r3, r2
 8001412:	4a05      	ldr	r2, [pc, #20]	@ (8001428 <_sbrk+0x64>)
 8001414:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001416:	68fb      	ldr	r3, [r7, #12]
}
 8001418:	4618      	mov	r0, r3
 800141a:	3718      	adds	r7, #24
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	20020000 	.word	0x20020000
 8001424:	00000400 	.word	0x00000400
 8001428:	200001f4 	.word	0x200001f4
 800142c:	20000698 	.word	0x20000698

08001430 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001434:	4b06      	ldr	r3, [pc, #24]	@ (8001450 <SystemInit+0x20>)
 8001436:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800143a:	4a05      	ldr	r2, [pc, #20]	@ (8001450 <SystemInit+0x20>)
 800143c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001440:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001444:	bf00      	nop
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	e000ed00 	.word	0xe000ed00

08001454 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001454:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800148c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001458:	f7ff ffea 	bl	8001430 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800145c:	480c      	ldr	r0, [pc, #48]	@ (8001490 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800145e:	490d      	ldr	r1, [pc, #52]	@ (8001494 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001460:	4a0d      	ldr	r2, [pc, #52]	@ (8001498 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001462:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001464:	e002      	b.n	800146c <LoopCopyDataInit>

08001466 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001466:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001468:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800146a:	3304      	adds	r3, #4

0800146c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800146c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800146e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001470:	d3f9      	bcc.n	8001466 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001472:	4a0a      	ldr	r2, [pc, #40]	@ (800149c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001474:	4c0a      	ldr	r4, [pc, #40]	@ (80014a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001476:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001478:	e001      	b.n	800147e <LoopFillZerobss>

0800147a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800147a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800147c:	3204      	adds	r2, #4

0800147e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800147e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001480:	d3fb      	bcc.n	800147a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001482:	f004 fc29 	bl	8005cd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001486:	f7ff f889 	bl	800059c <main>
  bx  lr    
 800148a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800148c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001490:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001494:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8001498:	08063aac 	.word	0x08063aac
  ldr r2, =_sbss
 800149c:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 80014a0:	20000694 	.word	0x20000694

080014a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014a4:	e7fe      	b.n	80014a4 <ADC_IRQHandler>
	...

080014a8 <genNewApple>:
bool isover;
int num_colors = 4;
int num_apple = 1;
int num_body = 1;

void genNewApple(void) {
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
    bool onSnake = false;
 80014ae:	2300      	movs	r3, #0
 80014b0:	71fb      	strb	r3, [r7, #7]
    do {
        // Aligned to 20x20 grid, with padding
        apple_x = ((rand() % (160 / 20)) * 20) + 40;
 80014b2:	f004 fa79 	bl	80059a8 <rand>
 80014b6:	4603      	mov	r3, r0
 80014b8:	4259      	negs	r1, r3
 80014ba:	f003 0207 	and.w	r2, r3, #7
 80014be:	f001 0307 	and.w	r3, r1, #7
 80014c2:	bf58      	it	pl
 80014c4:	425a      	negpl	r2, r3
 80014c6:	4613      	mov	r3, r2
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	4413      	add	r3, r2
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	3328      	adds	r3, #40	@ 0x28
 80014d0:	4a24      	ldr	r2, [pc, #144]	@ (8001564 <genNewApple+0xbc>)
 80014d2:	6013      	str	r3, [r2, #0]
        apple_y = ((rand() % (120 / 20)) * 20) + 40;
 80014d4:	f004 fa68 	bl	80059a8 <rand>
 80014d8:	4601      	mov	r1, r0
 80014da:	4b23      	ldr	r3, [pc, #140]	@ (8001568 <genNewApple+0xc0>)
 80014dc:	fb83 3201 	smull	r3, r2, r3, r1
 80014e0:	17cb      	asrs	r3, r1, #31
 80014e2:	1ad2      	subs	r2, r2, r3
 80014e4:	4613      	mov	r3, r2
 80014e6:	005b      	lsls	r3, r3, #1
 80014e8:	4413      	add	r3, r2
 80014ea:	005b      	lsls	r3, r3, #1
 80014ec:	1aca      	subs	r2, r1, r3
 80014ee:	4613      	mov	r3, r2
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	4413      	add	r3, r2
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	3328      	adds	r3, #40	@ 0x28
 80014f8:	4a1c      	ldr	r2, [pc, #112]	@ (800156c <genNewApple+0xc4>)
 80014fa:	6013      	str	r3, [r2, #0]
        for (int i = 0; i < snakelen; i++) {
 80014fc:	2300      	movs	r3, #0
 80014fe:	603b      	str	r3, [r7, #0]
 8001500:	e016      	b.n	8001530 <genNewApple+0x88>
            if (snake[i].x == apple_x && snake[i].y == apple_y) {
 8001502:	4a1b      	ldr	r2, [pc, #108]	@ (8001570 <genNewApple+0xc8>)
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800150a:	4b16      	ldr	r3, [pc, #88]	@ (8001564 <genNewApple+0xbc>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	429a      	cmp	r2, r3
 8001510:	d10b      	bne.n	800152a <genNewApple+0x82>
 8001512:	4a17      	ldr	r2, [pc, #92]	@ (8001570 <genNewApple+0xc8>)
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	00db      	lsls	r3, r3, #3
 8001518:	4413      	add	r3, r2
 800151a:	685a      	ldr	r2, [r3, #4]
 800151c:	4b13      	ldr	r3, [pc, #76]	@ (800156c <genNewApple+0xc4>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	429a      	cmp	r2, r3
 8001522:	d102      	bne.n	800152a <genNewApple+0x82>
                onSnake = true;
 8001524:	2301      	movs	r3, #1
 8001526:	71fb      	strb	r3, [r7, #7]
                break;
 8001528:	e007      	b.n	800153a <genNewApple+0x92>
        for (int i = 0; i < snakelen; i++) {
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	3301      	adds	r3, #1
 800152e:	603b      	str	r3, [r7, #0]
 8001530:	4b10      	ldr	r3, [pc, #64]	@ (8001574 <genNewApple+0xcc>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	683a      	ldr	r2, [r7, #0]
 8001536:	429a      	cmp	r2, r3
 8001538:	dbe3      	blt.n	8001502 <genNewApple+0x5a>
            }
        }
        num_apple = (rand() % 4) + 1;
 800153a:	f004 fa35 	bl	80059a8 <rand>
 800153e:	4603      	mov	r3, r0
 8001540:	425a      	negs	r2, r3
 8001542:	f003 0303 	and.w	r3, r3, #3
 8001546:	f002 0203 	and.w	r2, r2, #3
 800154a:	bf58      	it	pl
 800154c:	4253      	negpl	r3, r2
 800154e:	3301      	adds	r3, #1
 8001550:	4a09      	ldr	r2, [pc, #36]	@ (8001578 <genNewApple+0xd0>)
 8001552:	6013      	str	r3, [r2, #0]
    } while (onSnake);
 8001554:	79fb      	ldrb	r3, [r7, #7]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d1ab      	bne.n	80014b2 <genNewApple+0xa>
}
 800155a:	bf00      	nop
 800155c:	bf00      	nop
 800155e:	3708      	adds	r7, #8
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	20000520 	.word	0x20000520
 8001568:	2aaaaaab 	.word	0x2aaaaaab
 800156c:	20000524 	.word	0x20000524
 8001570:	200001f8 	.word	0x200001f8
 8001574:	20000518 	.word	0x20000518
 8001578:	20000008 	.word	0x20000008

0800157c <SNAKE_Init>:

void SNAKE_Init(void) {
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
    srand(HAL_GetTick());
 8001582:	f000 fda5 	bl	80020d0 <HAL_GetTick>
 8001586:	4603      	mov	r3, r0
 8001588:	4618      	mov	r0, r3
 800158a:	f004 f9df 	bl	800594c <srand>
    snakelen = 3;
 800158e:	4b15      	ldr	r3, [pc, #84]	@ (80015e4 <SNAKE_Init+0x68>)
 8001590:	2203      	movs	r2, #3
 8001592:	601a      	str	r2, [r3, #0]
    current_dir = 1;
 8001594:	4b14      	ldr	r3, [pc, #80]	@ (80015e8 <SNAKE_Init+0x6c>)
 8001596:	2201      	movs	r2, #1
 8001598:	601a      	str	r2, [r3, #0]
    isover = false;
 800159a:	4b14      	ldr	r3, [pc, #80]	@ (80015ec <SNAKE_Init+0x70>)
 800159c:	2200      	movs	r2, #0
 800159e:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < snakelen; i++) {
 80015a0:	2300      	movs	r3, #0
 80015a2:	607b      	str	r3, [r7, #4]
 80015a4:	e013      	b.n	80015ce <SNAKE_Init+0x52>
        snake[i].x = 180 - (i * 20);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	f06f 0213 	mvn.w	r2, #19
 80015ac:	fb02 f303 	mul.w	r3, r2, r3
 80015b0:	f103 02b4 	add.w	r2, r3, #180	@ 0xb4
 80015b4:	490e      	ldr	r1, [pc, #56]	@ (80015f0 <SNAKE_Init+0x74>)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
        snake[i].y = 100;
 80015bc:	4a0c      	ldr	r2, [pc, #48]	@ (80015f0 <SNAKE_Init+0x74>)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	00db      	lsls	r3, r3, #3
 80015c2:	4413      	add	r3, r2
 80015c4:	2264      	movs	r2, #100	@ 0x64
 80015c6:	605a      	str	r2, [r3, #4]
    for (int i = 0; i < snakelen; i++) {
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	3301      	adds	r3, #1
 80015cc:	607b      	str	r3, [r7, #4]
 80015ce:	4b05      	ldr	r3, [pc, #20]	@ (80015e4 <SNAKE_Init+0x68>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	687a      	ldr	r2, [r7, #4]
 80015d4:	429a      	cmp	r2, r3
 80015d6:	dbe6      	blt.n	80015a6 <SNAKE_Init+0x2a>
    }
    genNewApple();
 80015d8:	f7ff ff66 	bl	80014a8 <genNewApple>
}
 80015dc:	bf00      	nop
 80015de:	3708      	adds	r7, #8
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	20000518 	.word	0x20000518
 80015e8:	2000051c 	.word	0x2000051c
 80015ec:	20000528 	.word	0x20000528
 80015f0:	200001f8 	.word	0x200001f8

080015f4 <SNAKE_updateGame>:

void SNAKE_updateGame(void) {
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b086      	sub	sp, #24
 80015f8:	af02      	add	r7, sp, #8
    // Save last tail segment position before updating
    int last_x = snake[snakelen - 1].x;
 80015fa:	4b66      	ldr	r3, [pc, #408]	@ (8001794 <SNAKE_updateGame+0x1a0>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	3b01      	subs	r3, #1
 8001600:	4a65      	ldr	r2, [pc, #404]	@ (8001798 <SNAKE_updateGame+0x1a4>)
 8001602:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001606:	607b      	str	r3, [r7, #4]
    int last_y = snake[snakelen - 1].y;
 8001608:	4b62      	ldr	r3, [pc, #392]	@ (8001794 <SNAKE_updateGame+0x1a0>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	3b01      	subs	r3, #1
 800160e:	4a62      	ldr	r2, [pc, #392]	@ (8001798 <SNAKE_updateGame+0x1a4>)
 8001610:	00db      	lsls	r3, r3, #3
 8001612:	4413      	add	r3, r2
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	603b      	str	r3, [r7, #0]

    // Shift body segments forward
    for (int i = snakelen - 1; i > 0; i--) {
 8001618:	4b5e      	ldr	r3, [pc, #376]	@ (8001794 <SNAKE_updateGame+0x1a0>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	3b01      	subs	r3, #1
 800161e:	60fb      	str	r3, [r7, #12]
 8001620:	e016      	b.n	8001650 <SNAKE_updateGame+0x5c>
        snake[i].x = snake[i - 1].x;
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	3b01      	subs	r3, #1
 8001626:	4a5c      	ldr	r2, [pc, #368]	@ (8001798 <SNAKE_updateGame+0x1a4>)
 8001628:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800162c:	495a      	ldr	r1, [pc, #360]	@ (8001798 <SNAKE_updateGame+0x1a4>)
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
        snake[i].y = snake[i - 1].y;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	3b01      	subs	r3, #1
 8001638:	4a57      	ldr	r2, [pc, #348]	@ (8001798 <SNAKE_updateGame+0x1a4>)
 800163a:	00db      	lsls	r3, r3, #3
 800163c:	4413      	add	r3, r2
 800163e:	685a      	ldr	r2, [r3, #4]
 8001640:	4955      	ldr	r1, [pc, #340]	@ (8001798 <SNAKE_updateGame+0x1a4>)
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	00db      	lsls	r3, r3, #3
 8001646:	440b      	add	r3, r1
 8001648:	605a      	str	r2, [r3, #4]
    for (int i = snakelen - 1; i > 0; i--) {
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	3b01      	subs	r3, #1
 800164e:	60fb      	str	r3, [r7, #12]
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	2b00      	cmp	r3, #0
 8001654:	dce5      	bgt.n	8001622 <SNAKE_updateGame+0x2e>
    }

    // Move head
    if (current_dir == 1) snake[0].x += 20; // right
 8001656:	4b51      	ldr	r3, [pc, #324]	@ (800179c <SNAKE_updateGame+0x1a8>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	2b01      	cmp	r3, #1
 800165c:	d105      	bne.n	800166a <SNAKE_updateGame+0x76>
 800165e:	4b4e      	ldr	r3, [pc, #312]	@ (8001798 <SNAKE_updateGame+0x1a4>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	3314      	adds	r3, #20
 8001664:	4a4c      	ldr	r2, [pc, #304]	@ (8001798 <SNAKE_updateGame+0x1a4>)
 8001666:	6013      	str	r3, [r2, #0]
 8001668:	e01c      	b.n	80016a4 <SNAKE_updateGame+0xb0>
    else if (current_dir == 2) snake[0].y += 20; // down
 800166a:	4b4c      	ldr	r3, [pc, #304]	@ (800179c <SNAKE_updateGame+0x1a8>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	2b02      	cmp	r3, #2
 8001670:	d105      	bne.n	800167e <SNAKE_updateGame+0x8a>
 8001672:	4b49      	ldr	r3, [pc, #292]	@ (8001798 <SNAKE_updateGame+0x1a4>)
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	3314      	adds	r3, #20
 8001678:	4a47      	ldr	r2, [pc, #284]	@ (8001798 <SNAKE_updateGame+0x1a4>)
 800167a:	6053      	str	r3, [r2, #4]
 800167c:	e012      	b.n	80016a4 <SNAKE_updateGame+0xb0>
    else if (current_dir == 3) snake[0].x -= 20; // left
 800167e:	4b47      	ldr	r3, [pc, #284]	@ (800179c <SNAKE_updateGame+0x1a8>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	2b03      	cmp	r3, #3
 8001684:	d105      	bne.n	8001692 <SNAKE_updateGame+0x9e>
 8001686:	4b44      	ldr	r3, [pc, #272]	@ (8001798 <SNAKE_updateGame+0x1a4>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	3b14      	subs	r3, #20
 800168c:	4a42      	ldr	r2, [pc, #264]	@ (8001798 <SNAKE_updateGame+0x1a4>)
 800168e:	6013      	str	r3, [r2, #0]
 8001690:	e008      	b.n	80016a4 <SNAKE_updateGame+0xb0>
    else if (current_dir == 4) snake[0].y -= 20; // up
 8001692:	4b42      	ldr	r3, [pc, #264]	@ (800179c <SNAKE_updateGame+0x1a8>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	2b04      	cmp	r3, #4
 8001698:	d104      	bne.n	80016a4 <SNAKE_updateGame+0xb0>
 800169a:	4b3f      	ldr	r3, [pc, #252]	@ (8001798 <SNAKE_updateGame+0x1a4>)
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	3b14      	subs	r3, #20
 80016a0:	4a3d      	ldr	r2, [pc, #244]	@ (8001798 <SNAKE_updateGame+0x1a4>)
 80016a2:	6053      	str	r3, [r2, #4]

    // Wrap around logic
    if (snake[0].x < 40) snake[0].x = 280;
 80016a4:	4b3c      	ldr	r3, [pc, #240]	@ (8001798 <SNAKE_updateGame+0x1a4>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	2b27      	cmp	r3, #39	@ 0x27
 80016aa:	dc04      	bgt.n	80016b6 <SNAKE_updateGame+0xc2>
 80016ac:	4b3a      	ldr	r3, [pc, #232]	@ (8001798 <SNAKE_updateGame+0x1a4>)
 80016ae:	f44f 728c 	mov.w	r2, #280	@ 0x118
 80016b2:	601a      	str	r2, [r3, #0]
 80016b4:	e007      	b.n	80016c6 <SNAKE_updateGame+0xd2>
    else if (snake[0].x >= 280) snake[0].x = 40;
 80016b6:	4b38      	ldr	r3, [pc, #224]	@ (8001798 <SNAKE_updateGame+0x1a4>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 80016be:	db02      	blt.n	80016c6 <SNAKE_updateGame+0xd2>
 80016c0:	4b35      	ldr	r3, [pc, #212]	@ (8001798 <SNAKE_updateGame+0x1a4>)
 80016c2:	2228      	movs	r2, #40	@ 0x28
 80016c4:	601a      	str	r2, [r3, #0]

    if (snake[0].y < 40) snake[0].y = 200;
 80016c6:	4b34      	ldr	r3, [pc, #208]	@ (8001798 <SNAKE_updateGame+0x1a4>)
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	2b27      	cmp	r3, #39	@ 0x27
 80016cc:	dc03      	bgt.n	80016d6 <SNAKE_updateGame+0xe2>
 80016ce:	4b32      	ldr	r3, [pc, #200]	@ (8001798 <SNAKE_updateGame+0x1a4>)
 80016d0:	22c8      	movs	r2, #200	@ 0xc8
 80016d2:	605a      	str	r2, [r3, #4]
 80016d4:	e006      	b.n	80016e4 <SNAKE_updateGame+0xf0>
    else if (snake[0].y >= 200) snake[0].y = 40;
 80016d6:	4b30      	ldr	r3, [pc, #192]	@ (8001798 <SNAKE_updateGame+0x1a4>)
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	2bc7      	cmp	r3, #199	@ 0xc7
 80016dc:	dd02      	ble.n	80016e4 <SNAKE_updateGame+0xf0>
 80016de:	4b2e      	ldr	r3, [pc, #184]	@ (8001798 <SNAKE_updateGame+0x1a4>)
 80016e0:	2228      	movs	r2, #40	@ 0x28
 80016e2:	605a      	str	r2, [r3, #4]


    // Check for apple collision
    if (snake[0].x == apple_x && snake[0].y == apple_y) {
 80016e4:	4b2c      	ldr	r3, [pc, #176]	@ (8001798 <SNAKE_updateGame+0x1a4>)
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	4b2d      	ldr	r3, [pc, #180]	@ (80017a0 <SNAKE_updateGame+0x1ac>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d122      	bne.n	8001736 <SNAKE_updateGame+0x142>
 80016f0:	4b29      	ldr	r3, [pc, #164]	@ (8001798 <SNAKE_updateGame+0x1a4>)
 80016f2:	685a      	ldr	r2, [r3, #4]
 80016f4:	4b2b      	ldr	r3, [pc, #172]	@ (80017a4 <SNAKE_updateGame+0x1b0>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d11c      	bne.n	8001736 <SNAKE_updateGame+0x142>
        if (snakelen < MAX_LEN) {
 80016fc:	4b25      	ldr	r3, [pc, #148]	@ (8001794 <SNAKE_updateGame+0x1a0>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	2b63      	cmp	r3, #99	@ 0x63
 8001702:	dc11      	bgt.n	8001728 <SNAKE_updateGame+0x134>
            // Extend the snake
            snake[snakelen].x = last_x;
 8001704:	4b23      	ldr	r3, [pc, #140]	@ (8001794 <SNAKE_updateGame+0x1a0>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4923      	ldr	r1, [pc, #140]	@ (8001798 <SNAKE_updateGame+0x1a4>)
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
            snake[snakelen].y = last_y;
 8001710:	4b20      	ldr	r3, [pc, #128]	@ (8001794 <SNAKE_updateGame+0x1a0>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a20      	ldr	r2, [pc, #128]	@ (8001798 <SNAKE_updateGame+0x1a4>)
 8001716:	00db      	lsls	r3, r3, #3
 8001718:	4413      	add	r3, r2
 800171a:	683a      	ldr	r2, [r7, #0]
 800171c:	605a      	str	r2, [r3, #4]
            snakelen++;
 800171e:	4b1d      	ldr	r3, [pc, #116]	@ (8001794 <SNAKE_updateGame+0x1a0>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	3301      	adds	r3, #1
 8001724:	4a1b      	ldr	r2, [pc, #108]	@ (8001794 <SNAKE_updateGame+0x1a0>)
 8001726:	6013      	str	r3, [r2, #0]
        }
        num_body = num_apple;
 8001728:	4b1f      	ldr	r3, [pc, #124]	@ (80017a8 <SNAKE_updateGame+0x1b4>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a1f      	ldr	r2, [pc, #124]	@ (80017ac <SNAKE_updateGame+0x1b8>)
 800172e:	6013      	str	r3, [r2, #0]
        genNewApple();
 8001730:	f7ff feba 	bl	80014a8 <genNewApple>
 8001734:	e009      	b.n	800174a <SNAKE_updateGame+0x156>
    } else {
        // Clear the last tail segment if no apple was eaten
        ILI9341_FillRectangle(last_x, last_y, 20, 20, ILI9341_BLACK);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	b298      	uxth	r0, r3
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	b299      	uxth	r1, r3
 800173e:	2300      	movs	r3, #0
 8001740:	9300      	str	r3, [sp, #0]
 8001742:	2314      	movs	r3, #20
 8001744:	2214      	movs	r2, #20
 8001746:	f004 f839 	bl	80057bc <ILI9341_FillRectangle>
    }

    // Check for self-collision
    for (int i = 1; i < snakelen; i++) {
 800174a:	2301      	movs	r3, #1
 800174c:	60bb      	str	r3, [r7, #8]
 800174e:	e017      	b.n	8001780 <SNAKE_updateGame+0x18c>
        if (snake[0].x == snake[i].x && snake[0].y == snake[i].y) {
 8001750:	4b11      	ldr	r3, [pc, #68]	@ (8001798 <SNAKE_updateGame+0x1a4>)
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	4910      	ldr	r1, [pc, #64]	@ (8001798 <SNAKE_updateGame+0x1a4>)
 8001756:	68bb      	ldr	r3, [r7, #8]
 8001758:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 800175c:	429a      	cmp	r2, r3
 800175e:	d10c      	bne.n	800177a <SNAKE_updateGame+0x186>
 8001760:	4b0d      	ldr	r3, [pc, #52]	@ (8001798 <SNAKE_updateGame+0x1a4>)
 8001762:	685a      	ldr	r2, [r3, #4]
 8001764:	490c      	ldr	r1, [pc, #48]	@ (8001798 <SNAKE_updateGame+0x1a4>)
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	00db      	lsls	r3, r3, #3
 800176a:	440b      	add	r3, r1
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	429a      	cmp	r2, r3
 8001770:	d103      	bne.n	800177a <SNAKE_updateGame+0x186>
            isover = true;
 8001772:	4b0f      	ldr	r3, [pc, #60]	@ (80017b0 <SNAKE_updateGame+0x1bc>)
 8001774:	2201      	movs	r2, #1
 8001776:	701a      	strb	r2, [r3, #0]
            break;
 8001778:	e008      	b.n	800178c <SNAKE_updateGame+0x198>
    for (int i = 1; i < snakelen; i++) {
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	3301      	adds	r3, #1
 800177e:	60bb      	str	r3, [r7, #8]
 8001780:	4b04      	ldr	r3, [pc, #16]	@ (8001794 <SNAKE_updateGame+0x1a0>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	68ba      	ldr	r2, [r7, #8]
 8001786:	429a      	cmp	r2, r3
 8001788:	dbe2      	blt.n	8001750 <SNAKE_updateGame+0x15c>
        }
    }
}
 800178a:	bf00      	nop
 800178c:	bf00      	nop
 800178e:	3710      	adds	r7, #16
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	20000518 	.word	0x20000518
 8001798:	200001f8 	.word	0x200001f8
 800179c:	2000051c 	.word	0x2000051c
 80017a0:	20000520 	.word	0x20000520
 80017a4:	20000524 	.word	0x20000524
 80017a8:	20000008 	.word	0x20000008
 80017ac:	2000000c 	.word	0x2000000c
 80017b0:	20000528 	.word	0x20000528

080017b4 <SNAKE_drawGame>:

void SNAKE_drawGame(void) {
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af02      	add	r7, sp, #8
    // Draw the new apple
    if (num_apple == 1) ILI9341_DrawImage(apple_x, apple_y, 20, 20, body1);
 80017ba:	4b76      	ldr	r3, [pc, #472]	@ (8001994 <SNAKE_drawGame+0x1e0>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d10c      	bne.n	80017dc <SNAKE_drawGame+0x28>
 80017c2:	4b75      	ldr	r3, [pc, #468]	@ (8001998 <SNAKE_drawGame+0x1e4>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	b298      	uxth	r0, r3
 80017c8:	4b74      	ldr	r3, [pc, #464]	@ (800199c <SNAKE_drawGame+0x1e8>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	b299      	uxth	r1, r3
 80017ce:	4b74      	ldr	r3, [pc, #464]	@ (80019a0 <SNAKE_drawGame+0x1ec>)
 80017d0:	9300      	str	r3, [sp, #0]
 80017d2:	2314      	movs	r3, #20
 80017d4:	2214      	movs	r2, #20
 80017d6:	f004 f871 	bl	80058bc <ILI9341_DrawImage>
 80017da:	e031      	b.n	8001840 <SNAKE_drawGame+0x8c>
    else if (num_apple == 2) ILI9341_DrawImage(apple_x, apple_y, 20, 20, body2);
 80017dc:	4b6d      	ldr	r3, [pc, #436]	@ (8001994 <SNAKE_drawGame+0x1e0>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d10c      	bne.n	80017fe <SNAKE_drawGame+0x4a>
 80017e4:	4b6c      	ldr	r3, [pc, #432]	@ (8001998 <SNAKE_drawGame+0x1e4>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	b298      	uxth	r0, r3
 80017ea:	4b6c      	ldr	r3, [pc, #432]	@ (800199c <SNAKE_drawGame+0x1e8>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	b299      	uxth	r1, r3
 80017f0:	4b6c      	ldr	r3, [pc, #432]	@ (80019a4 <SNAKE_drawGame+0x1f0>)
 80017f2:	9300      	str	r3, [sp, #0]
 80017f4:	2314      	movs	r3, #20
 80017f6:	2214      	movs	r2, #20
 80017f8:	f004 f860 	bl	80058bc <ILI9341_DrawImage>
 80017fc:	e020      	b.n	8001840 <SNAKE_drawGame+0x8c>
    else if (num_apple == 3) ILI9341_DrawImage(apple_x, apple_y, 20, 20, body3);
 80017fe:	4b65      	ldr	r3, [pc, #404]	@ (8001994 <SNAKE_drawGame+0x1e0>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	2b03      	cmp	r3, #3
 8001804:	d10c      	bne.n	8001820 <SNAKE_drawGame+0x6c>
 8001806:	4b64      	ldr	r3, [pc, #400]	@ (8001998 <SNAKE_drawGame+0x1e4>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	b298      	uxth	r0, r3
 800180c:	4b63      	ldr	r3, [pc, #396]	@ (800199c <SNAKE_drawGame+0x1e8>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	b299      	uxth	r1, r3
 8001812:	4b65      	ldr	r3, [pc, #404]	@ (80019a8 <SNAKE_drawGame+0x1f4>)
 8001814:	9300      	str	r3, [sp, #0]
 8001816:	2314      	movs	r3, #20
 8001818:	2214      	movs	r2, #20
 800181a:	f004 f84f 	bl	80058bc <ILI9341_DrawImage>
 800181e:	e00f      	b.n	8001840 <SNAKE_drawGame+0x8c>
    else if (num_apple == 4) ILI9341_DrawImage(apple_x, apple_y, 20, 20, body4);
 8001820:	4b5c      	ldr	r3, [pc, #368]	@ (8001994 <SNAKE_drawGame+0x1e0>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2b04      	cmp	r3, #4
 8001826:	d10b      	bne.n	8001840 <SNAKE_drawGame+0x8c>
 8001828:	4b5b      	ldr	r3, [pc, #364]	@ (8001998 <SNAKE_drawGame+0x1e4>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	b298      	uxth	r0, r3
 800182e:	4b5b      	ldr	r3, [pc, #364]	@ (800199c <SNAKE_drawGame+0x1e8>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	b299      	uxth	r1, r3
 8001834:	4b5d      	ldr	r3, [pc, #372]	@ (80019ac <SNAKE_drawGame+0x1f8>)
 8001836:	9300      	str	r3, [sp, #0]
 8001838:	2314      	movs	r3, #20
 800183a:	2214      	movs	r2, #20
 800183c:	f004 f83e 	bl	80058bc <ILI9341_DrawImage>

    // Draw the head
    if (current_dir == 1) ILI9341_DrawImage(snake[0].x, snake[0].y, 20, 20, head1);
 8001840:	4b5b      	ldr	r3, [pc, #364]	@ (80019b0 <SNAKE_drawGame+0x1fc>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	2b01      	cmp	r3, #1
 8001846:	d10c      	bne.n	8001862 <SNAKE_drawGame+0xae>
 8001848:	4b5a      	ldr	r3, [pc, #360]	@ (80019b4 <SNAKE_drawGame+0x200>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	b298      	uxth	r0, r3
 800184e:	4b59      	ldr	r3, [pc, #356]	@ (80019b4 <SNAKE_drawGame+0x200>)
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	b299      	uxth	r1, r3
 8001854:	4b58      	ldr	r3, [pc, #352]	@ (80019b8 <SNAKE_drawGame+0x204>)
 8001856:	9300      	str	r3, [sp, #0]
 8001858:	2314      	movs	r3, #20
 800185a:	2214      	movs	r2, #20
 800185c:	f004 f82e 	bl	80058bc <ILI9341_DrawImage>
 8001860:	e031      	b.n	80018c6 <SNAKE_drawGame+0x112>
    else if (current_dir == 2) ILI9341_DrawImage(snake[0].x, snake[0].y, 20, 20, head2);
 8001862:	4b53      	ldr	r3, [pc, #332]	@ (80019b0 <SNAKE_drawGame+0x1fc>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	2b02      	cmp	r3, #2
 8001868:	d10c      	bne.n	8001884 <SNAKE_drawGame+0xd0>
 800186a:	4b52      	ldr	r3, [pc, #328]	@ (80019b4 <SNAKE_drawGame+0x200>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	b298      	uxth	r0, r3
 8001870:	4b50      	ldr	r3, [pc, #320]	@ (80019b4 <SNAKE_drawGame+0x200>)
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	b299      	uxth	r1, r3
 8001876:	4b51      	ldr	r3, [pc, #324]	@ (80019bc <SNAKE_drawGame+0x208>)
 8001878:	9300      	str	r3, [sp, #0]
 800187a:	2314      	movs	r3, #20
 800187c:	2214      	movs	r2, #20
 800187e:	f004 f81d 	bl	80058bc <ILI9341_DrawImage>
 8001882:	e020      	b.n	80018c6 <SNAKE_drawGame+0x112>
    else if (current_dir == 3) ILI9341_DrawImage(snake[0].x, snake[0].y, 20, 20, head3);
 8001884:	4b4a      	ldr	r3, [pc, #296]	@ (80019b0 <SNAKE_drawGame+0x1fc>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	2b03      	cmp	r3, #3
 800188a:	d10c      	bne.n	80018a6 <SNAKE_drawGame+0xf2>
 800188c:	4b49      	ldr	r3, [pc, #292]	@ (80019b4 <SNAKE_drawGame+0x200>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	b298      	uxth	r0, r3
 8001892:	4b48      	ldr	r3, [pc, #288]	@ (80019b4 <SNAKE_drawGame+0x200>)
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	b299      	uxth	r1, r3
 8001898:	4b49      	ldr	r3, [pc, #292]	@ (80019c0 <SNAKE_drawGame+0x20c>)
 800189a:	9300      	str	r3, [sp, #0]
 800189c:	2314      	movs	r3, #20
 800189e:	2214      	movs	r2, #20
 80018a0:	f004 f80c 	bl	80058bc <ILI9341_DrawImage>
 80018a4:	e00f      	b.n	80018c6 <SNAKE_drawGame+0x112>
    else if (current_dir == 4) ILI9341_DrawImage(snake[0].x, snake[0].y, 20, 20, head4);
 80018a6:	4b42      	ldr	r3, [pc, #264]	@ (80019b0 <SNAKE_drawGame+0x1fc>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	2b04      	cmp	r3, #4
 80018ac:	d10b      	bne.n	80018c6 <SNAKE_drawGame+0x112>
 80018ae:	4b41      	ldr	r3, [pc, #260]	@ (80019b4 <SNAKE_drawGame+0x200>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	b298      	uxth	r0, r3
 80018b4:	4b3f      	ldr	r3, [pc, #252]	@ (80019b4 <SNAKE_drawGame+0x200>)
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	b299      	uxth	r1, r3
 80018ba:	4b42      	ldr	r3, [pc, #264]	@ (80019c4 <SNAKE_drawGame+0x210>)
 80018bc:	9300      	str	r3, [sp, #0]
 80018be:	2314      	movs	r3, #20
 80018c0:	2214      	movs	r2, #20
 80018c2:	f003 fffb 	bl	80058bc <ILI9341_DrawImage>

    // Draw the body
    for (int i = 1; i < snakelen; i++) {
 80018c6:	2301      	movs	r3, #1
 80018c8:	607b      	str	r3, [r7, #4]
 80018ca:	e059      	b.n	8001980 <SNAKE_drawGame+0x1cc>
        int body_img_index = (num_body - 1);
 80018cc:	4b3e      	ldr	r3, [pc, #248]	@ (80019c8 <SNAKE_drawGame+0x214>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	3b01      	subs	r3, #1
 80018d2:	603b      	str	r3, [r7, #0]
        if (body_img_index == 0) ILI9341_DrawImage(snake[i].x, snake[i].y, 20, 20, body1);
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d111      	bne.n	80018fe <SNAKE_drawGame+0x14a>
 80018da:	4a36      	ldr	r2, [pc, #216]	@ (80019b4 <SNAKE_drawGame+0x200>)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80018e2:	b298      	uxth	r0, r3
 80018e4:	4a33      	ldr	r2, [pc, #204]	@ (80019b4 <SNAKE_drawGame+0x200>)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	00db      	lsls	r3, r3, #3
 80018ea:	4413      	add	r3, r2
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	b299      	uxth	r1, r3
 80018f0:	4b2b      	ldr	r3, [pc, #172]	@ (80019a0 <SNAKE_drawGame+0x1ec>)
 80018f2:	9300      	str	r3, [sp, #0]
 80018f4:	2314      	movs	r3, #20
 80018f6:	2214      	movs	r2, #20
 80018f8:	f003 ffe0 	bl	80058bc <ILI9341_DrawImage>
 80018fc:	e03d      	b.n	800197a <SNAKE_drawGame+0x1c6>
        else if (body_img_index == 1) ILI9341_DrawImage(snake[i].x, snake[i].y, 20, 20, body2);
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	2b01      	cmp	r3, #1
 8001902:	d111      	bne.n	8001928 <SNAKE_drawGame+0x174>
 8001904:	4a2b      	ldr	r2, [pc, #172]	@ (80019b4 <SNAKE_drawGame+0x200>)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800190c:	b298      	uxth	r0, r3
 800190e:	4a29      	ldr	r2, [pc, #164]	@ (80019b4 <SNAKE_drawGame+0x200>)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	00db      	lsls	r3, r3, #3
 8001914:	4413      	add	r3, r2
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	b299      	uxth	r1, r3
 800191a:	4b22      	ldr	r3, [pc, #136]	@ (80019a4 <SNAKE_drawGame+0x1f0>)
 800191c:	9300      	str	r3, [sp, #0]
 800191e:	2314      	movs	r3, #20
 8001920:	2214      	movs	r2, #20
 8001922:	f003 ffcb 	bl	80058bc <ILI9341_DrawImage>
 8001926:	e028      	b.n	800197a <SNAKE_drawGame+0x1c6>
        else if (body_img_index == 2) ILI9341_DrawImage(snake[i].x, snake[i].y, 20, 20, body3);
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	2b02      	cmp	r3, #2
 800192c:	d111      	bne.n	8001952 <SNAKE_drawGame+0x19e>
 800192e:	4a21      	ldr	r2, [pc, #132]	@ (80019b4 <SNAKE_drawGame+0x200>)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001936:	b298      	uxth	r0, r3
 8001938:	4a1e      	ldr	r2, [pc, #120]	@ (80019b4 <SNAKE_drawGame+0x200>)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	00db      	lsls	r3, r3, #3
 800193e:	4413      	add	r3, r2
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	b299      	uxth	r1, r3
 8001944:	4b18      	ldr	r3, [pc, #96]	@ (80019a8 <SNAKE_drawGame+0x1f4>)
 8001946:	9300      	str	r3, [sp, #0]
 8001948:	2314      	movs	r3, #20
 800194a:	2214      	movs	r2, #20
 800194c:	f003 ffb6 	bl	80058bc <ILI9341_DrawImage>
 8001950:	e013      	b.n	800197a <SNAKE_drawGame+0x1c6>
        else if (body_img_index == 3) ILI9341_DrawImage(snake[i].x, snake[i].y, 20, 20, body4);
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	2b03      	cmp	r3, #3
 8001956:	d110      	bne.n	800197a <SNAKE_drawGame+0x1c6>
 8001958:	4a16      	ldr	r2, [pc, #88]	@ (80019b4 <SNAKE_drawGame+0x200>)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001960:	b298      	uxth	r0, r3
 8001962:	4a14      	ldr	r2, [pc, #80]	@ (80019b4 <SNAKE_drawGame+0x200>)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	00db      	lsls	r3, r3, #3
 8001968:	4413      	add	r3, r2
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	b299      	uxth	r1, r3
 800196e:	4b0f      	ldr	r3, [pc, #60]	@ (80019ac <SNAKE_drawGame+0x1f8>)
 8001970:	9300      	str	r3, [sp, #0]
 8001972:	2314      	movs	r3, #20
 8001974:	2214      	movs	r2, #20
 8001976:	f003 ffa1 	bl	80058bc <ILI9341_DrawImage>
    for (int i = 1; i < snakelen; i++) {
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	3301      	adds	r3, #1
 800197e:	607b      	str	r3, [r7, #4]
 8001980:	4b12      	ldr	r3, [pc, #72]	@ (80019cc <SNAKE_drawGame+0x218>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	687a      	ldr	r2, [r7, #4]
 8001986:	429a      	cmp	r2, r3
 8001988:	dba0      	blt.n	80018cc <SNAKE_drawGame+0x118>
    }
}
 800198a:	bf00      	nop
 800198c:	bf00      	nop
 800198e:	3708      	adds	r7, #8
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	20000008 	.word	0x20000008
 8001998:	20000520 	.word	0x20000520
 800199c:	20000524 	.word	0x20000524
 80019a0:	08009aa0 	.word	0x08009aa0
 80019a4:	08009780 	.word	0x08009780
 80019a8:	08009460 	.word	0x08009460
 80019ac:	08009140 	.word	0x08009140
 80019b0:	2000051c 	.word	0x2000051c
 80019b4:	200001f8 	.word	0x200001f8
 80019b8:	080084c0 	.word	0x080084c0
 80019bc:	080087e0 	.word	0x080087e0
 80019c0:	08008b00 	.word	0x08008b00
 80019c4:	08008e20 	.word	0x08008e20
 80019c8:	2000000c 	.word	0x2000000c
 80019cc:	20000518 	.word	0x20000518

080019d0 <SNAKE_ChangeDirection>:

void SNAKE_ChangeDirection(int new_dir) {
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
    if (new_dir == 1 && current_dir == 3) return; // Right vs Left
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d103      	bne.n	80019e6 <SNAKE_ChangeDirection+0x16>
 80019de:	4b14      	ldr	r3, [pc, #80]	@ (8001a30 <SNAKE_ChangeDirection+0x60>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	2b03      	cmp	r3, #3
 80019e4:	d018      	beq.n	8001a18 <SNAKE_ChangeDirection+0x48>
    if (new_dir == 3 && current_dir == 1) return; // Left vs Right
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2b03      	cmp	r3, #3
 80019ea:	d103      	bne.n	80019f4 <SNAKE_ChangeDirection+0x24>
 80019ec:	4b10      	ldr	r3, [pc, #64]	@ (8001a30 <SNAKE_ChangeDirection+0x60>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d013      	beq.n	8001a1c <SNAKE_ChangeDirection+0x4c>
    if (new_dir == 4 && current_dir == 2) return; // Up vs Down
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2b04      	cmp	r3, #4
 80019f8:	d103      	bne.n	8001a02 <SNAKE_ChangeDirection+0x32>
 80019fa:	4b0d      	ldr	r3, [pc, #52]	@ (8001a30 <SNAKE_ChangeDirection+0x60>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d00e      	beq.n	8001a20 <SNAKE_ChangeDirection+0x50>
    if (new_dir == 2 && current_dir == 4) return; // Down vs Up
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	d103      	bne.n	8001a10 <SNAKE_ChangeDirection+0x40>
 8001a08:	4b09      	ldr	r3, [pc, #36]	@ (8001a30 <SNAKE_ChangeDirection+0x60>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	2b04      	cmp	r3, #4
 8001a0e:	d009      	beq.n	8001a24 <SNAKE_ChangeDirection+0x54>

    current_dir = new_dir;
 8001a10:	4a07      	ldr	r2, [pc, #28]	@ (8001a30 <SNAKE_ChangeDirection+0x60>)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6013      	str	r3, [r2, #0]
 8001a16:	e006      	b.n	8001a26 <SNAKE_ChangeDirection+0x56>
    if (new_dir == 1 && current_dir == 3) return; // Right vs Left
 8001a18:	bf00      	nop
 8001a1a:	e004      	b.n	8001a26 <SNAKE_ChangeDirection+0x56>
    if (new_dir == 3 && current_dir == 1) return; // Left vs Right
 8001a1c:	bf00      	nop
 8001a1e:	e002      	b.n	8001a26 <SNAKE_ChangeDirection+0x56>
    if (new_dir == 4 && current_dir == 2) return; // Up vs Down
 8001a20:	bf00      	nop
 8001a22:	e000      	b.n	8001a26 <SNAKE_ChangeDirection+0x56>
    if (new_dir == 2 && current_dir == 4) return; // Down vs Up
 8001a24:	bf00      	nop
}
 8001a26:	370c      	adds	r7, #12
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr
 8001a30:	2000051c 	.word	0x2000051c

08001a34 <SNAKE_getOver>:

bool SNAKE_getOver(void) {
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
    return isover;
 8001a38:	4b03      	ldr	r3, [pc, #12]	@ (8001a48 <SNAKE_getOver+0x14>)
 8001a3a:	781b      	ldrb	r3, [r3, #0]
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	20000528 	.word	0x20000528

08001a4c <resetBall>:
static int16_t prevPlayerPaddleY, prevAiPaddleY, prevBallX, prevBallY;
static int8_t ballDX, ballDY;
static uint32_t playerLosses;
static bool gameOver = false;

static void resetBall() {
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
    ballX = ILI9341_WIDTH / 2 - BALL_SIZE / 2;
 8001a50:	4b10      	ldr	r3, [pc, #64]	@ (8001a94 <resetBall+0x48>)
 8001a52:	229b      	movs	r2, #155	@ 0x9b
 8001a54:	801a      	strh	r2, [r3, #0]
    ballY = ILI9341_HEIGHT / 2 - BALL_SIZE / 2;
 8001a56:	4b10      	ldr	r3, [pc, #64]	@ (8001a98 <resetBall+0x4c>)
 8001a58:	2273      	movs	r2, #115	@ 0x73
 8001a5a:	801a      	strh	r2, [r3, #0]
    ballDX = (HAL_GetTick() % 2 == 0) ? 2 : -2;
 8001a5c:	f000 fb38 	bl	80020d0 <HAL_GetTick>
 8001a60:	4603      	mov	r3, r0
 8001a62:	f003 0301 	and.w	r3, r3, #1
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d101      	bne.n	8001a6e <resetBall+0x22>
 8001a6a:	2202      	movs	r2, #2
 8001a6c:	e001      	b.n	8001a72 <resetBall+0x26>
 8001a6e:	f06f 0201 	mvn.w	r2, #1
 8001a72:	4b0a      	ldr	r3, [pc, #40]	@ (8001a9c <resetBall+0x50>)
 8001a74:	701a      	strb	r2, [r3, #0]
    ballDY = (HAL_GetTick() % 2 == 0) ? 2 : -2;
 8001a76:	f000 fb2b 	bl	80020d0 <HAL_GetTick>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	f003 0301 	and.w	r3, r3, #1
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d101      	bne.n	8001a88 <resetBall+0x3c>
 8001a84:	2202      	movs	r2, #2
 8001a86:	e001      	b.n	8001a8c <resetBall+0x40>
 8001a88:	f06f 0201 	mvn.w	r2, #1
 8001a8c:	4b04      	ldr	r3, [pc, #16]	@ (8001aa0 <resetBall+0x54>)
 8001a8e:	701a      	strb	r2, [r3, #0]
}
 8001a90:	bf00      	nop
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	2000052e 	.word	0x2000052e
 8001a98:	20000530 	.word	0x20000530
 8001a9c:	2000053a 	.word	0x2000053a
 8001aa0:	2000053b 	.word	0x2000053b

08001aa4 <PingPong_Init>:

void PingPong_Init(void) {
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
    playerPaddleY = ILI9341_HEIGHT / 2 - PADDLE_HEIGHT / 2;
 8001aa8:	4b11      	ldr	r3, [pc, #68]	@ (8001af0 <PingPong_Init+0x4c>)
 8001aaa:	2269      	movs	r2, #105	@ 0x69
 8001aac:	801a      	strh	r2, [r3, #0]
    aiPaddleY = ILI9341_HEIGHT / 2 - PADDLE_HEIGHT / 2;
 8001aae:	4b11      	ldr	r3, [pc, #68]	@ (8001af4 <PingPong_Init+0x50>)
 8001ab0:	2269      	movs	r2, #105	@ 0x69
 8001ab2:	801a      	strh	r2, [r3, #0]
    playerLosses = 0;
 8001ab4:	4b10      	ldr	r3, [pc, #64]	@ (8001af8 <PingPong_Init+0x54>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	601a      	str	r2, [r3, #0]
    gameOver = false;
 8001aba:	4b10      	ldr	r3, [pc, #64]	@ (8001afc <PingPong_Init+0x58>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	701a      	strb	r2, [r3, #0]
    resetBall();
 8001ac0:	f7ff ffc4 	bl	8001a4c <resetBall>

    prevPlayerPaddleY = playerPaddleY;
 8001ac4:	4b0a      	ldr	r3, [pc, #40]	@ (8001af0 <PingPong_Init+0x4c>)
 8001ac6:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001aca:	4b0d      	ldr	r3, [pc, #52]	@ (8001b00 <PingPong_Init+0x5c>)
 8001acc:	801a      	strh	r2, [r3, #0]
    prevAiPaddleY = aiPaddleY;
 8001ace:	4b09      	ldr	r3, [pc, #36]	@ (8001af4 <PingPong_Init+0x50>)
 8001ad0:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001ad4:	4b0b      	ldr	r3, [pc, #44]	@ (8001b04 <PingPong_Init+0x60>)
 8001ad6:	801a      	strh	r2, [r3, #0]
    prevBallX = ballX;
 8001ad8:	4b0b      	ldr	r3, [pc, #44]	@ (8001b08 <PingPong_Init+0x64>)
 8001ada:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001ade:	4b0b      	ldr	r3, [pc, #44]	@ (8001b0c <PingPong_Init+0x68>)
 8001ae0:	801a      	strh	r2, [r3, #0]
    prevBallY = ballY;
 8001ae2:	4b0b      	ldr	r3, [pc, #44]	@ (8001b10 <PingPong_Init+0x6c>)
 8001ae4:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001ae8:	4b0a      	ldr	r3, [pc, #40]	@ (8001b14 <PingPong_Init+0x70>)
 8001aea:	801a      	strh	r2, [r3, #0]
}
 8001aec:	bf00      	nop
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	2000052a 	.word	0x2000052a
 8001af4:	2000052c 	.word	0x2000052c
 8001af8:	2000053c 	.word	0x2000053c
 8001afc:	20000540 	.word	0x20000540
 8001b00:	20000532 	.word	0x20000532
 8001b04:	20000534 	.word	0x20000534
 8001b08:	2000052e 	.word	0x2000052e
 8001b0c:	20000536 	.word	0x20000536
 8001b10:	20000530 	.word	0x20000530
 8001b14:	20000538 	.word	0x20000538

08001b18 <PingPong_Update>:

void PingPong_Update(bool up_button, bool down_button) {
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	4603      	mov	r3, r0
 8001b20:	460a      	mov	r2, r1
 8001b22:	71fb      	strb	r3, [r7, #7]
 8001b24:	4613      	mov	r3, r2
 8001b26:	71bb      	strb	r3, [r7, #6]
    if (gameOver) {
 8001b28:	4b8a      	ldr	r3, [pc, #552]	@ (8001d54 <PingPong_Update+0x23c>)
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	f040 810c 	bne.w	8001d4a <PingPong_Update+0x232>
        return;
    }

    prevPlayerPaddleY = playerPaddleY;
 8001b32:	4b89      	ldr	r3, [pc, #548]	@ (8001d58 <PingPong_Update+0x240>)
 8001b34:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001b38:	4b88      	ldr	r3, [pc, #544]	@ (8001d5c <PingPong_Update+0x244>)
 8001b3a:	801a      	strh	r2, [r3, #0]
    prevAiPaddleY = aiPaddleY;
 8001b3c:	4b88      	ldr	r3, [pc, #544]	@ (8001d60 <PingPong_Update+0x248>)
 8001b3e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001b42:	4b88      	ldr	r3, [pc, #544]	@ (8001d64 <PingPong_Update+0x24c>)
 8001b44:	801a      	strh	r2, [r3, #0]
    prevBallX = ballX;
 8001b46:	4b88      	ldr	r3, [pc, #544]	@ (8001d68 <PingPong_Update+0x250>)
 8001b48:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001b4c:	4b87      	ldr	r3, [pc, #540]	@ (8001d6c <PingPong_Update+0x254>)
 8001b4e:	801a      	strh	r2, [r3, #0]
    prevBallY = ballY;
 8001b50:	4b87      	ldr	r3, [pc, #540]	@ (8001d70 <PingPong_Update+0x258>)
 8001b52:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001b56:	4b87      	ldr	r3, [pc, #540]	@ (8001d74 <PingPong_Update+0x25c>)
 8001b58:	801a      	strh	r2, [r3, #0]

    int16_t playerSpeed = 3;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	81fb      	strh	r3, [r7, #14]
    if (up_button && playerPaddleY > 0) {
 8001b5e:	79fb      	ldrb	r3, [r7, #7]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d00e      	beq.n	8001b82 <PingPong_Update+0x6a>
 8001b64:	4b7c      	ldr	r3, [pc, #496]	@ (8001d58 <PingPong_Update+0x240>)
 8001b66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	dd09      	ble.n	8001b82 <PingPong_Update+0x6a>
        playerPaddleY -= playerSpeed;
 8001b6e:	4b7a      	ldr	r3, [pc, #488]	@ (8001d58 <PingPong_Update+0x240>)
 8001b70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b74:	b29a      	uxth	r2, r3
 8001b76:	89fb      	ldrh	r3, [r7, #14]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	b29b      	uxth	r3, r3
 8001b7c:	b21a      	sxth	r2, r3
 8001b7e:	4b76      	ldr	r3, [pc, #472]	@ (8001d58 <PingPong_Update+0x240>)
 8001b80:	801a      	strh	r2, [r3, #0]
    }
    if (down_button && playerPaddleY < ILI9341_HEIGHT - PADDLE_HEIGHT) {
 8001b82:	79bb      	ldrb	r3, [r7, #6]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d00e      	beq.n	8001ba6 <PingPong_Update+0x8e>
 8001b88:	4b73      	ldr	r3, [pc, #460]	@ (8001d58 <PingPong_Update+0x240>)
 8001b8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b8e:	2bd1      	cmp	r3, #209	@ 0xd1
 8001b90:	dc09      	bgt.n	8001ba6 <PingPong_Update+0x8e>
        playerPaddleY += playerSpeed;
 8001b92:	4b71      	ldr	r3, [pc, #452]	@ (8001d58 <PingPong_Update+0x240>)
 8001b94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b98:	b29a      	uxth	r2, r3
 8001b9a:	89fb      	ldrh	r3, [r7, #14]
 8001b9c:	4413      	add	r3, r2
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	b21a      	sxth	r2, r3
 8001ba2:	4b6d      	ldr	r3, [pc, #436]	@ (8001d58 <PingPong_Update+0x240>)
 8001ba4:	801a      	strh	r2, [r3, #0]
    }

    int16_t aiSpeed = 2;
 8001ba6:	2302      	movs	r3, #2
 8001ba8:	81bb      	strh	r3, [r7, #12]
    if (ballY > aiPaddleY + PADDLE_HEIGHT / 2) {
 8001baa:	4b71      	ldr	r3, [pc, #452]	@ (8001d70 <PingPong_Update+0x258>)
 8001bac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	4b6b      	ldr	r3, [pc, #428]	@ (8001d60 <PingPong_Update+0x248>)
 8001bb4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bb8:	330f      	adds	r3, #15
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	dd0a      	ble.n	8001bd4 <PingPong_Update+0xbc>
        aiPaddleY += aiSpeed;
 8001bbe:	4b68      	ldr	r3, [pc, #416]	@ (8001d60 <PingPong_Update+0x248>)
 8001bc0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bc4:	b29a      	uxth	r2, r3
 8001bc6:	89bb      	ldrh	r3, [r7, #12]
 8001bc8:	4413      	add	r3, r2
 8001bca:	b29b      	uxth	r3, r3
 8001bcc:	b21a      	sxth	r2, r3
 8001bce:	4b64      	ldr	r3, [pc, #400]	@ (8001d60 <PingPong_Update+0x248>)
 8001bd0:	801a      	strh	r2, [r3, #0]
 8001bd2:	e012      	b.n	8001bfa <PingPong_Update+0xe2>
    } else if (ballY < aiPaddleY + PADDLE_HEIGHT / 2) {
 8001bd4:	4b62      	ldr	r3, [pc, #392]	@ (8001d60 <PingPong_Update+0x248>)
 8001bd6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bda:	330e      	adds	r3, #14
 8001bdc:	4a64      	ldr	r2, [pc, #400]	@ (8001d70 <PingPong_Update+0x258>)
 8001bde:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001be2:	4293      	cmp	r3, r2
 8001be4:	db09      	blt.n	8001bfa <PingPong_Update+0xe2>
        aiPaddleY -= aiSpeed;
 8001be6:	4b5e      	ldr	r3, [pc, #376]	@ (8001d60 <PingPong_Update+0x248>)
 8001be8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bec:	b29a      	uxth	r2, r3
 8001bee:	89bb      	ldrh	r3, [r7, #12]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	b29b      	uxth	r3, r3
 8001bf4:	b21a      	sxth	r2, r3
 8001bf6:	4b5a      	ldr	r3, [pc, #360]	@ (8001d60 <PingPong_Update+0x248>)
 8001bf8:	801a      	strh	r2, [r3, #0]
    }

    if (aiPaddleY < 0) aiPaddleY = 0;
 8001bfa:	4b59      	ldr	r3, [pc, #356]	@ (8001d60 <PingPong_Update+0x248>)
 8001bfc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	da02      	bge.n	8001c0a <PingPong_Update+0xf2>
 8001c04:	4b56      	ldr	r3, [pc, #344]	@ (8001d60 <PingPong_Update+0x248>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	801a      	strh	r2, [r3, #0]
    if (aiPaddleY > ILI9341_HEIGHT - PADDLE_HEIGHT) aiPaddleY = ILI9341_HEIGHT - PADDLE_HEIGHT;
 8001c0a:	4b55      	ldr	r3, [pc, #340]	@ (8001d60 <PingPong_Update+0x248>)
 8001c0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c10:	2bd2      	cmp	r3, #210	@ 0xd2
 8001c12:	dd02      	ble.n	8001c1a <PingPong_Update+0x102>
 8001c14:	4b52      	ldr	r3, [pc, #328]	@ (8001d60 <PingPong_Update+0x248>)
 8001c16:	22d2      	movs	r2, #210	@ 0xd2
 8001c18:	801a      	strh	r2, [r3, #0]

    ballX += ballDX;
 8001c1a:	4b57      	ldr	r3, [pc, #348]	@ (8001d78 <PingPong_Update+0x260>)
 8001c1c:	f993 3000 	ldrsb.w	r3, [r3]
 8001c20:	b29a      	uxth	r2, r3
 8001c22:	4b51      	ldr	r3, [pc, #324]	@ (8001d68 <PingPong_Update+0x250>)
 8001c24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c28:	b29b      	uxth	r3, r3
 8001c2a:	4413      	add	r3, r2
 8001c2c:	b29b      	uxth	r3, r3
 8001c2e:	b21a      	sxth	r2, r3
 8001c30:	4b4d      	ldr	r3, [pc, #308]	@ (8001d68 <PingPong_Update+0x250>)
 8001c32:	801a      	strh	r2, [r3, #0]
    ballY += ballDY;
 8001c34:	4b51      	ldr	r3, [pc, #324]	@ (8001d7c <PingPong_Update+0x264>)
 8001c36:	f993 3000 	ldrsb.w	r3, [r3]
 8001c3a:	b29a      	uxth	r2, r3
 8001c3c:	4b4c      	ldr	r3, [pc, #304]	@ (8001d70 <PingPong_Update+0x258>)
 8001c3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c42:	b29b      	uxth	r3, r3
 8001c44:	4413      	add	r3, r2
 8001c46:	b29b      	uxth	r3, r3
 8001c48:	b21a      	sxth	r2, r3
 8001c4a:	4b49      	ldr	r3, [pc, #292]	@ (8001d70 <PingPong_Update+0x258>)
 8001c4c:	801a      	strh	r2, [r3, #0]

    if (ballY <= 0 || ballY >= ILI9341_HEIGHT - BALL_SIZE) {
 8001c4e:	4b48      	ldr	r3, [pc, #288]	@ (8001d70 <PingPong_Update+0x258>)
 8001c50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	dd04      	ble.n	8001c62 <PingPong_Update+0x14a>
 8001c58:	4b45      	ldr	r3, [pc, #276]	@ (8001d70 <PingPong_Update+0x258>)
 8001c5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c5e:	2be5      	cmp	r3, #229	@ 0xe5
 8001c60:	dd08      	ble.n	8001c74 <PingPong_Update+0x15c>
        ballDY = -ballDY;
 8001c62:	4b46      	ldr	r3, [pc, #280]	@ (8001d7c <PingPong_Update+0x264>)
 8001c64:	f993 3000 	ldrsb.w	r3, [r3]
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	425b      	negs	r3, r3
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	b25a      	sxtb	r2, r3
 8001c70:	4b42      	ldr	r3, [pc, #264]	@ (8001d7c <PingPong_Update+0x264>)
 8001c72:	701a      	strb	r2, [r3, #0]
    }

    if (ballX <= 10 + PADDLE_WIDTH && ballX >= 10 &&
 8001c74:	4b3c      	ldr	r3, [pc, #240]	@ (8001d68 <PingPong_Update+0x250>)
 8001c76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c7a:	2b1e      	cmp	r3, #30
 8001c7c:	dc20      	bgt.n	8001cc0 <PingPong_Update+0x1a8>
 8001c7e:	4b3a      	ldr	r3, [pc, #232]	@ (8001d68 <PingPong_Update+0x250>)
 8001c80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c84:	2b09      	cmp	r3, #9
 8001c86:	dd1b      	ble.n	8001cc0 <PingPong_Update+0x1a8>
        ballY + BALL_SIZE >= playerPaddleY && ballY <= playerPaddleY + PADDLE_HEIGHT) {
 8001c88:	4b39      	ldr	r3, [pc, #228]	@ (8001d70 <PingPong_Update+0x258>)
 8001c8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c8e:	330a      	adds	r3, #10
 8001c90:	4a31      	ldr	r2, [pc, #196]	@ (8001d58 <PingPong_Update+0x240>)
 8001c92:	f9b2 2000 	ldrsh.w	r2, [r2]
    if (ballX <= 10 + PADDLE_WIDTH && ballX >= 10 &&
 8001c96:	4293      	cmp	r3, r2
 8001c98:	db12      	blt.n	8001cc0 <PingPong_Update+0x1a8>
        ballY + BALL_SIZE >= playerPaddleY && ballY <= playerPaddleY + PADDLE_HEIGHT) {
 8001c9a:	4b35      	ldr	r3, [pc, #212]	@ (8001d70 <PingPong_Update+0x258>)
 8001c9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	4b2d      	ldr	r3, [pc, #180]	@ (8001d58 <PingPong_Update+0x240>)
 8001ca4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ca8:	331e      	adds	r3, #30
 8001caa:	429a      	cmp	r2, r3
 8001cac:	dc08      	bgt.n	8001cc0 <PingPong_Update+0x1a8>
        ballDX = -ballDX;
 8001cae:	4b32      	ldr	r3, [pc, #200]	@ (8001d78 <PingPong_Update+0x260>)
 8001cb0:	f993 3000 	ldrsb.w	r3, [r3]
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	425b      	negs	r3, r3
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	b25a      	sxtb	r2, r3
 8001cbc:	4b2e      	ldr	r3, [pc, #184]	@ (8001d78 <PingPong_Update+0x260>)
 8001cbe:	701a      	strb	r2, [r3, #0]
    }

    if (ballX + BALL_SIZE >= ILI9341_WIDTH - 15 && ballX + BALL_SIZE <= ILI9341_WIDTH - 15 + PADDLE_WIDTH &&
 8001cc0:	4b29      	ldr	r3, [pc, #164]	@ (8001d68 <PingPong_Update+0x250>)
 8001cc2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cc6:	f5b3 7f93 	cmp.w	r3, #294	@ 0x126
 8001cca:	dd21      	ble.n	8001d10 <PingPong_Update+0x1f8>
 8001ccc:	4b26      	ldr	r3, [pc, #152]	@ (8001d68 <PingPong_Update+0x250>)
 8001cce:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cd2:	f5b3 7f9e 	cmp.w	r3, #316	@ 0x13c
 8001cd6:	da1b      	bge.n	8001d10 <PingPong_Update+0x1f8>
        ballY + BALL_SIZE >= aiPaddleY && ballY <= aiPaddleY + PADDLE_HEIGHT) {
 8001cd8:	4b25      	ldr	r3, [pc, #148]	@ (8001d70 <PingPong_Update+0x258>)
 8001cda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cde:	330a      	adds	r3, #10
 8001ce0:	4a1f      	ldr	r2, [pc, #124]	@ (8001d60 <PingPong_Update+0x248>)
 8001ce2:	f9b2 2000 	ldrsh.w	r2, [r2]
    if (ballX + BALL_SIZE >= ILI9341_WIDTH - 15 && ballX + BALL_SIZE <= ILI9341_WIDTH - 15 + PADDLE_WIDTH &&
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	db12      	blt.n	8001d10 <PingPong_Update+0x1f8>
        ballY + BALL_SIZE >= aiPaddleY && ballY <= aiPaddleY + PADDLE_HEIGHT) {
 8001cea:	4b21      	ldr	r3, [pc, #132]	@ (8001d70 <PingPong_Update+0x258>)
 8001cec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	4b1b      	ldr	r3, [pc, #108]	@ (8001d60 <PingPong_Update+0x248>)
 8001cf4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cf8:	331e      	adds	r3, #30
 8001cfa:	429a      	cmp	r2, r3
 8001cfc:	dc08      	bgt.n	8001d10 <PingPong_Update+0x1f8>
        ballDX = -ballDX;
 8001cfe:	4b1e      	ldr	r3, [pc, #120]	@ (8001d78 <PingPong_Update+0x260>)
 8001d00:	f993 3000 	ldrsb.w	r3, [r3]
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	425b      	negs	r3, r3
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	b25a      	sxtb	r2, r3
 8001d0c:	4b1a      	ldr	r3, [pc, #104]	@ (8001d78 <PingPong_Update+0x260>)
 8001d0e:	701a      	strb	r2, [r3, #0]
    }

    if (ballX < 0) {
 8001d10:	4b15      	ldr	r3, [pc, #84]	@ (8001d68 <PingPong_Update+0x250>)
 8001d12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	da0e      	bge.n	8001d38 <PingPong_Update+0x220>
        playerLosses++;
 8001d1a:	4b19      	ldr	r3, [pc, #100]	@ (8001d80 <PingPong_Update+0x268>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	3301      	adds	r3, #1
 8001d20:	4a17      	ldr	r2, [pc, #92]	@ (8001d80 <PingPong_Update+0x268>)
 8001d22:	6013      	str	r3, [r2, #0]
        if (playerLosses >= 5) {
 8001d24:	4b16      	ldr	r3, [pc, #88]	@ (8001d80 <PingPong_Update+0x268>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	2b04      	cmp	r3, #4
 8001d2a:	d902      	bls.n	8001d32 <PingPong_Update+0x21a>
            gameOver = true;
 8001d2c:	4b09      	ldr	r3, [pc, #36]	@ (8001d54 <PingPong_Update+0x23c>)
 8001d2e:	2201      	movs	r2, #1
 8001d30:	701a      	strb	r2, [r3, #0]
        }
        resetBall();
 8001d32:	f7ff fe8b 	bl	8001a4c <resetBall>
 8001d36:	e009      	b.n	8001d4c <PingPong_Update+0x234>
    } else if (ballX > ILI9341_WIDTH) {
 8001d38:	4b0b      	ldr	r3, [pc, #44]	@ (8001d68 <PingPong_Update+0x250>)
 8001d3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d3e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001d42:	dd03      	ble.n	8001d4c <PingPong_Update+0x234>
        resetBall();
 8001d44:	f7ff fe82 	bl	8001a4c <resetBall>
 8001d48:	e000      	b.n	8001d4c <PingPong_Update+0x234>
        return;
 8001d4a:	bf00      	nop
    }
}
 8001d4c:	3710      	adds	r7, #16
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	20000540 	.word	0x20000540
 8001d58:	2000052a 	.word	0x2000052a
 8001d5c:	20000532 	.word	0x20000532
 8001d60:	2000052c 	.word	0x2000052c
 8001d64:	20000534 	.word	0x20000534
 8001d68:	2000052e 	.word	0x2000052e
 8001d6c:	20000536 	.word	0x20000536
 8001d70:	20000530 	.word	0x20000530
 8001d74:	20000538 	.word	0x20000538
 8001d78:	2000053a 	.word	0x2000053a
 8001d7c:	2000053b 	.word	0x2000053b
 8001d80:	2000053c 	.word	0x2000053c

08001d84 <PingPong_Draw>:

void PingPong_Draw(void) {
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b088      	sub	sp, #32
 8001d88:	af04      	add	r7, sp, #16
    if (gameOver) {
 8001d8a:	4b35      	ldr	r3, [pc, #212]	@ (8001e60 <PingPong_Draw+0xdc>)
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d017      	beq.n	8001dc2 <PingPong_Draw+0x3e>
        ILI9341_FillScreen(ILI9341_BLACK);
 8001d92:	2000      	movs	r0, #0
 8001d94:	f003 fd80 	bl	8005898 <ILI9341_FillScreen>
        char temp_msg[] = "Game Over";
 8001d98:	4a32      	ldr	r2, [pc, #200]	@ (8001e64 <PingPong_Draw+0xe0>)
 8001d9a:	1d3b      	adds	r3, r7, #4
 8001d9c:	ca07      	ldmia	r2, {r0, r1, r2}
 8001d9e:	c303      	stmia	r3!, {r0, r1}
 8001da0:	801a      	strh	r2, [r3, #0]
        ILI9341_WriteString(ILI9341_WIDTH / 2 - 50, ILI9341_HEIGHT / 2, temp_msg, Font_16x26, ILI9341_RED, ILI9341_BLACK);
 8001da2:	4b31      	ldr	r3, [pc, #196]	@ (8001e68 <PingPong_Draw+0xe4>)
 8001da4:	1d39      	adds	r1, r7, #4
 8001da6:	2200      	movs	r2, #0
 8001da8:	9202      	str	r2, [sp, #8]
 8001daa:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8001dae:	9201      	str	r2, [sp, #4]
 8001db0:	685a      	ldr	r2, [r3, #4]
 8001db2:	9200      	str	r2, [sp, #0]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	460a      	mov	r2, r1
 8001db8:	2178      	movs	r1, #120	@ 0x78
 8001dba:	206e      	movs	r0, #110	@ 0x6e
 8001dbc:	f003 fcb2 	bl	8005724 <ILI9341_WriteString>

        ILI9341_DrawImage(10, playerPaddleY, PADDLE_WIDTH, PADDLE_HEIGHT, paddle);
        ILI9341_DrawImage(ILI9341_WIDTH - 10, aiPaddleY, PADDLE_WIDTH, PADDLE_HEIGHT, paddle);
        ILI9341_DrawImage(ballX, ballY, BALL_SIZE, BALL_SIZE, ball);
    }
}
 8001dc0:	e049      	b.n	8001e56 <PingPong_Draw+0xd2>
        ILI9341_FillRectangle(10, prevPlayerPaddleY, PADDLE_WIDTH, PADDLE_HEIGHT, ILI9341_BLACK);
 8001dc2:	4b2a      	ldr	r3, [pc, #168]	@ (8001e6c <PingPong_Draw+0xe8>)
 8001dc4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dc8:	b299      	uxth	r1, r3
 8001dca:	2300      	movs	r3, #0
 8001dcc:	9300      	str	r3, [sp, #0]
 8001dce:	231e      	movs	r3, #30
 8001dd0:	2214      	movs	r2, #20
 8001dd2:	200a      	movs	r0, #10
 8001dd4:	f003 fcf2 	bl	80057bc <ILI9341_FillRectangle>
        ILI9341_FillRectangle(ILI9341_WIDTH - 15, prevAiPaddleY, PADDLE_WIDTH, PADDLE_HEIGHT, ILI9341_BLACK);
 8001dd8:	4b25      	ldr	r3, [pc, #148]	@ (8001e70 <PingPong_Draw+0xec>)
 8001dda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dde:	b299      	uxth	r1, r3
 8001de0:	2300      	movs	r3, #0
 8001de2:	9300      	str	r3, [sp, #0]
 8001de4:	231e      	movs	r3, #30
 8001de6:	2214      	movs	r2, #20
 8001de8:	f240 1031 	movw	r0, #305	@ 0x131
 8001dec:	f003 fce6 	bl	80057bc <ILI9341_FillRectangle>
        ILI9341_FillRectangle(prevBallX, prevBallY, BALL_SIZE, BALL_SIZE, ILI9341_BLACK);
 8001df0:	4b20      	ldr	r3, [pc, #128]	@ (8001e74 <PingPong_Draw+0xf0>)
 8001df2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001df6:	b298      	uxth	r0, r3
 8001df8:	4b1f      	ldr	r3, [pc, #124]	@ (8001e78 <PingPong_Draw+0xf4>)
 8001dfa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dfe:	b299      	uxth	r1, r3
 8001e00:	2300      	movs	r3, #0
 8001e02:	9300      	str	r3, [sp, #0]
 8001e04:	230a      	movs	r3, #10
 8001e06:	220a      	movs	r2, #10
 8001e08:	f003 fcd8 	bl	80057bc <ILI9341_FillRectangle>
        ILI9341_DrawImage(10, playerPaddleY, PADDLE_WIDTH, PADDLE_HEIGHT, paddle);
 8001e0c:	4b1b      	ldr	r3, [pc, #108]	@ (8001e7c <PingPong_Draw+0xf8>)
 8001e0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e12:	b299      	uxth	r1, r3
 8001e14:	4b1a      	ldr	r3, [pc, #104]	@ (8001e80 <PingPong_Draw+0xfc>)
 8001e16:	9300      	str	r3, [sp, #0]
 8001e18:	231e      	movs	r3, #30
 8001e1a:	2214      	movs	r2, #20
 8001e1c:	200a      	movs	r0, #10
 8001e1e:	f003 fd4d 	bl	80058bc <ILI9341_DrawImage>
        ILI9341_DrawImage(ILI9341_WIDTH - 10, aiPaddleY, PADDLE_WIDTH, PADDLE_HEIGHT, paddle);
 8001e22:	4b18      	ldr	r3, [pc, #96]	@ (8001e84 <PingPong_Draw+0x100>)
 8001e24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e28:	b299      	uxth	r1, r3
 8001e2a:	4b15      	ldr	r3, [pc, #84]	@ (8001e80 <PingPong_Draw+0xfc>)
 8001e2c:	9300      	str	r3, [sp, #0]
 8001e2e:	231e      	movs	r3, #30
 8001e30:	2214      	movs	r2, #20
 8001e32:	f44f 709b 	mov.w	r0, #310	@ 0x136
 8001e36:	f003 fd41 	bl	80058bc <ILI9341_DrawImage>
        ILI9341_DrawImage(ballX, ballY, BALL_SIZE, BALL_SIZE, ball);
 8001e3a:	4b13      	ldr	r3, [pc, #76]	@ (8001e88 <PingPong_Draw+0x104>)
 8001e3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e40:	b298      	uxth	r0, r3
 8001e42:	4b12      	ldr	r3, [pc, #72]	@ (8001e8c <PingPong_Draw+0x108>)
 8001e44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e48:	b299      	uxth	r1, r3
 8001e4a:	4b11      	ldr	r3, [pc, #68]	@ (8001e90 <PingPong_Draw+0x10c>)
 8001e4c:	9300      	str	r3, [sp, #0]
 8001e4e:	230a      	movs	r3, #10
 8001e50:	220a      	movs	r2, #10
 8001e52:	f003 fd33 	bl	80058bc <ILI9341_DrawImage>
}
 8001e56:	bf00      	nop
 8001e58:	3710      	adds	r7, #16
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	20000540 	.word	0x20000540
 8001e64:	080069b0 	.word	0x080069b0
 8001e68:	20000020 	.word	0x20000020
 8001e6c:	20000532 	.word	0x20000532
 8001e70:	20000534 	.word	0x20000534
 8001e74:	20000536 	.word	0x20000536
 8001e78:	20000538 	.word	0x20000538
 8001e7c:	2000052a 	.word	0x2000052a
 8001e80:	08063444 	.word	0x08063444
 8001e84:	2000052c 	.word	0x2000052c
 8001e88:	2000052e 	.word	0x2000052e
 8001e8c:	20000530 	.word	0x20000530
 8001e90:	080638f4 	.word	0x080638f4

08001e94 <PingPong_IsGameOver>:

bool PingPong_IsGameOver(void) {
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
    return gameOver;
 8001e98:	4b03      	ldr	r3, [pc, #12]	@ (8001ea8 <PingPong_IsGameOver+0x14>)
 8001e9a:	781b      	ldrb	r3, [r3, #0]
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	20000540 	.word	0x20000540

08001eac <MPU6050_Init>:
#include <main.h>
#include <stdio.h>

extern I2C_HandleTypeDef hi2c2;

void MPU6050_Init(void){
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b086      	sub	sp, #24
 8001eb0:	af04      	add	r7, sp, #16
	uint8_t check, data;
	HAL_I2C_Mem_Read(&hi2c2, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, 1000);
 8001eb2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001eb6:	9302      	str	r3, [sp, #8]
 8001eb8:	2301      	movs	r3, #1
 8001eba:	9301      	str	r3, [sp, #4]
 8001ebc:	1dfb      	adds	r3, r7, #7
 8001ebe:	9300      	str	r3, [sp, #0]
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	2275      	movs	r2, #117	@ 0x75
 8001ec4:	21d0      	movs	r1, #208	@ 0xd0
 8001ec6:	482a      	ldr	r0, [pc, #168]	@ (8001f70 <MPU6050_Init+0xc4>)
 8001ec8:	f001 fa24 	bl	8003314 <HAL_I2C_Mem_Read>

	if(check == 104){
 8001ecc:	79fb      	ldrb	r3, [r7, #7]
 8001ece:	2b68      	cmp	r3, #104	@ 0x68
 8001ed0:	d14a      	bne.n	8001f68 <MPU6050_Init+0xbc>
		data = 0;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &data, 1, 1000);	//Wake up
 8001ed6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001eda:	9302      	str	r3, [sp, #8]
 8001edc:	2301      	movs	r3, #1
 8001ede:	9301      	str	r3, [sp, #4]
 8001ee0:	1dbb      	adds	r3, r7, #6
 8001ee2:	9300      	str	r3, [sp, #0]
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	226b      	movs	r2, #107	@ 0x6b
 8001ee8:	21d0      	movs	r1, #208	@ 0xd0
 8001eea:	4821      	ldr	r0, [pc, #132]	@ (8001f70 <MPU6050_Init+0xc4>)
 8001eec:	f001 f918 	bl	8003120 <HAL_I2C_Mem_Write>

		data = 0x07;
 8001ef0:	2307      	movs	r3, #7
 8001ef2:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &data, 1, 1000);	//Sample Rate Divider to 7
 8001ef4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ef8:	9302      	str	r3, [sp, #8]
 8001efa:	2301      	movs	r3, #1
 8001efc:	9301      	str	r3, [sp, #4]
 8001efe:	1dbb      	adds	r3, r7, #6
 8001f00:	9300      	str	r3, [sp, #0]
 8001f02:	2301      	movs	r3, #1
 8001f04:	2219      	movs	r2, #25
 8001f06:	21d0      	movs	r1, #208	@ 0xd0
 8001f08:	4819      	ldr	r0, [pc, #100]	@ (8001f70 <MPU6050_Init+0xc4>)
 8001f0a:	f001 f909 	bl	8003120 <HAL_I2C_Mem_Write>

		data = 0x00;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &data, 1, 1000);	//FS_SEL = 0
 8001f12:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f16:	9302      	str	r3, [sp, #8]
 8001f18:	2301      	movs	r3, #1
 8001f1a:	9301      	str	r3, [sp, #4]
 8001f1c:	1dbb      	adds	r3, r7, #6
 8001f1e:	9300      	str	r3, [sp, #0]
 8001f20:	2301      	movs	r3, #1
 8001f22:	221b      	movs	r2, #27
 8001f24:	21d0      	movs	r1, #208	@ 0xd0
 8001f26:	4812      	ldr	r0, [pc, #72]	@ (8001f70 <MPU6050_Init+0xc4>)
 8001f28:	f001 f8fa 	bl	8003120 <HAL_I2C_Mem_Write>

		data = 0x00;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &data, 1, 1000);	//AFS_SEL = 0
 8001f30:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f34:	9302      	str	r3, [sp, #8]
 8001f36:	2301      	movs	r3, #1
 8001f38:	9301      	str	r3, [sp, #4]
 8001f3a:	1dbb      	adds	r3, r7, #6
 8001f3c:	9300      	str	r3, [sp, #0]
 8001f3e:	2301      	movs	r3, #1
 8001f40:	221c      	movs	r2, #28
 8001f42:	21d0      	movs	r1, #208	@ 0xd0
 8001f44:	480a      	ldr	r0, [pc, #40]	@ (8001f70 <MPU6050_Init+0xc4>)
 8001f46:	f001 f8eb 	bl	8003120 <HAL_I2C_Mem_Write>

		data = 0x03;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, CONFIG_REG, 1, &data, 1, 1000);	//DLPF active
 8001f4e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f52:	9302      	str	r3, [sp, #8]
 8001f54:	2301      	movs	r3, #1
 8001f56:	9301      	str	r3, [sp, #4]
 8001f58:	1dbb      	adds	r3, r7, #6
 8001f5a:	9300      	str	r3, [sp, #0]
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	221a      	movs	r2, #26
 8001f60:	21d0      	movs	r1, #208	@ 0xd0
 8001f62:	4803      	ldr	r0, [pc, #12]	@ (8001f70 <MPU6050_Init+0xc4>)
 8001f64:	f001 f8dc 	bl	8003120 <HAL_I2C_Mem_Write>
	}
}
 8001f68:	bf00      	nop
 8001f6a:	3708      	adds	r7, #8
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	20000100 	.word	0x20000100

08001f74 <MPU6050_Read_Accel>:

// Function signature changed to use int pointers
void MPU6050_Read_Accel(int *Ax, int *Ay, int *Az){
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b08c      	sub	sp, #48	@ 0x30
 8001f78:	af04      	add	r7, sp, #16
 8001f7a:	60f8      	str	r0, [r7, #12]
 8001f7c:	60b9      	str	r1, [r7, #8]
 8001f7e:	607a      	str	r2, [r7, #4]
	uint8_t Rec_Data[6];
	HAL_I2C_Mem_Read(&hi2c2, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 8001f80:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f84:	9302      	str	r3, [sp, #8]
 8001f86:	2306      	movs	r3, #6
 8001f88:	9301      	str	r3, [sp, #4]
 8001f8a:	f107 0314 	add.w	r3, r7, #20
 8001f8e:	9300      	str	r3, [sp, #0]
 8001f90:	2301      	movs	r3, #1
 8001f92:	223b      	movs	r2, #59	@ 0x3b
 8001f94:	21d0      	movs	r1, #208	@ 0xd0
 8001f96:	481a      	ldr	r0, [pc, #104]	@ (8002000 <MPU6050_Read_Accel+0x8c>)
 8001f98:	f001 f9bc 	bl	8003314 <HAL_I2C_Mem_Read>

	int16_t Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8001f9c:	7d3b      	ldrb	r3, [r7, #20]
 8001f9e:	b21b      	sxth	r3, r3
 8001fa0:	021b      	lsls	r3, r3, #8
 8001fa2:	b21a      	sxth	r2, r3
 8001fa4:	7d7b      	ldrb	r3, [r7, #21]
 8001fa6:	b21b      	sxth	r3, r3
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	83fb      	strh	r3, [r7, #30]
	int16_t Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8001fac:	7dbb      	ldrb	r3, [r7, #22]
 8001fae:	b21b      	sxth	r3, r3
 8001fb0:	021b      	lsls	r3, r3, #8
 8001fb2:	b21a      	sxth	r2, r3
 8001fb4:	7dfb      	ldrb	r3, [r7, #23]
 8001fb6:	b21b      	sxth	r3, r3
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	83bb      	strh	r3, [r7, #28]
	int16_t Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8001fbc:	7e3b      	ldrb	r3, [r7, #24]
 8001fbe:	b21b      	sxth	r3, r3
 8001fc0:	021b      	lsls	r3, r3, #8
 8001fc2:	b21a      	sxth	r2, r3
 8001fc4:	7e7b      	ldrb	r3, [r7, #25]
 8001fc6:	b21b      	sxth	r3, r3
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	837b      	strh	r3, [r7, #26]

	// The calculation remains the same, but the result is stored in an int
	*Ax = (int)(((int32_t)Accel_X_RAW + 32768) >> 4);
 8001fcc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001fd0:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8001fd4:	111a      	asrs	r2, r3, #4
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	601a      	str	r2, [r3, #0]
	*Ay = (int)(((int32_t)Accel_Y_RAW + 32768) >> 4);
 8001fda:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001fde:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8001fe2:	111a      	asrs	r2, r3, #4
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	601a      	str	r2, [r3, #0]
	*Az = (int)(((int32_t)Accel_Z_RAW + 32768) >> 4);
 8001fe8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001fec:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8001ff0:	111a      	asrs	r2, r3, #4
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	601a      	str	r2, [r3, #0]
}
 8001ff6:	bf00      	nop
 8001ff8:	3720      	adds	r7, #32
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	20000100 	.word	0x20000100

08002004 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002008:	4b0e      	ldr	r3, [pc, #56]	@ (8002044 <HAL_Init+0x40>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a0d      	ldr	r2, [pc, #52]	@ (8002044 <HAL_Init+0x40>)
 800200e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002012:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002014:	4b0b      	ldr	r3, [pc, #44]	@ (8002044 <HAL_Init+0x40>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a0a      	ldr	r2, [pc, #40]	@ (8002044 <HAL_Init+0x40>)
 800201a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800201e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002020:	4b08      	ldr	r3, [pc, #32]	@ (8002044 <HAL_Init+0x40>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a07      	ldr	r2, [pc, #28]	@ (8002044 <HAL_Init+0x40>)
 8002026:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800202a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800202c:	2003      	movs	r0, #3
 800202e:	f000 fd31 	bl	8002a94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002032:	200f      	movs	r0, #15
 8002034:	f000 f808 	bl	8002048 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002038:	f7fe ffa0 	bl	8000f7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800203c:	2300      	movs	r3, #0
}
 800203e:	4618      	mov	r0, r3
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	40023c00 	.word	0x40023c00

08002048 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002050:	4b12      	ldr	r3, [pc, #72]	@ (800209c <HAL_InitTick+0x54>)
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	4b12      	ldr	r3, [pc, #72]	@ (80020a0 <HAL_InitTick+0x58>)
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	4619      	mov	r1, r3
 800205a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800205e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002062:	fbb2 f3f3 	udiv	r3, r2, r3
 8002066:	4618      	mov	r0, r3
 8002068:	f000 fd3b 	bl	8002ae2 <HAL_SYSTICK_Config>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d001      	beq.n	8002076 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e00e      	b.n	8002094 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2b0f      	cmp	r3, #15
 800207a:	d80a      	bhi.n	8002092 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800207c:	2200      	movs	r2, #0
 800207e:	6879      	ldr	r1, [r7, #4]
 8002080:	f04f 30ff 	mov.w	r0, #4294967295
 8002084:	f000 fd11 	bl	8002aaa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002088:	4a06      	ldr	r2, [pc, #24]	@ (80020a4 <HAL_InitTick+0x5c>)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800208e:	2300      	movs	r3, #0
 8002090:	e000      	b.n	8002094 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
}
 8002094:	4618      	mov	r0, r3
 8002096:	3708      	adds	r7, #8
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	20000004 	.word	0x20000004
 80020a0:	20000014 	.word	0x20000014
 80020a4:	20000010 	.word	0x20000010

080020a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020ac:	4b06      	ldr	r3, [pc, #24]	@ (80020c8 <HAL_IncTick+0x20>)
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	461a      	mov	r2, r3
 80020b2:	4b06      	ldr	r3, [pc, #24]	@ (80020cc <HAL_IncTick+0x24>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4413      	add	r3, r2
 80020b8:	4a04      	ldr	r2, [pc, #16]	@ (80020cc <HAL_IncTick+0x24>)
 80020ba:	6013      	str	r3, [r2, #0]
}
 80020bc:	bf00      	nop
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	20000014 	.word	0x20000014
 80020cc:	20000544 	.word	0x20000544

080020d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
  return uwTick;
 80020d4:	4b03      	ldr	r3, [pc, #12]	@ (80020e4 <HAL_GetTick+0x14>)
 80020d6:	681b      	ldr	r3, [r3, #0]
}
 80020d8:	4618      	mov	r0, r3
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	20000544 	.word	0x20000544

080020e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020f0:	f7ff ffee 	bl	80020d0 <HAL_GetTick>
 80020f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002100:	d005      	beq.n	800210e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002102:	4b0a      	ldr	r3, [pc, #40]	@ (800212c <HAL_Delay+0x44>)
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	461a      	mov	r2, r3
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	4413      	add	r3, r2
 800210c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800210e:	bf00      	nop
 8002110:	f7ff ffde 	bl	80020d0 <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	68fa      	ldr	r2, [r7, #12]
 800211c:	429a      	cmp	r2, r3
 800211e:	d8f7      	bhi.n	8002110 <HAL_Delay+0x28>
  {
  }
}
 8002120:	bf00      	nop
 8002122:	bf00      	nop
 8002124:	3710      	adds	r7, #16
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	20000014 	.word	0x20000014

08002130 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002138:	2300      	movs	r3, #0
 800213a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d101      	bne.n	8002146 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e033      	b.n	80021ae <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800214a:	2b00      	cmp	r3, #0
 800214c:	d109      	bne.n	8002162 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f7fe ff3c 	bl	8000fcc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2200      	movs	r2, #0
 8002158:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2200      	movs	r2, #0
 800215e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002166:	f003 0310 	and.w	r3, r3, #16
 800216a:	2b00      	cmp	r3, #0
 800216c:	d118      	bne.n	80021a0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002172:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002176:	f023 0302 	bic.w	r3, r3, #2
 800217a:	f043 0202 	orr.w	r2, r3, #2
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f000 fad8 	bl	8002738 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2200      	movs	r2, #0
 800218c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002192:	f023 0303 	bic.w	r3, r3, #3
 8002196:	f043 0201 	orr.w	r2, r3, #1
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	641a      	str	r2, [r3, #64]	@ 0x40
 800219e:	e001      	b.n	80021a4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2200      	movs	r2, #0
 80021a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80021ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3710      	adds	r7, #16
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
	...

080021b8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b085      	sub	sp, #20
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80021c0:	2300      	movs	r3, #0
 80021c2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d101      	bne.n	80021d2 <HAL_ADC_Start+0x1a>
 80021ce:	2302      	movs	r3, #2
 80021d0:	e0b2      	b.n	8002338 <HAL_ADC_Start+0x180>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2201      	movs	r2, #1
 80021d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	f003 0301 	and.w	r3, r3, #1
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d018      	beq.n	800221a <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	689a      	ldr	r2, [r3, #8]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f042 0201 	orr.w	r2, r2, #1
 80021f6:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80021f8:	4b52      	ldr	r3, [pc, #328]	@ (8002344 <HAL_ADC_Start+0x18c>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a52      	ldr	r2, [pc, #328]	@ (8002348 <HAL_ADC_Start+0x190>)
 80021fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002202:	0c9a      	lsrs	r2, r3, #18
 8002204:	4613      	mov	r3, r2
 8002206:	005b      	lsls	r3, r3, #1
 8002208:	4413      	add	r3, r2
 800220a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800220c:	e002      	b.n	8002214 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	3b01      	subs	r3, #1
 8002212:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d1f9      	bne.n	800220e <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	f003 0301 	and.w	r3, r3, #1
 8002224:	2b01      	cmp	r3, #1
 8002226:	d17a      	bne.n	800231e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800222c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002230:	f023 0301 	bic.w	r3, r3, #1
 8002234:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002246:	2b00      	cmp	r3, #0
 8002248:	d007      	beq.n	800225a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800224e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002252:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800225e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002262:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002266:	d106      	bne.n	8002276 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800226c:	f023 0206 	bic.w	r2, r3, #6
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	645a      	str	r2, [r3, #68]	@ 0x44
 8002274:	e002      	b.n	800227c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2200      	movs	r2, #0
 800227a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2200      	movs	r2, #0
 8002280:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002284:	4b31      	ldr	r3, [pc, #196]	@ (800234c <HAL_ADC_Start+0x194>)
 8002286:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002290:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f003 031f 	and.w	r3, r3, #31
 800229a:	2b00      	cmp	r3, #0
 800229c:	d12a      	bne.n	80022f4 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a2b      	ldr	r2, [pc, #172]	@ (8002350 <HAL_ADC_Start+0x198>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d015      	beq.n	80022d4 <HAL_ADC_Start+0x11c>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a29      	ldr	r2, [pc, #164]	@ (8002354 <HAL_ADC_Start+0x19c>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d105      	bne.n	80022be <HAL_ADC_Start+0x106>
 80022b2:	4b26      	ldr	r3, [pc, #152]	@ (800234c <HAL_ADC_Start+0x194>)
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	f003 031f 	and.w	r3, r3, #31
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d00a      	beq.n	80022d4 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a25      	ldr	r2, [pc, #148]	@ (8002358 <HAL_ADC_Start+0x1a0>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d136      	bne.n	8002336 <HAL_ADC_Start+0x17e>
 80022c8:	4b20      	ldr	r3, [pc, #128]	@ (800234c <HAL_ADC_Start+0x194>)
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f003 0310 	and.w	r3, r3, #16
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d130      	bne.n	8002336 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d129      	bne.n	8002336 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	689a      	ldr	r2, [r3, #8]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80022f0:	609a      	str	r2, [r3, #8]
 80022f2:	e020      	b.n	8002336 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a15      	ldr	r2, [pc, #84]	@ (8002350 <HAL_ADC_Start+0x198>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d11b      	bne.n	8002336 <HAL_ADC_Start+0x17e>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002308:	2b00      	cmp	r3, #0
 800230a:	d114      	bne.n	8002336 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	689a      	ldr	r2, [r3, #8]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800231a:	609a      	str	r2, [r3, #8]
 800231c:	e00b      	b.n	8002336 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002322:	f043 0210 	orr.w	r2, r3, #16
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800232e:	f043 0201 	orr.w	r2, r3, #1
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002336:	2300      	movs	r3, #0
}
 8002338:	4618      	mov	r0, r3
 800233a:	3714      	adds	r7, #20
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr
 8002344:	20000004 	.word	0x20000004
 8002348:	431bde83 	.word	0x431bde83
 800234c:	40012300 	.word	0x40012300
 8002350:	40012000 	.word	0x40012000
 8002354:	40012100 	.word	0x40012100
 8002358:	40012200 	.word	0x40012200

0800235c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800236a:	2b01      	cmp	r3, #1
 800236c:	d101      	bne.n	8002372 <HAL_ADC_Stop+0x16>
 800236e:	2302      	movs	r3, #2
 8002370:	e021      	b.n	80023b6 <HAL_ADC_Stop+0x5a>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2201      	movs	r2, #1
 8002376:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	689a      	ldr	r2, [r3, #8]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f022 0201 	bic.w	r2, r2, #1
 8002388:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	f003 0301 	and.w	r3, r3, #1
 8002394:	2b00      	cmp	r3, #0
 8002396:	d109      	bne.n	80023ac <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800239c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80023a0:	f023 0301 	bic.w	r3, r3, #1
 80023a4:	f043 0201 	orr.w	r2, r3, #1
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2200      	movs	r2, #0
 80023b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80023b4:	2300      	movs	r3, #0
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	370c      	adds	r7, #12
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr

080023c2 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80023c2:	b580      	push	{r7, lr}
 80023c4:	b084      	sub	sp, #16
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	6078      	str	r0, [r7, #4]
 80023ca:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80023cc:	2300      	movs	r3, #0
 80023ce:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023de:	d113      	bne.n	8002408 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80023ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80023ee:	d10b      	bne.n	8002408 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023f4:	f043 0220 	orr.w	r2, r3, #32
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2200      	movs	r2, #0
 8002400:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e063      	b.n	80024d0 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8002408:	f7ff fe62 	bl	80020d0 <HAL_GetTick>
 800240c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800240e:	e021      	b.n	8002454 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002416:	d01d      	beq.n	8002454 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d007      	beq.n	800242e <HAL_ADC_PollForConversion+0x6c>
 800241e:	f7ff fe57 	bl	80020d0 <HAL_GetTick>
 8002422:	4602      	mov	r2, r0
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	683a      	ldr	r2, [r7, #0]
 800242a:	429a      	cmp	r2, r3
 800242c:	d212      	bcs.n	8002454 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0302 	and.w	r3, r3, #2
 8002438:	2b02      	cmp	r3, #2
 800243a:	d00b      	beq.n	8002454 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002440:	f043 0204 	orr.w	r2, r3, #4
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2200      	movs	r2, #0
 800244c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8002450:	2303      	movs	r3, #3
 8002452:	e03d      	b.n	80024d0 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0302 	and.w	r3, r3, #2
 800245e:	2b02      	cmp	r3, #2
 8002460:	d1d6      	bne.n	8002410 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f06f 0212 	mvn.w	r2, #18
 800246a:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002470:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d123      	bne.n	80024ce <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800248a:	2b00      	cmp	r3, #0
 800248c:	d11f      	bne.n	80024ce <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002494:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002498:	2b00      	cmp	r3, #0
 800249a:	d006      	beq.n	80024aa <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d111      	bne.n	80024ce <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ae:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d105      	bne.n	80024ce <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024c6:	f043 0201 	orr.w	r2, r3, #1
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80024ce:	2300      	movs	r3, #0
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3710      	adds	r7, #16
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}

080024d8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	370c      	adds	r7, #12
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr
	...

080024f4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b085      	sub	sp, #20
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80024fe:	2300      	movs	r3, #0
 8002500:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002508:	2b01      	cmp	r3, #1
 800250a:	d101      	bne.n	8002510 <HAL_ADC_ConfigChannel+0x1c>
 800250c:	2302      	movs	r3, #2
 800250e:	e105      	b.n	800271c <HAL_ADC_ConfigChannel+0x228>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2201      	movs	r2, #1
 8002514:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2b09      	cmp	r3, #9
 800251e:	d925      	bls.n	800256c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	68d9      	ldr	r1, [r3, #12]
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	b29b      	uxth	r3, r3
 800252c:	461a      	mov	r2, r3
 800252e:	4613      	mov	r3, r2
 8002530:	005b      	lsls	r3, r3, #1
 8002532:	4413      	add	r3, r2
 8002534:	3b1e      	subs	r3, #30
 8002536:	2207      	movs	r2, #7
 8002538:	fa02 f303 	lsl.w	r3, r2, r3
 800253c:	43da      	mvns	r2, r3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	400a      	ands	r2, r1
 8002544:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	68d9      	ldr	r1, [r3, #12]
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	689a      	ldr	r2, [r3, #8]
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	b29b      	uxth	r3, r3
 8002556:	4618      	mov	r0, r3
 8002558:	4603      	mov	r3, r0
 800255a:	005b      	lsls	r3, r3, #1
 800255c:	4403      	add	r3, r0
 800255e:	3b1e      	subs	r3, #30
 8002560:	409a      	lsls	r2, r3
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	430a      	orrs	r2, r1
 8002568:	60da      	str	r2, [r3, #12]
 800256a:	e022      	b.n	80025b2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	6919      	ldr	r1, [r3, #16]
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	b29b      	uxth	r3, r3
 8002578:	461a      	mov	r2, r3
 800257a:	4613      	mov	r3, r2
 800257c:	005b      	lsls	r3, r3, #1
 800257e:	4413      	add	r3, r2
 8002580:	2207      	movs	r2, #7
 8002582:	fa02 f303 	lsl.w	r3, r2, r3
 8002586:	43da      	mvns	r2, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	400a      	ands	r2, r1
 800258e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	6919      	ldr	r1, [r3, #16]
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	689a      	ldr	r2, [r3, #8]
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	b29b      	uxth	r3, r3
 80025a0:	4618      	mov	r0, r3
 80025a2:	4603      	mov	r3, r0
 80025a4:	005b      	lsls	r3, r3, #1
 80025a6:	4403      	add	r3, r0
 80025a8:	409a      	lsls	r2, r3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	430a      	orrs	r2, r1
 80025b0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	2b06      	cmp	r3, #6
 80025b8:	d824      	bhi.n	8002604 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	685a      	ldr	r2, [r3, #4]
 80025c4:	4613      	mov	r3, r2
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	4413      	add	r3, r2
 80025ca:	3b05      	subs	r3, #5
 80025cc:	221f      	movs	r2, #31
 80025ce:	fa02 f303 	lsl.w	r3, r2, r3
 80025d2:	43da      	mvns	r2, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	400a      	ands	r2, r1
 80025da:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	b29b      	uxth	r3, r3
 80025e8:	4618      	mov	r0, r3
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	685a      	ldr	r2, [r3, #4]
 80025ee:	4613      	mov	r3, r2
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	4413      	add	r3, r2
 80025f4:	3b05      	subs	r3, #5
 80025f6:	fa00 f203 	lsl.w	r2, r0, r3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	430a      	orrs	r2, r1
 8002600:	635a      	str	r2, [r3, #52]	@ 0x34
 8002602:	e04c      	b.n	800269e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	2b0c      	cmp	r3, #12
 800260a:	d824      	bhi.n	8002656 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	685a      	ldr	r2, [r3, #4]
 8002616:	4613      	mov	r3, r2
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	4413      	add	r3, r2
 800261c:	3b23      	subs	r3, #35	@ 0x23
 800261e:	221f      	movs	r2, #31
 8002620:	fa02 f303 	lsl.w	r3, r2, r3
 8002624:	43da      	mvns	r2, r3
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	400a      	ands	r2, r1
 800262c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	b29b      	uxth	r3, r3
 800263a:	4618      	mov	r0, r3
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	685a      	ldr	r2, [r3, #4]
 8002640:	4613      	mov	r3, r2
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	4413      	add	r3, r2
 8002646:	3b23      	subs	r3, #35	@ 0x23
 8002648:	fa00 f203 	lsl.w	r2, r0, r3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	430a      	orrs	r2, r1
 8002652:	631a      	str	r2, [r3, #48]	@ 0x30
 8002654:	e023      	b.n	800269e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	685a      	ldr	r2, [r3, #4]
 8002660:	4613      	mov	r3, r2
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	4413      	add	r3, r2
 8002666:	3b41      	subs	r3, #65	@ 0x41
 8002668:	221f      	movs	r2, #31
 800266a:	fa02 f303 	lsl.w	r3, r2, r3
 800266e:	43da      	mvns	r2, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	400a      	ands	r2, r1
 8002676:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	b29b      	uxth	r3, r3
 8002684:	4618      	mov	r0, r3
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	685a      	ldr	r2, [r3, #4]
 800268a:	4613      	mov	r3, r2
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	4413      	add	r3, r2
 8002690:	3b41      	subs	r3, #65	@ 0x41
 8002692:	fa00 f203 	lsl.w	r2, r0, r3
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	430a      	orrs	r2, r1
 800269c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800269e:	4b22      	ldr	r3, [pc, #136]	@ (8002728 <HAL_ADC_ConfigChannel+0x234>)
 80026a0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a21      	ldr	r2, [pc, #132]	@ (800272c <HAL_ADC_ConfigChannel+0x238>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d109      	bne.n	80026c0 <HAL_ADC_ConfigChannel+0x1cc>
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	2b12      	cmp	r3, #18
 80026b2:	d105      	bne.n	80026c0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a19      	ldr	r2, [pc, #100]	@ (800272c <HAL_ADC_ConfigChannel+0x238>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d123      	bne.n	8002712 <HAL_ADC_ConfigChannel+0x21e>
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	2b10      	cmp	r3, #16
 80026d0:	d003      	beq.n	80026da <HAL_ADC_ConfigChannel+0x1e6>
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	2b11      	cmp	r3, #17
 80026d8:	d11b      	bne.n	8002712 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	2b10      	cmp	r3, #16
 80026ec:	d111      	bne.n	8002712 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80026ee:	4b10      	ldr	r3, [pc, #64]	@ (8002730 <HAL_ADC_ConfigChannel+0x23c>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a10      	ldr	r2, [pc, #64]	@ (8002734 <HAL_ADC_ConfigChannel+0x240>)
 80026f4:	fba2 2303 	umull	r2, r3, r2, r3
 80026f8:	0c9a      	lsrs	r2, r3, #18
 80026fa:	4613      	mov	r3, r2
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	4413      	add	r3, r2
 8002700:	005b      	lsls	r3, r3, #1
 8002702:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002704:	e002      	b.n	800270c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	3b01      	subs	r3, #1
 800270a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d1f9      	bne.n	8002706 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2200      	movs	r2, #0
 8002716:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800271a:	2300      	movs	r3, #0
}
 800271c:	4618      	mov	r0, r3
 800271e:	3714      	adds	r7, #20
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr
 8002728:	40012300 	.word	0x40012300
 800272c:	40012000 	.word	0x40012000
 8002730:	20000004 	.word	0x20000004
 8002734:	431bde83 	.word	0x431bde83

08002738 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002738:	b480      	push	{r7}
 800273a:	b085      	sub	sp, #20
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002740:	4b79      	ldr	r3, [pc, #484]	@ (8002928 <ADC_Init+0x1f0>)
 8002742:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	685a      	ldr	r2, [r3, #4]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	431a      	orrs	r2, r3
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	685a      	ldr	r2, [r3, #4]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800276c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	6859      	ldr	r1, [r3, #4]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	691b      	ldr	r3, [r3, #16]
 8002778:	021a      	lsls	r2, r3, #8
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	430a      	orrs	r2, r1
 8002780:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	685a      	ldr	r2, [r3, #4]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002790:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	6859      	ldr	r1, [r3, #4]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	689a      	ldr	r2, [r3, #8]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	430a      	orrs	r2, r1
 80027a2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	689a      	ldr	r2, [r3, #8]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80027b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	6899      	ldr	r1, [r3, #8]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	68da      	ldr	r2, [r3, #12]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	430a      	orrs	r2, r1
 80027c4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027ca:	4a58      	ldr	r2, [pc, #352]	@ (800292c <ADC_Init+0x1f4>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d022      	beq.n	8002816 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	689a      	ldr	r2, [r3, #8]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80027de:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	6899      	ldr	r1, [r3, #8]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	430a      	orrs	r2, r1
 80027f0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	689a      	ldr	r2, [r3, #8]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002800:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	6899      	ldr	r1, [r3, #8]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	430a      	orrs	r2, r1
 8002812:	609a      	str	r2, [r3, #8]
 8002814:	e00f      	b.n	8002836 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	689a      	ldr	r2, [r3, #8]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002824:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	689a      	ldr	r2, [r3, #8]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002834:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	689a      	ldr	r2, [r3, #8]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f022 0202 	bic.w	r2, r2, #2
 8002844:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	6899      	ldr	r1, [r3, #8]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	7e1b      	ldrb	r3, [r3, #24]
 8002850:	005a      	lsls	r2, r3, #1
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	430a      	orrs	r2, r1
 8002858:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d01b      	beq.n	800289c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	685a      	ldr	r2, [r3, #4]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002872:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	685a      	ldr	r2, [r3, #4]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002882:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	6859      	ldr	r1, [r3, #4]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800288e:	3b01      	subs	r3, #1
 8002890:	035a      	lsls	r2, r3, #13
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	430a      	orrs	r2, r1
 8002898:	605a      	str	r2, [r3, #4]
 800289a:	e007      	b.n	80028ac <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	685a      	ldr	r2, [r3, #4]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80028aa:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80028ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	69db      	ldr	r3, [r3, #28]
 80028c6:	3b01      	subs	r3, #1
 80028c8:	051a      	lsls	r2, r3, #20
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	430a      	orrs	r2, r1
 80028d0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	689a      	ldr	r2, [r3, #8]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80028e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	6899      	ldr	r1, [r3, #8]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80028ee:	025a      	lsls	r2, r3, #9
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	430a      	orrs	r2, r1
 80028f6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	689a      	ldr	r2, [r3, #8]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002906:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	6899      	ldr	r1, [r3, #8]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	695b      	ldr	r3, [r3, #20]
 8002912:	029a      	lsls	r2, r3, #10
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	430a      	orrs	r2, r1
 800291a:	609a      	str	r2, [r3, #8]
}
 800291c:	bf00      	nop
 800291e:	3714      	adds	r7, #20
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr
 8002928:	40012300 	.word	0x40012300
 800292c:	0f000001 	.word	0x0f000001

08002930 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002930:	b480      	push	{r7}
 8002932:	b085      	sub	sp, #20
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	f003 0307 	and.w	r3, r3, #7
 800293e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002940:	4b0c      	ldr	r3, [pc, #48]	@ (8002974 <__NVIC_SetPriorityGrouping+0x44>)
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002946:	68ba      	ldr	r2, [r7, #8]
 8002948:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800294c:	4013      	ands	r3, r2
 800294e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002958:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800295c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002960:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002962:	4a04      	ldr	r2, [pc, #16]	@ (8002974 <__NVIC_SetPriorityGrouping+0x44>)
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	60d3      	str	r3, [r2, #12]
}
 8002968:	bf00      	nop
 800296a:	3714      	adds	r7, #20
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr
 8002974:	e000ed00 	.word	0xe000ed00

08002978 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002978:	b480      	push	{r7}
 800297a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800297c:	4b04      	ldr	r3, [pc, #16]	@ (8002990 <__NVIC_GetPriorityGrouping+0x18>)
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	0a1b      	lsrs	r3, r3, #8
 8002982:	f003 0307 	and.w	r3, r3, #7
}
 8002986:	4618      	mov	r0, r3
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr
 8002990:	e000ed00 	.word	0xe000ed00

08002994 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
 800299a:	4603      	mov	r3, r0
 800299c:	6039      	str	r1, [r7, #0]
 800299e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	db0a      	blt.n	80029be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	b2da      	uxtb	r2, r3
 80029ac:	490c      	ldr	r1, [pc, #48]	@ (80029e0 <__NVIC_SetPriority+0x4c>)
 80029ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029b2:	0112      	lsls	r2, r2, #4
 80029b4:	b2d2      	uxtb	r2, r2
 80029b6:	440b      	add	r3, r1
 80029b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029bc:	e00a      	b.n	80029d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	b2da      	uxtb	r2, r3
 80029c2:	4908      	ldr	r1, [pc, #32]	@ (80029e4 <__NVIC_SetPriority+0x50>)
 80029c4:	79fb      	ldrb	r3, [r7, #7]
 80029c6:	f003 030f 	and.w	r3, r3, #15
 80029ca:	3b04      	subs	r3, #4
 80029cc:	0112      	lsls	r2, r2, #4
 80029ce:	b2d2      	uxtb	r2, r2
 80029d0:	440b      	add	r3, r1
 80029d2:	761a      	strb	r2, [r3, #24]
}
 80029d4:	bf00      	nop
 80029d6:	370c      	adds	r7, #12
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr
 80029e0:	e000e100 	.word	0xe000e100
 80029e4:	e000ed00 	.word	0xe000ed00

080029e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b089      	sub	sp, #36	@ 0x24
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	60b9      	str	r1, [r7, #8]
 80029f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	f003 0307 	and.w	r3, r3, #7
 80029fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	f1c3 0307 	rsb	r3, r3, #7
 8002a02:	2b04      	cmp	r3, #4
 8002a04:	bf28      	it	cs
 8002a06:	2304      	movcs	r3, #4
 8002a08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	3304      	adds	r3, #4
 8002a0e:	2b06      	cmp	r3, #6
 8002a10:	d902      	bls.n	8002a18 <NVIC_EncodePriority+0x30>
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	3b03      	subs	r3, #3
 8002a16:	e000      	b.n	8002a1a <NVIC_EncodePriority+0x32>
 8002a18:	2300      	movs	r3, #0
 8002a1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a1c:	f04f 32ff 	mov.w	r2, #4294967295
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	fa02 f303 	lsl.w	r3, r2, r3
 8002a26:	43da      	mvns	r2, r3
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	401a      	ands	r2, r3
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a30:	f04f 31ff 	mov.w	r1, #4294967295
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	fa01 f303 	lsl.w	r3, r1, r3
 8002a3a:	43d9      	mvns	r1, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a40:	4313      	orrs	r3, r2
         );
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3724      	adds	r7, #36	@ 0x24
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr
	...

08002a50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	3b01      	subs	r3, #1
 8002a5c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a60:	d301      	bcc.n	8002a66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a62:	2301      	movs	r3, #1
 8002a64:	e00f      	b.n	8002a86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a66:	4a0a      	ldr	r2, [pc, #40]	@ (8002a90 <SysTick_Config+0x40>)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	3b01      	subs	r3, #1
 8002a6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a6e:	210f      	movs	r1, #15
 8002a70:	f04f 30ff 	mov.w	r0, #4294967295
 8002a74:	f7ff ff8e 	bl	8002994 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a78:	4b05      	ldr	r3, [pc, #20]	@ (8002a90 <SysTick_Config+0x40>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a7e:	4b04      	ldr	r3, [pc, #16]	@ (8002a90 <SysTick_Config+0x40>)
 8002a80:	2207      	movs	r2, #7
 8002a82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3708      	adds	r7, #8
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	e000e010 	.word	0xe000e010

08002a94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	f7ff ff47 	bl	8002930 <__NVIC_SetPriorityGrouping>
}
 8002aa2:	bf00      	nop
 8002aa4:	3708      	adds	r7, #8
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}

08002aaa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002aaa:	b580      	push	{r7, lr}
 8002aac:	b086      	sub	sp, #24
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	60b9      	str	r1, [r7, #8]
 8002ab4:	607a      	str	r2, [r7, #4]
 8002ab6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002abc:	f7ff ff5c 	bl	8002978 <__NVIC_GetPriorityGrouping>
 8002ac0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	68b9      	ldr	r1, [r7, #8]
 8002ac6:	6978      	ldr	r0, [r7, #20]
 8002ac8:	f7ff ff8e 	bl	80029e8 <NVIC_EncodePriority>
 8002acc:	4602      	mov	r2, r0
 8002ace:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ad2:	4611      	mov	r1, r2
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f7ff ff5d 	bl	8002994 <__NVIC_SetPriority>
}
 8002ada:	bf00      	nop
 8002adc:	3718      	adds	r7, #24
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}

08002ae2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ae2:	b580      	push	{r7, lr}
 8002ae4:	b082      	sub	sp, #8
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f7ff ffb0 	bl	8002a50 <SysTick_Config>
 8002af0:	4603      	mov	r3, r0
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3708      	adds	r7, #8
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
	...

08002afc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b089      	sub	sp, #36	@ 0x24
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b06:	2300      	movs	r3, #0
 8002b08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b12:	2300      	movs	r3, #0
 8002b14:	61fb      	str	r3, [r7, #28]
 8002b16:	e16b      	b.n	8002df0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b18:	2201      	movs	r2, #1
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	697a      	ldr	r2, [r7, #20]
 8002b28:	4013      	ands	r3, r2
 8002b2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b2c:	693a      	ldr	r2, [r7, #16]
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	429a      	cmp	r2, r3
 8002b32:	f040 815a 	bne.w	8002dea <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	f003 0303 	and.w	r3, r3, #3
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d005      	beq.n	8002b4e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	d130      	bne.n	8002bb0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	005b      	lsls	r3, r3, #1
 8002b58:	2203      	movs	r2, #3
 8002b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5e:	43db      	mvns	r3, r3
 8002b60:	69ba      	ldr	r2, [r7, #24]
 8002b62:	4013      	ands	r3, r2
 8002b64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	68da      	ldr	r2, [r3, #12]
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	005b      	lsls	r3, r3, #1
 8002b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b72:	69ba      	ldr	r2, [r7, #24]
 8002b74:	4313      	orrs	r3, r2
 8002b76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	69ba      	ldr	r2, [r7, #24]
 8002b7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b84:	2201      	movs	r2, #1
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8c:	43db      	mvns	r3, r3
 8002b8e:	69ba      	ldr	r2, [r7, #24]
 8002b90:	4013      	ands	r3, r2
 8002b92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	091b      	lsrs	r3, r3, #4
 8002b9a:	f003 0201 	and.w	r2, r3, #1
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba4:	69ba      	ldr	r2, [r7, #24]
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	69ba      	ldr	r2, [r7, #24]
 8002bae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f003 0303 	and.w	r3, r3, #3
 8002bb8:	2b03      	cmp	r3, #3
 8002bba:	d017      	beq.n	8002bec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	005b      	lsls	r3, r3, #1
 8002bc6:	2203      	movs	r2, #3
 8002bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bcc:	43db      	mvns	r3, r3
 8002bce:	69ba      	ldr	r2, [r7, #24]
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	689a      	ldr	r2, [r3, #8]
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	005b      	lsls	r3, r3, #1
 8002bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002be0:	69ba      	ldr	r2, [r7, #24]
 8002be2:	4313      	orrs	r3, r2
 8002be4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	69ba      	ldr	r2, [r7, #24]
 8002bea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f003 0303 	and.w	r3, r3, #3
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d123      	bne.n	8002c40 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	08da      	lsrs	r2, r3, #3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	3208      	adds	r2, #8
 8002c00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c04:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	f003 0307 	and.w	r3, r3, #7
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	220f      	movs	r2, #15
 8002c10:	fa02 f303 	lsl.w	r3, r2, r3
 8002c14:	43db      	mvns	r3, r3
 8002c16:	69ba      	ldr	r2, [r7, #24]
 8002c18:	4013      	ands	r3, r2
 8002c1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	691a      	ldr	r2, [r3, #16]
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	f003 0307 	and.w	r3, r3, #7
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2c:	69ba      	ldr	r2, [r7, #24]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	08da      	lsrs	r2, r3, #3
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	3208      	adds	r2, #8
 8002c3a:	69b9      	ldr	r1, [r7, #24]
 8002c3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	005b      	lsls	r3, r3, #1
 8002c4a:	2203      	movs	r2, #3
 8002c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c50:	43db      	mvns	r3, r3
 8002c52:	69ba      	ldr	r2, [r7, #24]
 8002c54:	4013      	ands	r3, r2
 8002c56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f003 0203 	and.w	r2, r3, #3
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	005b      	lsls	r3, r3, #1
 8002c64:	fa02 f303 	lsl.w	r3, r2, r3
 8002c68:	69ba      	ldr	r2, [r7, #24]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	69ba      	ldr	r2, [r7, #24]
 8002c72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	f000 80b4 	beq.w	8002dea <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c82:	2300      	movs	r3, #0
 8002c84:	60fb      	str	r3, [r7, #12]
 8002c86:	4b60      	ldr	r3, [pc, #384]	@ (8002e08 <HAL_GPIO_Init+0x30c>)
 8002c88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c8a:	4a5f      	ldr	r2, [pc, #380]	@ (8002e08 <HAL_GPIO_Init+0x30c>)
 8002c8c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c90:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c92:	4b5d      	ldr	r3, [pc, #372]	@ (8002e08 <HAL_GPIO_Init+0x30c>)
 8002c94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c9a:	60fb      	str	r3, [r7, #12]
 8002c9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c9e:	4a5b      	ldr	r2, [pc, #364]	@ (8002e0c <HAL_GPIO_Init+0x310>)
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	089b      	lsrs	r3, r3, #2
 8002ca4:	3302      	adds	r3, #2
 8002ca6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002caa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	f003 0303 	and.w	r3, r3, #3
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	220f      	movs	r2, #15
 8002cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cba:	43db      	mvns	r3, r3
 8002cbc:	69ba      	ldr	r2, [r7, #24]
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a52      	ldr	r2, [pc, #328]	@ (8002e10 <HAL_GPIO_Init+0x314>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d02b      	beq.n	8002d22 <HAL_GPIO_Init+0x226>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a51      	ldr	r2, [pc, #324]	@ (8002e14 <HAL_GPIO_Init+0x318>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d025      	beq.n	8002d1e <HAL_GPIO_Init+0x222>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4a50      	ldr	r2, [pc, #320]	@ (8002e18 <HAL_GPIO_Init+0x31c>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d01f      	beq.n	8002d1a <HAL_GPIO_Init+0x21e>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a4f      	ldr	r2, [pc, #316]	@ (8002e1c <HAL_GPIO_Init+0x320>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d019      	beq.n	8002d16 <HAL_GPIO_Init+0x21a>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a4e      	ldr	r2, [pc, #312]	@ (8002e20 <HAL_GPIO_Init+0x324>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d013      	beq.n	8002d12 <HAL_GPIO_Init+0x216>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a4d      	ldr	r2, [pc, #308]	@ (8002e24 <HAL_GPIO_Init+0x328>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d00d      	beq.n	8002d0e <HAL_GPIO_Init+0x212>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4a4c      	ldr	r2, [pc, #304]	@ (8002e28 <HAL_GPIO_Init+0x32c>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d007      	beq.n	8002d0a <HAL_GPIO_Init+0x20e>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a4b      	ldr	r2, [pc, #300]	@ (8002e2c <HAL_GPIO_Init+0x330>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d101      	bne.n	8002d06 <HAL_GPIO_Init+0x20a>
 8002d02:	2307      	movs	r3, #7
 8002d04:	e00e      	b.n	8002d24 <HAL_GPIO_Init+0x228>
 8002d06:	2308      	movs	r3, #8
 8002d08:	e00c      	b.n	8002d24 <HAL_GPIO_Init+0x228>
 8002d0a:	2306      	movs	r3, #6
 8002d0c:	e00a      	b.n	8002d24 <HAL_GPIO_Init+0x228>
 8002d0e:	2305      	movs	r3, #5
 8002d10:	e008      	b.n	8002d24 <HAL_GPIO_Init+0x228>
 8002d12:	2304      	movs	r3, #4
 8002d14:	e006      	b.n	8002d24 <HAL_GPIO_Init+0x228>
 8002d16:	2303      	movs	r3, #3
 8002d18:	e004      	b.n	8002d24 <HAL_GPIO_Init+0x228>
 8002d1a:	2302      	movs	r3, #2
 8002d1c:	e002      	b.n	8002d24 <HAL_GPIO_Init+0x228>
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e000      	b.n	8002d24 <HAL_GPIO_Init+0x228>
 8002d22:	2300      	movs	r3, #0
 8002d24:	69fa      	ldr	r2, [r7, #28]
 8002d26:	f002 0203 	and.w	r2, r2, #3
 8002d2a:	0092      	lsls	r2, r2, #2
 8002d2c:	4093      	lsls	r3, r2
 8002d2e:	69ba      	ldr	r2, [r7, #24]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d34:	4935      	ldr	r1, [pc, #212]	@ (8002e0c <HAL_GPIO_Init+0x310>)
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	089b      	lsrs	r3, r3, #2
 8002d3a:	3302      	adds	r3, #2
 8002d3c:	69ba      	ldr	r2, [r7, #24]
 8002d3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d42:	4b3b      	ldr	r3, [pc, #236]	@ (8002e30 <HAL_GPIO_Init+0x334>)
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	43db      	mvns	r3, r3
 8002d4c:	69ba      	ldr	r2, [r7, #24]
 8002d4e:	4013      	ands	r3, r2
 8002d50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d003      	beq.n	8002d66 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002d5e:	69ba      	ldr	r2, [r7, #24]
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d66:	4a32      	ldr	r2, [pc, #200]	@ (8002e30 <HAL_GPIO_Init+0x334>)
 8002d68:	69bb      	ldr	r3, [r7, #24]
 8002d6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d6c:	4b30      	ldr	r3, [pc, #192]	@ (8002e30 <HAL_GPIO_Init+0x334>)
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	43db      	mvns	r3, r3
 8002d76:	69ba      	ldr	r2, [r7, #24]
 8002d78:	4013      	ands	r3, r2
 8002d7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d003      	beq.n	8002d90 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002d88:	69ba      	ldr	r2, [r7, #24]
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d90:	4a27      	ldr	r2, [pc, #156]	@ (8002e30 <HAL_GPIO_Init+0x334>)
 8002d92:	69bb      	ldr	r3, [r7, #24]
 8002d94:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d96:	4b26      	ldr	r3, [pc, #152]	@ (8002e30 <HAL_GPIO_Init+0x334>)
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	43db      	mvns	r3, r3
 8002da0:	69ba      	ldr	r2, [r7, #24]
 8002da2:	4013      	ands	r3, r2
 8002da4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d003      	beq.n	8002dba <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002db2:	69ba      	ldr	r2, [r7, #24]
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002dba:	4a1d      	ldr	r2, [pc, #116]	@ (8002e30 <HAL_GPIO_Init+0x334>)
 8002dbc:	69bb      	ldr	r3, [r7, #24]
 8002dbe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002dc0:	4b1b      	ldr	r3, [pc, #108]	@ (8002e30 <HAL_GPIO_Init+0x334>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	43db      	mvns	r3, r3
 8002dca:	69ba      	ldr	r2, [r7, #24]
 8002dcc:	4013      	ands	r3, r2
 8002dce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d003      	beq.n	8002de4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002ddc:	69ba      	ldr	r2, [r7, #24]
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	4313      	orrs	r3, r2
 8002de2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002de4:	4a12      	ldr	r2, [pc, #72]	@ (8002e30 <HAL_GPIO_Init+0x334>)
 8002de6:	69bb      	ldr	r3, [r7, #24]
 8002de8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	3301      	adds	r3, #1
 8002dee:	61fb      	str	r3, [r7, #28]
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	2b0f      	cmp	r3, #15
 8002df4:	f67f ae90 	bls.w	8002b18 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002df8:	bf00      	nop
 8002dfa:	bf00      	nop
 8002dfc:	3724      	adds	r7, #36	@ 0x24
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr
 8002e06:	bf00      	nop
 8002e08:	40023800 	.word	0x40023800
 8002e0c:	40013800 	.word	0x40013800
 8002e10:	40020000 	.word	0x40020000
 8002e14:	40020400 	.word	0x40020400
 8002e18:	40020800 	.word	0x40020800
 8002e1c:	40020c00 	.word	0x40020c00
 8002e20:	40021000 	.word	0x40021000
 8002e24:	40021400 	.word	0x40021400
 8002e28:	40021800 	.word	0x40021800
 8002e2c:	40021c00 	.word	0x40021c00
 8002e30:	40013c00 	.word	0x40013c00

08002e34 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b085      	sub	sp, #20
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	460b      	mov	r3, r1
 8002e3e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	691a      	ldr	r2, [r3, #16]
 8002e44:	887b      	ldrh	r3, [r7, #2]
 8002e46:	4013      	ands	r3, r2
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d002      	beq.n	8002e52 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	73fb      	strb	r3, [r7, #15]
 8002e50:	e001      	b.n	8002e56 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e52:	2300      	movs	r3, #0
 8002e54:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e56:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3714      	adds	r7, #20
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr

08002e64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b083      	sub	sp, #12
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	460b      	mov	r3, r1
 8002e6e:	807b      	strh	r3, [r7, #2]
 8002e70:	4613      	mov	r3, r2
 8002e72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e74:	787b      	ldrb	r3, [r7, #1]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d003      	beq.n	8002e82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e7a:	887a      	ldrh	r2, [r7, #2]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e80:	e003      	b.n	8002e8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e82:	887b      	ldrh	r3, [r7, #2]
 8002e84:	041a      	lsls	r2, r3, #16
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	619a      	str	r2, [r3, #24]
}
 8002e8a:	bf00      	nop
 8002e8c:	370c      	adds	r7, #12
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr
	...

08002e98 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b084      	sub	sp, #16
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d101      	bne.n	8002eaa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e12b      	b.n	8003102 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d106      	bne.n	8002ec4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f7fe f8c8 	bl	8001054 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2224      	movs	r2, #36	@ 0x24
 8002ec8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f022 0201 	bic.w	r2, r2, #1
 8002eda:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002eea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002efa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002efc:	f001 fc20 	bl	8004740 <HAL_RCC_GetPCLK1Freq>
 8002f00:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	4a81      	ldr	r2, [pc, #516]	@ (800310c <HAL_I2C_Init+0x274>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d807      	bhi.n	8002f1c <HAL_I2C_Init+0x84>
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	4a80      	ldr	r2, [pc, #512]	@ (8003110 <HAL_I2C_Init+0x278>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	bf94      	ite	ls
 8002f14:	2301      	movls	r3, #1
 8002f16:	2300      	movhi	r3, #0
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	e006      	b.n	8002f2a <HAL_I2C_Init+0x92>
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	4a7d      	ldr	r2, [pc, #500]	@ (8003114 <HAL_I2C_Init+0x27c>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	bf94      	ite	ls
 8002f24:	2301      	movls	r3, #1
 8002f26:	2300      	movhi	r3, #0
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d001      	beq.n	8002f32 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e0e7      	b.n	8003102 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	4a78      	ldr	r2, [pc, #480]	@ (8003118 <HAL_I2C_Init+0x280>)
 8002f36:	fba2 2303 	umull	r2, r3, r2, r3
 8002f3a:	0c9b      	lsrs	r3, r3, #18
 8002f3c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	68ba      	ldr	r2, [r7, #8]
 8002f4e:	430a      	orrs	r2, r1
 8002f50:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	6a1b      	ldr	r3, [r3, #32]
 8002f58:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	4a6a      	ldr	r2, [pc, #424]	@ (800310c <HAL_I2C_Init+0x274>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d802      	bhi.n	8002f6c <HAL_I2C_Init+0xd4>
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	3301      	adds	r3, #1
 8002f6a:	e009      	b.n	8002f80 <HAL_I2C_Init+0xe8>
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002f72:	fb02 f303 	mul.w	r3, r2, r3
 8002f76:	4a69      	ldr	r2, [pc, #420]	@ (800311c <HAL_I2C_Init+0x284>)
 8002f78:	fba2 2303 	umull	r2, r3, r2, r3
 8002f7c:	099b      	lsrs	r3, r3, #6
 8002f7e:	3301      	adds	r3, #1
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	6812      	ldr	r2, [r2, #0]
 8002f84:	430b      	orrs	r3, r1
 8002f86:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	69db      	ldr	r3, [r3, #28]
 8002f8e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002f92:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	495c      	ldr	r1, [pc, #368]	@ (800310c <HAL_I2C_Init+0x274>)
 8002f9c:	428b      	cmp	r3, r1
 8002f9e:	d819      	bhi.n	8002fd4 <HAL_I2C_Init+0x13c>
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	1e59      	subs	r1, r3, #1
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	005b      	lsls	r3, r3, #1
 8002faa:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fae:	1c59      	adds	r1, r3, #1
 8002fb0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002fb4:	400b      	ands	r3, r1
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d00a      	beq.n	8002fd0 <HAL_I2C_Init+0x138>
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	1e59      	subs	r1, r3, #1
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	005b      	lsls	r3, r3, #1
 8002fc4:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fc8:	3301      	adds	r3, #1
 8002fca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fce:	e051      	b.n	8003074 <HAL_I2C_Init+0x1dc>
 8002fd0:	2304      	movs	r3, #4
 8002fd2:	e04f      	b.n	8003074 <HAL_I2C_Init+0x1dc>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d111      	bne.n	8003000 <HAL_I2C_Init+0x168>
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	1e58      	subs	r0, r3, #1
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6859      	ldr	r1, [r3, #4]
 8002fe4:	460b      	mov	r3, r1
 8002fe6:	005b      	lsls	r3, r3, #1
 8002fe8:	440b      	add	r3, r1
 8002fea:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fee:	3301      	adds	r3, #1
 8002ff0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	bf0c      	ite	eq
 8002ff8:	2301      	moveq	r3, #1
 8002ffa:	2300      	movne	r3, #0
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	e012      	b.n	8003026 <HAL_I2C_Init+0x18e>
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	1e58      	subs	r0, r3, #1
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6859      	ldr	r1, [r3, #4]
 8003008:	460b      	mov	r3, r1
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	440b      	add	r3, r1
 800300e:	0099      	lsls	r1, r3, #2
 8003010:	440b      	add	r3, r1
 8003012:	fbb0 f3f3 	udiv	r3, r0, r3
 8003016:	3301      	adds	r3, #1
 8003018:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800301c:	2b00      	cmp	r3, #0
 800301e:	bf0c      	ite	eq
 8003020:	2301      	moveq	r3, #1
 8003022:	2300      	movne	r3, #0
 8003024:	b2db      	uxtb	r3, r3
 8003026:	2b00      	cmp	r3, #0
 8003028:	d001      	beq.n	800302e <HAL_I2C_Init+0x196>
 800302a:	2301      	movs	r3, #1
 800302c:	e022      	b.n	8003074 <HAL_I2C_Init+0x1dc>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d10e      	bne.n	8003054 <HAL_I2C_Init+0x1bc>
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	1e58      	subs	r0, r3, #1
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6859      	ldr	r1, [r3, #4]
 800303e:	460b      	mov	r3, r1
 8003040:	005b      	lsls	r3, r3, #1
 8003042:	440b      	add	r3, r1
 8003044:	fbb0 f3f3 	udiv	r3, r0, r3
 8003048:	3301      	adds	r3, #1
 800304a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800304e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003052:	e00f      	b.n	8003074 <HAL_I2C_Init+0x1dc>
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	1e58      	subs	r0, r3, #1
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6859      	ldr	r1, [r3, #4]
 800305c:	460b      	mov	r3, r1
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	440b      	add	r3, r1
 8003062:	0099      	lsls	r1, r3, #2
 8003064:	440b      	add	r3, r1
 8003066:	fbb0 f3f3 	udiv	r3, r0, r3
 800306a:	3301      	adds	r3, #1
 800306c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003070:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003074:	6879      	ldr	r1, [r7, #4]
 8003076:	6809      	ldr	r1, [r1, #0]
 8003078:	4313      	orrs	r3, r2
 800307a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	69da      	ldr	r2, [r3, #28]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6a1b      	ldr	r3, [r3, #32]
 800308e:	431a      	orrs	r2, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	430a      	orrs	r2, r1
 8003096:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80030a2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	6911      	ldr	r1, [r2, #16]
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	68d2      	ldr	r2, [r2, #12]
 80030ae:	4311      	orrs	r1, r2
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	6812      	ldr	r2, [r2, #0]
 80030b4:	430b      	orrs	r3, r1
 80030b6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	68db      	ldr	r3, [r3, #12]
 80030be:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	695a      	ldr	r2, [r3, #20]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	699b      	ldr	r3, [r3, #24]
 80030ca:	431a      	orrs	r2, r3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	430a      	orrs	r2, r1
 80030d2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f042 0201 	orr.w	r2, r2, #1
 80030e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2200      	movs	r2, #0
 80030e8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2220      	movs	r2, #32
 80030ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003100:	2300      	movs	r3, #0
}
 8003102:	4618      	mov	r0, r3
 8003104:	3710      	adds	r7, #16
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	000186a0 	.word	0x000186a0
 8003110:	001e847f 	.word	0x001e847f
 8003114:	003d08ff 	.word	0x003d08ff
 8003118:	431bde83 	.word	0x431bde83
 800311c:	10624dd3 	.word	0x10624dd3

08003120 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b088      	sub	sp, #32
 8003124:	af02      	add	r7, sp, #8
 8003126:	60f8      	str	r0, [r7, #12]
 8003128:	4608      	mov	r0, r1
 800312a:	4611      	mov	r1, r2
 800312c:	461a      	mov	r2, r3
 800312e:	4603      	mov	r3, r0
 8003130:	817b      	strh	r3, [r7, #10]
 8003132:	460b      	mov	r3, r1
 8003134:	813b      	strh	r3, [r7, #8]
 8003136:	4613      	mov	r3, r2
 8003138:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800313a:	f7fe ffc9 	bl	80020d0 <HAL_GetTick>
 800313e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003146:	b2db      	uxtb	r3, r3
 8003148:	2b20      	cmp	r3, #32
 800314a:	f040 80d9 	bne.w	8003300 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	9300      	str	r3, [sp, #0]
 8003152:	2319      	movs	r3, #25
 8003154:	2201      	movs	r2, #1
 8003156:	496d      	ldr	r1, [pc, #436]	@ (800330c <HAL_I2C_Mem_Write+0x1ec>)
 8003158:	68f8      	ldr	r0, [r7, #12]
 800315a:	f000 fc8b 	bl	8003a74 <I2C_WaitOnFlagUntilTimeout>
 800315e:	4603      	mov	r3, r0
 8003160:	2b00      	cmp	r3, #0
 8003162:	d001      	beq.n	8003168 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003164:	2302      	movs	r3, #2
 8003166:	e0cc      	b.n	8003302 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800316e:	2b01      	cmp	r3, #1
 8003170:	d101      	bne.n	8003176 <HAL_I2C_Mem_Write+0x56>
 8003172:	2302      	movs	r3, #2
 8003174:	e0c5      	b.n	8003302 <HAL_I2C_Mem_Write+0x1e2>
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2201      	movs	r2, #1
 800317a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0301 	and.w	r3, r3, #1
 8003188:	2b01      	cmp	r3, #1
 800318a:	d007      	beq.n	800319c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f042 0201 	orr.w	r2, r2, #1
 800319a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80031aa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2221      	movs	r2, #33	@ 0x21
 80031b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2240      	movs	r2, #64	@ 0x40
 80031b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2200      	movs	r2, #0
 80031c0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	6a3a      	ldr	r2, [r7, #32]
 80031c6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80031cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031d2:	b29a      	uxth	r2, r3
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	4a4d      	ldr	r2, [pc, #308]	@ (8003310 <HAL_I2C_Mem_Write+0x1f0>)
 80031dc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80031de:	88f8      	ldrh	r0, [r7, #6]
 80031e0:	893a      	ldrh	r2, [r7, #8]
 80031e2:	8979      	ldrh	r1, [r7, #10]
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	9301      	str	r3, [sp, #4]
 80031e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031ea:	9300      	str	r3, [sp, #0]
 80031ec:	4603      	mov	r3, r0
 80031ee:	68f8      	ldr	r0, [r7, #12]
 80031f0:	f000 fac2 	bl	8003778 <I2C_RequestMemoryWrite>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d052      	beq.n	80032a0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e081      	b.n	8003302 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031fe:	697a      	ldr	r2, [r7, #20]
 8003200:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003202:	68f8      	ldr	r0, [r7, #12]
 8003204:	f000 fd50 	bl	8003ca8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003208:	4603      	mov	r3, r0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d00d      	beq.n	800322a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003212:	2b04      	cmp	r3, #4
 8003214:	d107      	bne.n	8003226 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003224:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e06b      	b.n	8003302 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800322e:	781a      	ldrb	r2, [r3, #0]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800323a:	1c5a      	adds	r2, r3, #1
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003244:	3b01      	subs	r3, #1
 8003246:	b29a      	uxth	r2, r3
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003250:	b29b      	uxth	r3, r3
 8003252:	3b01      	subs	r3, #1
 8003254:	b29a      	uxth	r2, r3
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	695b      	ldr	r3, [r3, #20]
 8003260:	f003 0304 	and.w	r3, r3, #4
 8003264:	2b04      	cmp	r3, #4
 8003266:	d11b      	bne.n	80032a0 <HAL_I2C_Mem_Write+0x180>
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800326c:	2b00      	cmp	r3, #0
 800326e:	d017      	beq.n	80032a0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003274:	781a      	ldrb	r2, [r3, #0]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003280:	1c5a      	adds	r2, r3, #1
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800328a:	3b01      	subs	r3, #1
 800328c:	b29a      	uxth	r2, r3
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003296:	b29b      	uxth	r3, r3
 8003298:	3b01      	subs	r3, #1
 800329a:	b29a      	uxth	r2, r3
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d1aa      	bne.n	80031fe <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032a8:	697a      	ldr	r2, [r7, #20]
 80032aa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80032ac:	68f8      	ldr	r0, [r7, #12]
 80032ae:	f000 fd43 	bl	8003d38 <I2C_WaitOnBTFFlagUntilTimeout>
 80032b2:	4603      	mov	r3, r0
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d00d      	beq.n	80032d4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032bc:	2b04      	cmp	r3, #4
 80032be:	d107      	bne.n	80032d0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032ce:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e016      	b.n	8003302 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2220      	movs	r2, #32
 80032e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2200      	movs	r2, #0
 80032f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2200      	movs	r2, #0
 80032f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80032fc:	2300      	movs	r3, #0
 80032fe:	e000      	b.n	8003302 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003300:	2302      	movs	r3, #2
  }
}
 8003302:	4618      	mov	r0, r3
 8003304:	3718      	adds	r7, #24
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	00100002 	.word	0x00100002
 8003310:	ffff0000 	.word	0xffff0000

08003314 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b08c      	sub	sp, #48	@ 0x30
 8003318:	af02      	add	r7, sp, #8
 800331a:	60f8      	str	r0, [r7, #12]
 800331c:	4608      	mov	r0, r1
 800331e:	4611      	mov	r1, r2
 8003320:	461a      	mov	r2, r3
 8003322:	4603      	mov	r3, r0
 8003324:	817b      	strh	r3, [r7, #10]
 8003326:	460b      	mov	r3, r1
 8003328:	813b      	strh	r3, [r7, #8]
 800332a:	4613      	mov	r3, r2
 800332c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800332e:	f7fe fecf 	bl	80020d0 <HAL_GetTick>
 8003332:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800333a:	b2db      	uxtb	r3, r3
 800333c:	2b20      	cmp	r3, #32
 800333e:	f040 8214 	bne.w	800376a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003344:	9300      	str	r3, [sp, #0]
 8003346:	2319      	movs	r3, #25
 8003348:	2201      	movs	r2, #1
 800334a:	497b      	ldr	r1, [pc, #492]	@ (8003538 <HAL_I2C_Mem_Read+0x224>)
 800334c:	68f8      	ldr	r0, [r7, #12]
 800334e:	f000 fb91 	bl	8003a74 <I2C_WaitOnFlagUntilTimeout>
 8003352:	4603      	mov	r3, r0
 8003354:	2b00      	cmp	r3, #0
 8003356:	d001      	beq.n	800335c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003358:	2302      	movs	r3, #2
 800335a:	e207      	b.n	800376c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003362:	2b01      	cmp	r3, #1
 8003364:	d101      	bne.n	800336a <HAL_I2C_Mem_Read+0x56>
 8003366:	2302      	movs	r3, #2
 8003368:	e200      	b.n	800376c <HAL_I2C_Mem_Read+0x458>
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2201      	movs	r2, #1
 800336e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0301 	and.w	r3, r3, #1
 800337c:	2b01      	cmp	r3, #1
 800337e:	d007      	beq.n	8003390 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f042 0201 	orr.w	r2, r2, #1
 800338e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800339e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2222      	movs	r2, #34	@ 0x22
 80033a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2240      	movs	r2, #64	@ 0x40
 80033ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2200      	movs	r2, #0
 80033b4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80033ba:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80033c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033c6:	b29a      	uxth	r2, r3
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	4a5b      	ldr	r2, [pc, #364]	@ (800353c <HAL_I2C_Mem_Read+0x228>)
 80033d0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80033d2:	88f8      	ldrh	r0, [r7, #6]
 80033d4:	893a      	ldrh	r2, [r7, #8]
 80033d6:	8979      	ldrh	r1, [r7, #10]
 80033d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033da:	9301      	str	r3, [sp, #4]
 80033dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033de:	9300      	str	r3, [sp, #0]
 80033e0:	4603      	mov	r3, r0
 80033e2:	68f8      	ldr	r0, [r7, #12]
 80033e4:	f000 fa5e 	bl	80038a4 <I2C_RequestMemoryRead>
 80033e8:	4603      	mov	r3, r0
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d001      	beq.n	80033f2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e1bc      	b.n	800376c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d113      	bne.n	8003422 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033fa:	2300      	movs	r3, #0
 80033fc:	623b      	str	r3, [r7, #32]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	695b      	ldr	r3, [r3, #20]
 8003404:	623b      	str	r3, [r7, #32]
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	699b      	ldr	r3, [r3, #24]
 800340c:	623b      	str	r3, [r7, #32]
 800340e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800341e:	601a      	str	r2, [r3, #0]
 8003420:	e190      	b.n	8003744 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003426:	2b01      	cmp	r3, #1
 8003428:	d11b      	bne.n	8003462 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003438:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800343a:	2300      	movs	r3, #0
 800343c:	61fb      	str	r3, [r7, #28]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	695b      	ldr	r3, [r3, #20]
 8003444:	61fb      	str	r3, [r7, #28]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	699b      	ldr	r3, [r3, #24]
 800344c:	61fb      	str	r3, [r7, #28]
 800344e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800345e:	601a      	str	r2, [r3, #0]
 8003460:	e170      	b.n	8003744 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003466:	2b02      	cmp	r3, #2
 8003468:	d11b      	bne.n	80034a2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003478:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003488:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800348a:	2300      	movs	r3, #0
 800348c:	61bb      	str	r3, [r7, #24]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	695b      	ldr	r3, [r3, #20]
 8003494:	61bb      	str	r3, [r7, #24]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	699b      	ldr	r3, [r3, #24]
 800349c:	61bb      	str	r3, [r7, #24]
 800349e:	69bb      	ldr	r3, [r7, #24]
 80034a0:	e150      	b.n	8003744 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034a2:	2300      	movs	r3, #0
 80034a4:	617b      	str	r3, [r7, #20]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	695b      	ldr	r3, [r3, #20]
 80034ac:	617b      	str	r3, [r7, #20]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	699b      	ldr	r3, [r3, #24]
 80034b4:	617b      	str	r3, [r7, #20]
 80034b6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80034b8:	e144      	b.n	8003744 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034be:	2b03      	cmp	r3, #3
 80034c0:	f200 80f1 	bhi.w	80036a6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d123      	bne.n	8003514 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034ce:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80034d0:	68f8      	ldr	r0, [r7, #12]
 80034d2:	f000 fc79 	bl	8003dc8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80034d6:	4603      	mov	r3, r0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d001      	beq.n	80034e0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	e145      	b.n	800376c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	691a      	ldr	r2, [r3, #16]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ea:	b2d2      	uxtb	r2, r2
 80034ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034f2:	1c5a      	adds	r2, r3, #1
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034fc:	3b01      	subs	r3, #1
 80034fe:	b29a      	uxth	r2, r3
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003508:	b29b      	uxth	r3, r3
 800350a:	3b01      	subs	r3, #1
 800350c:	b29a      	uxth	r2, r3
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003512:	e117      	b.n	8003744 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003518:	2b02      	cmp	r3, #2
 800351a:	d14e      	bne.n	80035ba <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800351c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800351e:	9300      	str	r3, [sp, #0]
 8003520:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003522:	2200      	movs	r2, #0
 8003524:	4906      	ldr	r1, [pc, #24]	@ (8003540 <HAL_I2C_Mem_Read+0x22c>)
 8003526:	68f8      	ldr	r0, [r7, #12]
 8003528:	f000 faa4 	bl	8003a74 <I2C_WaitOnFlagUntilTimeout>
 800352c:	4603      	mov	r3, r0
 800352e:	2b00      	cmp	r3, #0
 8003530:	d008      	beq.n	8003544 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e11a      	b.n	800376c <HAL_I2C_Mem_Read+0x458>
 8003536:	bf00      	nop
 8003538:	00100002 	.word	0x00100002
 800353c:	ffff0000 	.word	0xffff0000
 8003540:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003552:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	691a      	ldr	r2, [r3, #16]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800355e:	b2d2      	uxtb	r2, r2
 8003560:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003566:	1c5a      	adds	r2, r3, #1
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003570:	3b01      	subs	r3, #1
 8003572:	b29a      	uxth	r2, r3
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800357c:	b29b      	uxth	r3, r3
 800357e:	3b01      	subs	r3, #1
 8003580:	b29a      	uxth	r2, r3
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	691a      	ldr	r2, [r3, #16]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003590:	b2d2      	uxtb	r2, r2
 8003592:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003598:	1c5a      	adds	r2, r3, #1
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035a2:	3b01      	subs	r3, #1
 80035a4:	b29a      	uxth	r2, r3
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035ae:	b29b      	uxth	r3, r3
 80035b0:	3b01      	subs	r3, #1
 80035b2:	b29a      	uxth	r2, r3
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80035b8:	e0c4      	b.n	8003744 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80035ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035bc:	9300      	str	r3, [sp, #0]
 80035be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035c0:	2200      	movs	r2, #0
 80035c2:	496c      	ldr	r1, [pc, #432]	@ (8003774 <HAL_I2C_Mem_Read+0x460>)
 80035c4:	68f8      	ldr	r0, [r7, #12]
 80035c6:	f000 fa55 	bl	8003a74 <I2C_WaitOnFlagUntilTimeout>
 80035ca:	4603      	mov	r3, r0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d001      	beq.n	80035d4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e0cb      	b.n	800376c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	691a      	ldr	r2, [r3, #16]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ee:	b2d2      	uxtb	r2, r2
 80035f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035f6:	1c5a      	adds	r2, r3, #1
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003600:	3b01      	subs	r3, #1
 8003602:	b29a      	uxth	r2, r3
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800360c:	b29b      	uxth	r3, r3
 800360e:	3b01      	subs	r3, #1
 8003610:	b29a      	uxth	r2, r3
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003618:	9300      	str	r3, [sp, #0]
 800361a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800361c:	2200      	movs	r2, #0
 800361e:	4955      	ldr	r1, [pc, #340]	@ (8003774 <HAL_I2C_Mem_Read+0x460>)
 8003620:	68f8      	ldr	r0, [r7, #12]
 8003622:	f000 fa27 	bl	8003a74 <I2C_WaitOnFlagUntilTimeout>
 8003626:	4603      	mov	r3, r0
 8003628:	2b00      	cmp	r3, #0
 800362a:	d001      	beq.n	8003630 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	e09d      	b.n	800376c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800363e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	691a      	ldr	r2, [r3, #16]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800364a:	b2d2      	uxtb	r2, r2
 800364c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003652:	1c5a      	adds	r2, r3, #1
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800365c:	3b01      	subs	r3, #1
 800365e:	b29a      	uxth	r2, r3
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003668:	b29b      	uxth	r3, r3
 800366a:	3b01      	subs	r3, #1
 800366c:	b29a      	uxth	r2, r3
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	691a      	ldr	r2, [r3, #16]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800367c:	b2d2      	uxtb	r2, r2
 800367e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003684:	1c5a      	adds	r2, r3, #1
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800368e:	3b01      	subs	r3, #1
 8003690:	b29a      	uxth	r2, r3
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800369a:	b29b      	uxth	r3, r3
 800369c:	3b01      	subs	r3, #1
 800369e:	b29a      	uxth	r2, r3
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80036a4:	e04e      	b.n	8003744 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036a8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80036aa:	68f8      	ldr	r0, [r7, #12]
 80036ac:	f000 fb8c 	bl	8003dc8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80036b0:	4603      	mov	r3, r0
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d001      	beq.n	80036ba <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e058      	b.n	800376c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	691a      	ldr	r2, [r3, #16]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036c4:	b2d2      	uxtb	r2, r2
 80036c6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036cc:	1c5a      	adds	r2, r3, #1
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036d6:	3b01      	subs	r3, #1
 80036d8:	b29a      	uxth	r2, r3
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036e2:	b29b      	uxth	r3, r3
 80036e4:	3b01      	subs	r3, #1
 80036e6:	b29a      	uxth	r2, r3
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	695b      	ldr	r3, [r3, #20]
 80036f2:	f003 0304 	and.w	r3, r3, #4
 80036f6:	2b04      	cmp	r3, #4
 80036f8:	d124      	bne.n	8003744 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036fe:	2b03      	cmp	r3, #3
 8003700:	d107      	bne.n	8003712 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003710:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	691a      	ldr	r2, [r3, #16]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800371c:	b2d2      	uxtb	r2, r2
 800371e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003724:	1c5a      	adds	r2, r3, #1
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800372e:	3b01      	subs	r3, #1
 8003730:	b29a      	uxth	r2, r3
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800373a:	b29b      	uxth	r3, r3
 800373c:	3b01      	subs	r3, #1
 800373e:	b29a      	uxth	r2, r3
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003748:	2b00      	cmp	r3, #0
 800374a:	f47f aeb6 	bne.w	80034ba <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2220      	movs	r2, #32
 8003752:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2200      	movs	r2, #0
 800375a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2200      	movs	r2, #0
 8003762:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003766:	2300      	movs	r3, #0
 8003768:	e000      	b.n	800376c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800376a:	2302      	movs	r3, #2
  }
}
 800376c:	4618      	mov	r0, r3
 800376e:	3728      	adds	r7, #40	@ 0x28
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}
 8003774:	00010004 	.word	0x00010004

08003778 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b088      	sub	sp, #32
 800377c:	af02      	add	r7, sp, #8
 800377e:	60f8      	str	r0, [r7, #12]
 8003780:	4608      	mov	r0, r1
 8003782:	4611      	mov	r1, r2
 8003784:	461a      	mov	r2, r3
 8003786:	4603      	mov	r3, r0
 8003788:	817b      	strh	r3, [r7, #10]
 800378a:	460b      	mov	r3, r1
 800378c:	813b      	strh	r3, [r7, #8]
 800378e:	4613      	mov	r3, r2
 8003790:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80037a0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80037a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037a4:	9300      	str	r3, [sp, #0]
 80037a6:	6a3b      	ldr	r3, [r7, #32]
 80037a8:	2200      	movs	r2, #0
 80037aa:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80037ae:	68f8      	ldr	r0, [r7, #12]
 80037b0:	f000 f960 	bl	8003a74 <I2C_WaitOnFlagUntilTimeout>
 80037b4:	4603      	mov	r3, r0
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d00d      	beq.n	80037d6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80037c8:	d103      	bne.n	80037d2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80037d0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80037d2:	2303      	movs	r3, #3
 80037d4:	e05f      	b.n	8003896 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80037d6:	897b      	ldrh	r3, [r7, #10]
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	461a      	mov	r2, r3
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80037e4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80037e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037e8:	6a3a      	ldr	r2, [r7, #32]
 80037ea:	492d      	ldr	r1, [pc, #180]	@ (80038a0 <I2C_RequestMemoryWrite+0x128>)
 80037ec:	68f8      	ldr	r0, [r7, #12]
 80037ee:	f000 f9bb 	bl	8003b68 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037f2:	4603      	mov	r3, r0
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d001      	beq.n	80037fc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e04c      	b.n	8003896 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037fc:	2300      	movs	r3, #0
 80037fe:	617b      	str	r3, [r7, #20]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	695b      	ldr	r3, [r3, #20]
 8003806:	617b      	str	r3, [r7, #20]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	699b      	ldr	r3, [r3, #24]
 800380e:	617b      	str	r3, [r7, #20]
 8003810:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003812:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003814:	6a39      	ldr	r1, [r7, #32]
 8003816:	68f8      	ldr	r0, [r7, #12]
 8003818:	f000 fa46 	bl	8003ca8 <I2C_WaitOnTXEFlagUntilTimeout>
 800381c:	4603      	mov	r3, r0
 800381e:	2b00      	cmp	r3, #0
 8003820:	d00d      	beq.n	800383e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003826:	2b04      	cmp	r3, #4
 8003828:	d107      	bne.n	800383a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003838:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e02b      	b.n	8003896 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800383e:	88fb      	ldrh	r3, [r7, #6]
 8003840:	2b01      	cmp	r3, #1
 8003842:	d105      	bne.n	8003850 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003844:	893b      	ldrh	r3, [r7, #8]
 8003846:	b2da      	uxtb	r2, r3
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	611a      	str	r2, [r3, #16]
 800384e:	e021      	b.n	8003894 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003850:	893b      	ldrh	r3, [r7, #8]
 8003852:	0a1b      	lsrs	r3, r3, #8
 8003854:	b29b      	uxth	r3, r3
 8003856:	b2da      	uxtb	r2, r3
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800385e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003860:	6a39      	ldr	r1, [r7, #32]
 8003862:	68f8      	ldr	r0, [r7, #12]
 8003864:	f000 fa20 	bl	8003ca8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003868:	4603      	mov	r3, r0
 800386a:	2b00      	cmp	r3, #0
 800386c:	d00d      	beq.n	800388a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003872:	2b04      	cmp	r3, #4
 8003874:	d107      	bne.n	8003886 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003884:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e005      	b.n	8003896 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800388a:	893b      	ldrh	r3, [r7, #8]
 800388c:	b2da      	uxtb	r2, r3
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003894:	2300      	movs	r3, #0
}
 8003896:	4618      	mov	r0, r3
 8003898:	3718      	adds	r7, #24
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	00010002 	.word	0x00010002

080038a4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b088      	sub	sp, #32
 80038a8:	af02      	add	r7, sp, #8
 80038aa:	60f8      	str	r0, [r7, #12]
 80038ac:	4608      	mov	r0, r1
 80038ae:	4611      	mov	r1, r2
 80038b0:	461a      	mov	r2, r3
 80038b2:	4603      	mov	r3, r0
 80038b4:	817b      	strh	r3, [r7, #10]
 80038b6:	460b      	mov	r3, r1
 80038b8:	813b      	strh	r3, [r7, #8]
 80038ba:	4613      	mov	r3, r2
 80038bc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80038cc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80038dc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80038de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038e0:	9300      	str	r3, [sp, #0]
 80038e2:	6a3b      	ldr	r3, [r7, #32]
 80038e4:	2200      	movs	r2, #0
 80038e6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80038ea:	68f8      	ldr	r0, [r7, #12]
 80038ec:	f000 f8c2 	bl	8003a74 <I2C_WaitOnFlagUntilTimeout>
 80038f0:	4603      	mov	r3, r0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d00d      	beq.n	8003912 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003900:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003904:	d103      	bne.n	800390e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800390c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800390e:	2303      	movs	r3, #3
 8003910:	e0aa      	b.n	8003a68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003912:	897b      	ldrh	r3, [r7, #10]
 8003914:	b2db      	uxtb	r3, r3
 8003916:	461a      	mov	r2, r3
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003920:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003924:	6a3a      	ldr	r2, [r7, #32]
 8003926:	4952      	ldr	r1, [pc, #328]	@ (8003a70 <I2C_RequestMemoryRead+0x1cc>)
 8003928:	68f8      	ldr	r0, [r7, #12]
 800392a:	f000 f91d 	bl	8003b68 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800392e:	4603      	mov	r3, r0
 8003930:	2b00      	cmp	r3, #0
 8003932:	d001      	beq.n	8003938 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e097      	b.n	8003a68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003938:	2300      	movs	r3, #0
 800393a:	617b      	str	r3, [r7, #20]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	695b      	ldr	r3, [r3, #20]
 8003942:	617b      	str	r3, [r7, #20]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	699b      	ldr	r3, [r3, #24]
 800394a:	617b      	str	r3, [r7, #20]
 800394c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800394e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003950:	6a39      	ldr	r1, [r7, #32]
 8003952:	68f8      	ldr	r0, [r7, #12]
 8003954:	f000 f9a8 	bl	8003ca8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003958:	4603      	mov	r3, r0
 800395a:	2b00      	cmp	r3, #0
 800395c:	d00d      	beq.n	800397a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003962:	2b04      	cmp	r3, #4
 8003964:	d107      	bne.n	8003976 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003974:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e076      	b.n	8003a68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800397a:	88fb      	ldrh	r3, [r7, #6]
 800397c:	2b01      	cmp	r3, #1
 800397e:	d105      	bne.n	800398c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003980:	893b      	ldrh	r3, [r7, #8]
 8003982:	b2da      	uxtb	r2, r3
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	611a      	str	r2, [r3, #16]
 800398a:	e021      	b.n	80039d0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800398c:	893b      	ldrh	r3, [r7, #8]
 800398e:	0a1b      	lsrs	r3, r3, #8
 8003990:	b29b      	uxth	r3, r3
 8003992:	b2da      	uxtb	r2, r3
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800399a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800399c:	6a39      	ldr	r1, [r7, #32]
 800399e:	68f8      	ldr	r0, [r7, #12]
 80039a0:	f000 f982 	bl	8003ca8 <I2C_WaitOnTXEFlagUntilTimeout>
 80039a4:	4603      	mov	r3, r0
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d00d      	beq.n	80039c6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ae:	2b04      	cmp	r3, #4
 80039b0:	d107      	bne.n	80039c2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039c0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e050      	b.n	8003a68 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80039c6:	893b      	ldrh	r3, [r7, #8]
 80039c8:	b2da      	uxtb	r2, r3
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039d2:	6a39      	ldr	r1, [r7, #32]
 80039d4:	68f8      	ldr	r0, [r7, #12]
 80039d6:	f000 f967 	bl	8003ca8 <I2C_WaitOnTXEFlagUntilTimeout>
 80039da:	4603      	mov	r3, r0
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d00d      	beq.n	80039fc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039e4:	2b04      	cmp	r3, #4
 80039e6:	d107      	bne.n	80039f8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039f6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e035      	b.n	8003a68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a0a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a0e:	9300      	str	r3, [sp, #0]
 8003a10:	6a3b      	ldr	r3, [r7, #32]
 8003a12:	2200      	movs	r2, #0
 8003a14:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003a18:	68f8      	ldr	r0, [r7, #12]
 8003a1a:	f000 f82b 	bl	8003a74 <I2C_WaitOnFlagUntilTimeout>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d00d      	beq.n	8003a40 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a32:	d103      	bne.n	8003a3c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a3a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003a3c:	2303      	movs	r3, #3
 8003a3e:	e013      	b.n	8003a68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003a40:	897b      	ldrh	r3, [r7, #10]
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	f043 0301 	orr.w	r3, r3, #1
 8003a48:	b2da      	uxtb	r2, r3
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a52:	6a3a      	ldr	r2, [r7, #32]
 8003a54:	4906      	ldr	r1, [pc, #24]	@ (8003a70 <I2C_RequestMemoryRead+0x1cc>)
 8003a56:	68f8      	ldr	r0, [r7, #12]
 8003a58:	f000 f886 	bl	8003b68 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d001      	beq.n	8003a66 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e000      	b.n	8003a68 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003a66:	2300      	movs	r3, #0
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3718      	adds	r7, #24
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	00010002 	.word	0x00010002

08003a74 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b084      	sub	sp, #16
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	60f8      	str	r0, [r7, #12]
 8003a7c:	60b9      	str	r1, [r7, #8]
 8003a7e:	603b      	str	r3, [r7, #0]
 8003a80:	4613      	mov	r3, r2
 8003a82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a84:	e048      	b.n	8003b18 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a8c:	d044      	beq.n	8003b18 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a8e:	f7fe fb1f 	bl	80020d0 <HAL_GetTick>
 8003a92:	4602      	mov	r2, r0
 8003a94:	69bb      	ldr	r3, [r7, #24]
 8003a96:	1ad3      	subs	r3, r2, r3
 8003a98:	683a      	ldr	r2, [r7, #0]
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d302      	bcc.n	8003aa4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d139      	bne.n	8003b18 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	0c1b      	lsrs	r3, r3, #16
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d10d      	bne.n	8003aca <I2C_WaitOnFlagUntilTimeout+0x56>
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	695b      	ldr	r3, [r3, #20]
 8003ab4:	43da      	mvns	r2, r3
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	4013      	ands	r3, r2
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	bf0c      	ite	eq
 8003ac0:	2301      	moveq	r3, #1
 8003ac2:	2300      	movne	r3, #0
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	461a      	mov	r2, r3
 8003ac8:	e00c      	b.n	8003ae4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	699b      	ldr	r3, [r3, #24]
 8003ad0:	43da      	mvns	r2, r3
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	b29b      	uxth	r3, r3
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	bf0c      	ite	eq
 8003adc:	2301      	moveq	r3, #1
 8003ade:	2300      	movne	r3, #0
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	79fb      	ldrb	r3, [r7, #7]
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d116      	bne.n	8003b18 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2200      	movs	r2, #0
 8003aee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2220      	movs	r2, #32
 8003af4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2200      	movs	r2, #0
 8003afc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b04:	f043 0220 	orr.w	r2, r3, #32
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e023      	b.n	8003b60 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	0c1b      	lsrs	r3, r3, #16
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d10d      	bne.n	8003b3e <I2C_WaitOnFlagUntilTimeout+0xca>
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	695b      	ldr	r3, [r3, #20]
 8003b28:	43da      	mvns	r2, r3
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	bf0c      	ite	eq
 8003b34:	2301      	moveq	r3, #1
 8003b36:	2300      	movne	r3, #0
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	e00c      	b.n	8003b58 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	699b      	ldr	r3, [r3, #24]
 8003b44:	43da      	mvns	r2, r3
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	4013      	ands	r3, r2
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	bf0c      	ite	eq
 8003b50:	2301      	moveq	r3, #1
 8003b52:	2300      	movne	r3, #0
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	461a      	mov	r2, r3
 8003b58:	79fb      	ldrb	r3, [r7, #7]
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d093      	beq.n	8003a86 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b5e:	2300      	movs	r3, #0
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	3710      	adds	r7, #16
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}

08003b68 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b084      	sub	sp, #16
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	60f8      	str	r0, [r7, #12]
 8003b70:	60b9      	str	r1, [r7, #8]
 8003b72:	607a      	str	r2, [r7, #4]
 8003b74:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003b76:	e071      	b.n	8003c5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	695b      	ldr	r3, [r3, #20]
 8003b7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b86:	d123      	bne.n	8003bd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b96:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003ba0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2220      	movs	r2, #32
 8003bac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bbc:	f043 0204 	orr.w	r2, r3, #4
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e067      	b.n	8003ca0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bd6:	d041      	beq.n	8003c5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bd8:	f7fe fa7a 	bl	80020d0 <HAL_GetTick>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	687a      	ldr	r2, [r7, #4]
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d302      	bcc.n	8003bee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d136      	bne.n	8003c5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	0c1b      	lsrs	r3, r3, #16
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d10c      	bne.n	8003c12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	695b      	ldr	r3, [r3, #20]
 8003bfe:	43da      	mvns	r2, r3
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	4013      	ands	r3, r2
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	bf14      	ite	ne
 8003c0a:	2301      	movne	r3, #1
 8003c0c:	2300      	moveq	r3, #0
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	e00b      	b.n	8003c2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	699b      	ldr	r3, [r3, #24]
 8003c18:	43da      	mvns	r2, r3
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	bf14      	ite	ne
 8003c24:	2301      	movne	r3, #1
 8003c26:	2300      	moveq	r3, #0
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d016      	beq.n	8003c5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2200      	movs	r2, #0
 8003c32:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2220      	movs	r2, #32
 8003c38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c48:	f043 0220 	orr.w	r2, r3, #32
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2200      	movs	r2, #0
 8003c54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	e021      	b.n	8003ca0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	0c1b      	lsrs	r3, r3, #16
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d10c      	bne.n	8003c80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	695b      	ldr	r3, [r3, #20]
 8003c6c:	43da      	mvns	r2, r3
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	4013      	ands	r3, r2
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	bf14      	ite	ne
 8003c78:	2301      	movne	r3, #1
 8003c7a:	2300      	moveq	r3, #0
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	e00b      	b.n	8003c98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	699b      	ldr	r3, [r3, #24]
 8003c86:	43da      	mvns	r2, r3
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	bf14      	ite	ne
 8003c92:	2301      	movne	r3, #1
 8003c94:	2300      	moveq	r3, #0
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	f47f af6d 	bne.w	8003b78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003c9e:	2300      	movs	r3, #0
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	3710      	adds	r7, #16
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}

08003ca8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b084      	sub	sp, #16
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	60f8      	str	r0, [r7, #12]
 8003cb0:	60b9      	str	r1, [r7, #8]
 8003cb2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003cb4:	e034      	b.n	8003d20 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003cb6:	68f8      	ldr	r0, [r7, #12]
 8003cb8:	f000 f8e3 	bl	8003e82 <I2C_IsAcknowledgeFailed>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d001      	beq.n	8003cc6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e034      	b.n	8003d30 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ccc:	d028      	beq.n	8003d20 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cce:	f7fe f9ff 	bl	80020d0 <HAL_GetTick>
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	1ad3      	subs	r3, r2, r3
 8003cd8:	68ba      	ldr	r2, [r7, #8]
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d302      	bcc.n	8003ce4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d11d      	bne.n	8003d20 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	695b      	ldr	r3, [r3, #20]
 8003cea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cee:	2b80      	cmp	r3, #128	@ 0x80
 8003cf0:	d016      	beq.n	8003d20 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2220      	movs	r2, #32
 8003cfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2200      	movs	r2, #0
 8003d04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d0c:	f043 0220 	orr.w	r2, r3, #32
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2200      	movs	r2, #0
 8003d18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e007      	b.n	8003d30 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	695b      	ldr	r3, [r3, #20]
 8003d26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d2a:	2b80      	cmp	r3, #128	@ 0x80
 8003d2c:	d1c3      	bne.n	8003cb6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003d2e:	2300      	movs	r3, #0
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3710      	adds	r7, #16
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}

08003d38 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b084      	sub	sp, #16
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	60f8      	str	r0, [r7, #12]
 8003d40:	60b9      	str	r1, [r7, #8]
 8003d42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d44:	e034      	b.n	8003db0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d46:	68f8      	ldr	r0, [r7, #12]
 8003d48:	f000 f89b 	bl	8003e82 <I2C_IsAcknowledgeFailed>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d001      	beq.n	8003d56 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e034      	b.n	8003dc0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d5c:	d028      	beq.n	8003db0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d5e:	f7fe f9b7 	bl	80020d0 <HAL_GetTick>
 8003d62:	4602      	mov	r2, r0
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	1ad3      	subs	r3, r2, r3
 8003d68:	68ba      	ldr	r2, [r7, #8]
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d302      	bcc.n	8003d74 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d11d      	bne.n	8003db0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	695b      	ldr	r3, [r3, #20]
 8003d7a:	f003 0304 	and.w	r3, r3, #4
 8003d7e:	2b04      	cmp	r3, #4
 8003d80:	d016      	beq.n	8003db0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2200      	movs	r2, #0
 8003d86:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2220      	movs	r2, #32
 8003d8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2200      	movs	r2, #0
 8003d94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d9c:	f043 0220 	orr.w	r2, r3, #32
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2200      	movs	r2, #0
 8003da8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	e007      	b.n	8003dc0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	695b      	ldr	r3, [r3, #20]
 8003db6:	f003 0304 	and.w	r3, r3, #4
 8003dba:	2b04      	cmp	r3, #4
 8003dbc:	d1c3      	bne.n	8003d46 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003dbe:	2300      	movs	r3, #0
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3710      	adds	r7, #16
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b084      	sub	sp, #16
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	60f8      	str	r0, [r7, #12]
 8003dd0:	60b9      	str	r1, [r7, #8]
 8003dd2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003dd4:	e049      	b.n	8003e6a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	695b      	ldr	r3, [r3, #20]
 8003ddc:	f003 0310 	and.w	r3, r3, #16
 8003de0:	2b10      	cmp	r3, #16
 8003de2:	d119      	bne.n	8003e18 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f06f 0210 	mvn.w	r2, #16
 8003dec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2200      	movs	r2, #0
 8003df2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2220      	movs	r2, #32
 8003df8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	e030      	b.n	8003e7a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e18:	f7fe f95a 	bl	80020d0 <HAL_GetTick>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	1ad3      	subs	r3, r2, r3
 8003e22:	68ba      	ldr	r2, [r7, #8]
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d302      	bcc.n	8003e2e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d11d      	bne.n	8003e6a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	695b      	ldr	r3, [r3, #20]
 8003e34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e38:	2b40      	cmp	r3, #64	@ 0x40
 8003e3a:	d016      	beq.n	8003e6a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2220      	movs	r2, #32
 8003e46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e56:	f043 0220 	orr.w	r2, r3, #32
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2200      	movs	r2, #0
 8003e62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e007      	b.n	8003e7a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	695b      	ldr	r3, [r3, #20]
 8003e70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e74:	2b40      	cmp	r3, #64	@ 0x40
 8003e76:	d1ae      	bne.n	8003dd6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003e78:	2300      	movs	r3, #0
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3710      	adds	r7, #16
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}

08003e82 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003e82:	b480      	push	{r7}
 8003e84:	b083      	sub	sp, #12
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	695b      	ldr	r3, [r3, #20]
 8003e90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e98:	d11b      	bne.n	8003ed2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003ea2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2220      	movs	r2, #32
 8003eae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ebe:	f043 0204 	orr.w	r2, r3, #4
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e000      	b.n	8003ed4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003ed2:	2300      	movs	r3, #0
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	370c      	adds	r7, #12
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr

08003ee0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b086      	sub	sp, #24
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d101      	bne.n	8003ef2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e267      	b.n	80043c2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 0301 	and.w	r3, r3, #1
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d075      	beq.n	8003fea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003efe:	4b88      	ldr	r3, [pc, #544]	@ (8004120 <HAL_RCC_OscConfig+0x240>)
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	f003 030c 	and.w	r3, r3, #12
 8003f06:	2b04      	cmp	r3, #4
 8003f08:	d00c      	beq.n	8003f24 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f0a:	4b85      	ldr	r3, [pc, #532]	@ (8004120 <HAL_RCC_OscConfig+0x240>)
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003f12:	2b08      	cmp	r3, #8
 8003f14:	d112      	bne.n	8003f3c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f16:	4b82      	ldr	r3, [pc, #520]	@ (8004120 <HAL_RCC_OscConfig+0x240>)
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f1e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003f22:	d10b      	bne.n	8003f3c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f24:	4b7e      	ldr	r3, [pc, #504]	@ (8004120 <HAL_RCC_OscConfig+0x240>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d05b      	beq.n	8003fe8 <HAL_RCC_OscConfig+0x108>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d157      	bne.n	8003fe8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	e242      	b.n	80043c2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f44:	d106      	bne.n	8003f54 <HAL_RCC_OscConfig+0x74>
 8003f46:	4b76      	ldr	r3, [pc, #472]	@ (8004120 <HAL_RCC_OscConfig+0x240>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a75      	ldr	r2, [pc, #468]	@ (8004120 <HAL_RCC_OscConfig+0x240>)
 8003f4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f50:	6013      	str	r3, [r2, #0]
 8003f52:	e01d      	b.n	8003f90 <HAL_RCC_OscConfig+0xb0>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003f5c:	d10c      	bne.n	8003f78 <HAL_RCC_OscConfig+0x98>
 8003f5e:	4b70      	ldr	r3, [pc, #448]	@ (8004120 <HAL_RCC_OscConfig+0x240>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a6f      	ldr	r2, [pc, #444]	@ (8004120 <HAL_RCC_OscConfig+0x240>)
 8003f64:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003f68:	6013      	str	r3, [r2, #0]
 8003f6a:	4b6d      	ldr	r3, [pc, #436]	@ (8004120 <HAL_RCC_OscConfig+0x240>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a6c      	ldr	r2, [pc, #432]	@ (8004120 <HAL_RCC_OscConfig+0x240>)
 8003f70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f74:	6013      	str	r3, [r2, #0]
 8003f76:	e00b      	b.n	8003f90 <HAL_RCC_OscConfig+0xb0>
 8003f78:	4b69      	ldr	r3, [pc, #420]	@ (8004120 <HAL_RCC_OscConfig+0x240>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a68      	ldr	r2, [pc, #416]	@ (8004120 <HAL_RCC_OscConfig+0x240>)
 8003f7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f82:	6013      	str	r3, [r2, #0]
 8003f84:	4b66      	ldr	r3, [pc, #408]	@ (8004120 <HAL_RCC_OscConfig+0x240>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a65      	ldr	r2, [pc, #404]	@ (8004120 <HAL_RCC_OscConfig+0x240>)
 8003f8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003f8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d013      	beq.n	8003fc0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f98:	f7fe f89a 	bl	80020d0 <HAL_GetTick>
 8003f9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f9e:	e008      	b.n	8003fb2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fa0:	f7fe f896 	bl	80020d0 <HAL_GetTick>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	2b64      	cmp	r3, #100	@ 0x64
 8003fac:	d901      	bls.n	8003fb2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003fae:	2303      	movs	r3, #3
 8003fb0:	e207      	b.n	80043c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fb2:	4b5b      	ldr	r3, [pc, #364]	@ (8004120 <HAL_RCC_OscConfig+0x240>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d0f0      	beq.n	8003fa0 <HAL_RCC_OscConfig+0xc0>
 8003fbe:	e014      	b.n	8003fea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fc0:	f7fe f886 	bl	80020d0 <HAL_GetTick>
 8003fc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fc6:	e008      	b.n	8003fda <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fc8:	f7fe f882 	bl	80020d0 <HAL_GetTick>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	2b64      	cmp	r3, #100	@ 0x64
 8003fd4:	d901      	bls.n	8003fda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003fd6:	2303      	movs	r3, #3
 8003fd8:	e1f3      	b.n	80043c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fda:	4b51      	ldr	r3, [pc, #324]	@ (8004120 <HAL_RCC_OscConfig+0x240>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d1f0      	bne.n	8003fc8 <HAL_RCC_OscConfig+0xe8>
 8003fe6:	e000      	b.n	8003fea <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fe8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 0302 	and.w	r3, r3, #2
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d063      	beq.n	80040be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003ff6:	4b4a      	ldr	r3, [pc, #296]	@ (8004120 <HAL_RCC_OscConfig+0x240>)
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	f003 030c 	and.w	r3, r3, #12
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d00b      	beq.n	800401a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004002:	4b47      	ldr	r3, [pc, #284]	@ (8004120 <HAL_RCC_OscConfig+0x240>)
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800400a:	2b08      	cmp	r3, #8
 800400c:	d11c      	bne.n	8004048 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800400e:	4b44      	ldr	r3, [pc, #272]	@ (8004120 <HAL_RCC_OscConfig+0x240>)
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004016:	2b00      	cmp	r3, #0
 8004018:	d116      	bne.n	8004048 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800401a:	4b41      	ldr	r3, [pc, #260]	@ (8004120 <HAL_RCC_OscConfig+0x240>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 0302 	and.w	r3, r3, #2
 8004022:	2b00      	cmp	r3, #0
 8004024:	d005      	beq.n	8004032 <HAL_RCC_OscConfig+0x152>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	68db      	ldr	r3, [r3, #12]
 800402a:	2b01      	cmp	r3, #1
 800402c:	d001      	beq.n	8004032 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e1c7      	b.n	80043c2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004032:	4b3b      	ldr	r3, [pc, #236]	@ (8004120 <HAL_RCC_OscConfig+0x240>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	691b      	ldr	r3, [r3, #16]
 800403e:	00db      	lsls	r3, r3, #3
 8004040:	4937      	ldr	r1, [pc, #220]	@ (8004120 <HAL_RCC_OscConfig+0x240>)
 8004042:	4313      	orrs	r3, r2
 8004044:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004046:	e03a      	b.n	80040be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d020      	beq.n	8004092 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004050:	4b34      	ldr	r3, [pc, #208]	@ (8004124 <HAL_RCC_OscConfig+0x244>)
 8004052:	2201      	movs	r2, #1
 8004054:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004056:	f7fe f83b 	bl	80020d0 <HAL_GetTick>
 800405a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800405c:	e008      	b.n	8004070 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800405e:	f7fe f837 	bl	80020d0 <HAL_GetTick>
 8004062:	4602      	mov	r2, r0
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	1ad3      	subs	r3, r2, r3
 8004068:	2b02      	cmp	r3, #2
 800406a:	d901      	bls.n	8004070 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800406c:	2303      	movs	r3, #3
 800406e:	e1a8      	b.n	80043c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004070:	4b2b      	ldr	r3, [pc, #172]	@ (8004120 <HAL_RCC_OscConfig+0x240>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 0302 	and.w	r3, r3, #2
 8004078:	2b00      	cmp	r3, #0
 800407a:	d0f0      	beq.n	800405e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800407c:	4b28      	ldr	r3, [pc, #160]	@ (8004120 <HAL_RCC_OscConfig+0x240>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	691b      	ldr	r3, [r3, #16]
 8004088:	00db      	lsls	r3, r3, #3
 800408a:	4925      	ldr	r1, [pc, #148]	@ (8004120 <HAL_RCC_OscConfig+0x240>)
 800408c:	4313      	orrs	r3, r2
 800408e:	600b      	str	r3, [r1, #0]
 8004090:	e015      	b.n	80040be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004092:	4b24      	ldr	r3, [pc, #144]	@ (8004124 <HAL_RCC_OscConfig+0x244>)
 8004094:	2200      	movs	r2, #0
 8004096:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004098:	f7fe f81a 	bl	80020d0 <HAL_GetTick>
 800409c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800409e:	e008      	b.n	80040b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040a0:	f7fe f816 	bl	80020d0 <HAL_GetTick>
 80040a4:	4602      	mov	r2, r0
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	1ad3      	subs	r3, r2, r3
 80040aa:	2b02      	cmp	r3, #2
 80040ac:	d901      	bls.n	80040b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80040ae:	2303      	movs	r3, #3
 80040b0:	e187      	b.n	80043c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040b2:	4b1b      	ldr	r3, [pc, #108]	@ (8004120 <HAL_RCC_OscConfig+0x240>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 0302 	and.w	r3, r3, #2
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d1f0      	bne.n	80040a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 0308 	and.w	r3, r3, #8
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d036      	beq.n	8004138 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	695b      	ldr	r3, [r3, #20]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d016      	beq.n	8004100 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040d2:	4b15      	ldr	r3, [pc, #84]	@ (8004128 <HAL_RCC_OscConfig+0x248>)
 80040d4:	2201      	movs	r2, #1
 80040d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040d8:	f7fd fffa 	bl	80020d0 <HAL_GetTick>
 80040dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040de:	e008      	b.n	80040f2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040e0:	f7fd fff6 	bl	80020d0 <HAL_GetTick>
 80040e4:	4602      	mov	r2, r0
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	2b02      	cmp	r3, #2
 80040ec:	d901      	bls.n	80040f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80040ee:	2303      	movs	r3, #3
 80040f0:	e167      	b.n	80043c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040f2:	4b0b      	ldr	r3, [pc, #44]	@ (8004120 <HAL_RCC_OscConfig+0x240>)
 80040f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040f6:	f003 0302 	and.w	r3, r3, #2
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d0f0      	beq.n	80040e0 <HAL_RCC_OscConfig+0x200>
 80040fe:	e01b      	b.n	8004138 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004100:	4b09      	ldr	r3, [pc, #36]	@ (8004128 <HAL_RCC_OscConfig+0x248>)
 8004102:	2200      	movs	r2, #0
 8004104:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004106:	f7fd ffe3 	bl	80020d0 <HAL_GetTick>
 800410a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800410c:	e00e      	b.n	800412c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800410e:	f7fd ffdf 	bl	80020d0 <HAL_GetTick>
 8004112:	4602      	mov	r2, r0
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	1ad3      	subs	r3, r2, r3
 8004118:	2b02      	cmp	r3, #2
 800411a:	d907      	bls.n	800412c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800411c:	2303      	movs	r3, #3
 800411e:	e150      	b.n	80043c2 <HAL_RCC_OscConfig+0x4e2>
 8004120:	40023800 	.word	0x40023800
 8004124:	42470000 	.word	0x42470000
 8004128:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800412c:	4b88      	ldr	r3, [pc, #544]	@ (8004350 <HAL_RCC_OscConfig+0x470>)
 800412e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004130:	f003 0302 	and.w	r3, r3, #2
 8004134:	2b00      	cmp	r3, #0
 8004136:	d1ea      	bne.n	800410e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 0304 	and.w	r3, r3, #4
 8004140:	2b00      	cmp	r3, #0
 8004142:	f000 8097 	beq.w	8004274 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004146:	2300      	movs	r3, #0
 8004148:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800414a:	4b81      	ldr	r3, [pc, #516]	@ (8004350 <HAL_RCC_OscConfig+0x470>)
 800414c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800414e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004152:	2b00      	cmp	r3, #0
 8004154:	d10f      	bne.n	8004176 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004156:	2300      	movs	r3, #0
 8004158:	60bb      	str	r3, [r7, #8]
 800415a:	4b7d      	ldr	r3, [pc, #500]	@ (8004350 <HAL_RCC_OscConfig+0x470>)
 800415c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800415e:	4a7c      	ldr	r2, [pc, #496]	@ (8004350 <HAL_RCC_OscConfig+0x470>)
 8004160:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004164:	6413      	str	r3, [r2, #64]	@ 0x40
 8004166:	4b7a      	ldr	r3, [pc, #488]	@ (8004350 <HAL_RCC_OscConfig+0x470>)
 8004168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800416a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800416e:	60bb      	str	r3, [r7, #8]
 8004170:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004172:	2301      	movs	r3, #1
 8004174:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004176:	4b77      	ldr	r3, [pc, #476]	@ (8004354 <HAL_RCC_OscConfig+0x474>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800417e:	2b00      	cmp	r3, #0
 8004180:	d118      	bne.n	80041b4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004182:	4b74      	ldr	r3, [pc, #464]	@ (8004354 <HAL_RCC_OscConfig+0x474>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a73      	ldr	r2, [pc, #460]	@ (8004354 <HAL_RCC_OscConfig+0x474>)
 8004188:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800418c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800418e:	f7fd ff9f 	bl	80020d0 <HAL_GetTick>
 8004192:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004194:	e008      	b.n	80041a8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004196:	f7fd ff9b 	bl	80020d0 <HAL_GetTick>
 800419a:	4602      	mov	r2, r0
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	1ad3      	subs	r3, r2, r3
 80041a0:	2b02      	cmp	r3, #2
 80041a2:	d901      	bls.n	80041a8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80041a4:	2303      	movs	r3, #3
 80041a6:	e10c      	b.n	80043c2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041a8:	4b6a      	ldr	r3, [pc, #424]	@ (8004354 <HAL_RCC_OscConfig+0x474>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d0f0      	beq.n	8004196 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d106      	bne.n	80041ca <HAL_RCC_OscConfig+0x2ea>
 80041bc:	4b64      	ldr	r3, [pc, #400]	@ (8004350 <HAL_RCC_OscConfig+0x470>)
 80041be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041c0:	4a63      	ldr	r2, [pc, #396]	@ (8004350 <HAL_RCC_OscConfig+0x470>)
 80041c2:	f043 0301 	orr.w	r3, r3, #1
 80041c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80041c8:	e01c      	b.n	8004204 <HAL_RCC_OscConfig+0x324>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	2b05      	cmp	r3, #5
 80041d0:	d10c      	bne.n	80041ec <HAL_RCC_OscConfig+0x30c>
 80041d2:	4b5f      	ldr	r3, [pc, #380]	@ (8004350 <HAL_RCC_OscConfig+0x470>)
 80041d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041d6:	4a5e      	ldr	r2, [pc, #376]	@ (8004350 <HAL_RCC_OscConfig+0x470>)
 80041d8:	f043 0304 	orr.w	r3, r3, #4
 80041dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80041de:	4b5c      	ldr	r3, [pc, #368]	@ (8004350 <HAL_RCC_OscConfig+0x470>)
 80041e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041e2:	4a5b      	ldr	r2, [pc, #364]	@ (8004350 <HAL_RCC_OscConfig+0x470>)
 80041e4:	f043 0301 	orr.w	r3, r3, #1
 80041e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80041ea:	e00b      	b.n	8004204 <HAL_RCC_OscConfig+0x324>
 80041ec:	4b58      	ldr	r3, [pc, #352]	@ (8004350 <HAL_RCC_OscConfig+0x470>)
 80041ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041f0:	4a57      	ldr	r2, [pc, #348]	@ (8004350 <HAL_RCC_OscConfig+0x470>)
 80041f2:	f023 0301 	bic.w	r3, r3, #1
 80041f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80041f8:	4b55      	ldr	r3, [pc, #340]	@ (8004350 <HAL_RCC_OscConfig+0x470>)
 80041fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041fc:	4a54      	ldr	r2, [pc, #336]	@ (8004350 <HAL_RCC_OscConfig+0x470>)
 80041fe:	f023 0304 	bic.w	r3, r3, #4
 8004202:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d015      	beq.n	8004238 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800420c:	f7fd ff60 	bl	80020d0 <HAL_GetTick>
 8004210:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004212:	e00a      	b.n	800422a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004214:	f7fd ff5c 	bl	80020d0 <HAL_GetTick>
 8004218:	4602      	mov	r2, r0
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	1ad3      	subs	r3, r2, r3
 800421e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004222:	4293      	cmp	r3, r2
 8004224:	d901      	bls.n	800422a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004226:	2303      	movs	r3, #3
 8004228:	e0cb      	b.n	80043c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800422a:	4b49      	ldr	r3, [pc, #292]	@ (8004350 <HAL_RCC_OscConfig+0x470>)
 800422c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800422e:	f003 0302 	and.w	r3, r3, #2
 8004232:	2b00      	cmp	r3, #0
 8004234:	d0ee      	beq.n	8004214 <HAL_RCC_OscConfig+0x334>
 8004236:	e014      	b.n	8004262 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004238:	f7fd ff4a 	bl	80020d0 <HAL_GetTick>
 800423c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800423e:	e00a      	b.n	8004256 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004240:	f7fd ff46 	bl	80020d0 <HAL_GetTick>
 8004244:	4602      	mov	r2, r0
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	1ad3      	subs	r3, r2, r3
 800424a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800424e:	4293      	cmp	r3, r2
 8004250:	d901      	bls.n	8004256 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004252:	2303      	movs	r3, #3
 8004254:	e0b5      	b.n	80043c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004256:	4b3e      	ldr	r3, [pc, #248]	@ (8004350 <HAL_RCC_OscConfig+0x470>)
 8004258:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800425a:	f003 0302 	and.w	r3, r3, #2
 800425e:	2b00      	cmp	r3, #0
 8004260:	d1ee      	bne.n	8004240 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004262:	7dfb      	ldrb	r3, [r7, #23]
 8004264:	2b01      	cmp	r3, #1
 8004266:	d105      	bne.n	8004274 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004268:	4b39      	ldr	r3, [pc, #228]	@ (8004350 <HAL_RCC_OscConfig+0x470>)
 800426a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800426c:	4a38      	ldr	r2, [pc, #224]	@ (8004350 <HAL_RCC_OscConfig+0x470>)
 800426e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004272:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	699b      	ldr	r3, [r3, #24]
 8004278:	2b00      	cmp	r3, #0
 800427a:	f000 80a1 	beq.w	80043c0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800427e:	4b34      	ldr	r3, [pc, #208]	@ (8004350 <HAL_RCC_OscConfig+0x470>)
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	f003 030c 	and.w	r3, r3, #12
 8004286:	2b08      	cmp	r3, #8
 8004288:	d05c      	beq.n	8004344 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	699b      	ldr	r3, [r3, #24]
 800428e:	2b02      	cmp	r3, #2
 8004290:	d141      	bne.n	8004316 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004292:	4b31      	ldr	r3, [pc, #196]	@ (8004358 <HAL_RCC_OscConfig+0x478>)
 8004294:	2200      	movs	r2, #0
 8004296:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004298:	f7fd ff1a 	bl	80020d0 <HAL_GetTick>
 800429c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800429e:	e008      	b.n	80042b2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042a0:	f7fd ff16 	bl	80020d0 <HAL_GetTick>
 80042a4:	4602      	mov	r2, r0
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	1ad3      	subs	r3, r2, r3
 80042aa:	2b02      	cmp	r3, #2
 80042ac:	d901      	bls.n	80042b2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80042ae:	2303      	movs	r3, #3
 80042b0:	e087      	b.n	80043c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042b2:	4b27      	ldr	r3, [pc, #156]	@ (8004350 <HAL_RCC_OscConfig+0x470>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d1f0      	bne.n	80042a0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	69da      	ldr	r2, [r3, #28]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6a1b      	ldr	r3, [r3, #32]
 80042c6:	431a      	orrs	r2, r3
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042cc:	019b      	lsls	r3, r3, #6
 80042ce:	431a      	orrs	r2, r3
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042d4:	085b      	lsrs	r3, r3, #1
 80042d6:	3b01      	subs	r3, #1
 80042d8:	041b      	lsls	r3, r3, #16
 80042da:	431a      	orrs	r2, r3
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042e0:	061b      	lsls	r3, r3, #24
 80042e2:	491b      	ldr	r1, [pc, #108]	@ (8004350 <HAL_RCC_OscConfig+0x470>)
 80042e4:	4313      	orrs	r3, r2
 80042e6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042e8:	4b1b      	ldr	r3, [pc, #108]	@ (8004358 <HAL_RCC_OscConfig+0x478>)
 80042ea:	2201      	movs	r2, #1
 80042ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042ee:	f7fd feef 	bl	80020d0 <HAL_GetTick>
 80042f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042f4:	e008      	b.n	8004308 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042f6:	f7fd feeb 	bl	80020d0 <HAL_GetTick>
 80042fa:	4602      	mov	r2, r0
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	1ad3      	subs	r3, r2, r3
 8004300:	2b02      	cmp	r3, #2
 8004302:	d901      	bls.n	8004308 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004304:	2303      	movs	r3, #3
 8004306:	e05c      	b.n	80043c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004308:	4b11      	ldr	r3, [pc, #68]	@ (8004350 <HAL_RCC_OscConfig+0x470>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004310:	2b00      	cmp	r3, #0
 8004312:	d0f0      	beq.n	80042f6 <HAL_RCC_OscConfig+0x416>
 8004314:	e054      	b.n	80043c0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004316:	4b10      	ldr	r3, [pc, #64]	@ (8004358 <HAL_RCC_OscConfig+0x478>)
 8004318:	2200      	movs	r2, #0
 800431a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800431c:	f7fd fed8 	bl	80020d0 <HAL_GetTick>
 8004320:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004322:	e008      	b.n	8004336 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004324:	f7fd fed4 	bl	80020d0 <HAL_GetTick>
 8004328:	4602      	mov	r2, r0
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	1ad3      	subs	r3, r2, r3
 800432e:	2b02      	cmp	r3, #2
 8004330:	d901      	bls.n	8004336 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004332:	2303      	movs	r3, #3
 8004334:	e045      	b.n	80043c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004336:	4b06      	ldr	r3, [pc, #24]	@ (8004350 <HAL_RCC_OscConfig+0x470>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800433e:	2b00      	cmp	r3, #0
 8004340:	d1f0      	bne.n	8004324 <HAL_RCC_OscConfig+0x444>
 8004342:	e03d      	b.n	80043c0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	699b      	ldr	r3, [r3, #24]
 8004348:	2b01      	cmp	r3, #1
 800434a:	d107      	bne.n	800435c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	e038      	b.n	80043c2 <HAL_RCC_OscConfig+0x4e2>
 8004350:	40023800 	.word	0x40023800
 8004354:	40007000 	.word	0x40007000
 8004358:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800435c:	4b1b      	ldr	r3, [pc, #108]	@ (80043cc <HAL_RCC_OscConfig+0x4ec>)
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	699b      	ldr	r3, [r3, #24]
 8004366:	2b01      	cmp	r3, #1
 8004368:	d028      	beq.n	80043bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004374:	429a      	cmp	r2, r3
 8004376:	d121      	bne.n	80043bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004382:	429a      	cmp	r2, r3
 8004384:	d11a      	bne.n	80043bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004386:	68fa      	ldr	r2, [r7, #12]
 8004388:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800438c:	4013      	ands	r3, r2
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004392:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004394:	4293      	cmp	r3, r2
 8004396:	d111      	bne.n	80043bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043a2:	085b      	lsrs	r3, r3, #1
 80043a4:	3b01      	subs	r3, #1
 80043a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d107      	bne.n	80043bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d001      	beq.n	80043c0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	e000      	b.n	80043c2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80043c0:	2300      	movs	r3, #0
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3718      	adds	r7, #24
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}
 80043ca:	bf00      	nop
 80043cc:	40023800 	.word	0x40023800

080043d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b084      	sub	sp, #16
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
 80043d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d101      	bne.n	80043e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	e0cc      	b.n	800457e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80043e4:	4b68      	ldr	r3, [pc, #416]	@ (8004588 <HAL_RCC_ClockConfig+0x1b8>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f003 0307 	and.w	r3, r3, #7
 80043ec:	683a      	ldr	r2, [r7, #0]
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d90c      	bls.n	800440c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043f2:	4b65      	ldr	r3, [pc, #404]	@ (8004588 <HAL_RCC_ClockConfig+0x1b8>)
 80043f4:	683a      	ldr	r2, [r7, #0]
 80043f6:	b2d2      	uxtb	r2, r2
 80043f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043fa:	4b63      	ldr	r3, [pc, #396]	@ (8004588 <HAL_RCC_ClockConfig+0x1b8>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f003 0307 	and.w	r3, r3, #7
 8004402:	683a      	ldr	r2, [r7, #0]
 8004404:	429a      	cmp	r2, r3
 8004406:	d001      	beq.n	800440c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	e0b8      	b.n	800457e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 0302 	and.w	r3, r3, #2
 8004414:	2b00      	cmp	r3, #0
 8004416:	d020      	beq.n	800445a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0304 	and.w	r3, r3, #4
 8004420:	2b00      	cmp	r3, #0
 8004422:	d005      	beq.n	8004430 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004424:	4b59      	ldr	r3, [pc, #356]	@ (800458c <HAL_RCC_ClockConfig+0x1bc>)
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	4a58      	ldr	r2, [pc, #352]	@ (800458c <HAL_RCC_ClockConfig+0x1bc>)
 800442a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800442e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 0308 	and.w	r3, r3, #8
 8004438:	2b00      	cmp	r3, #0
 800443a:	d005      	beq.n	8004448 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800443c:	4b53      	ldr	r3, [pc, #332]	@ (800458c <HAL_RCC_ClockConfig+0x1bc>)
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	4a52      	ldr	r2, [pc, #328]	@ (800458c <HAL_RCC_ClockConfig+0x1bc>)
 8004442:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004446:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004448:	4b50      	ldr	r3, [pc, #320]	@ (800458c <HAL_RCC_ClockConfig+0x1bc>)
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	494d      	ldr	r1, [pc, #308]	@ (800458c <HAL_RCC_ClockConfig+0x1bc>)
 8004456:	4313      	orrs	r3, r2
 8004458:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 0301 	and.w	r3, r3, #1
 8004462:	2b00      	cmp	r3, #0
 8004464:	d044      	beq.n	80044f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	2b01      	cmp	r3, #1
 800446c:	d107      	bne.n	800447e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800446e:	4b47      	ldr	r3, [pc, #284]	@ (800458c <HAL_RCC_ClockConfig+0x1bc>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004476:	2b00      	cmp	r3, #0
 8004478:	d119      	bne.n	80044ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e07f      	b.n	800457e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	2b02      	cmp	r3, #2
 8004484:	d003      	beq.n	800448e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800448a:	2b03      	cmp	r3, #3
 800448c:	d107      	bne.n	800449e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800448e:	4b3f      	ldr	r3, [pc, #252]	@ (800458c <HAL_RCC_ClockConfig+0x1bc>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004496:	2b00      	cmp	r3, #0
 8004498:	d109      	bne.n	80044ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e06f      	b.n	800457e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800449e:	4b3b      	ldr	r3, [pc, #236]	@ (800458c <HAL_RCC_ClockConfig+0x1bc>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 0302 	and.w	r3, r3, #2
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d101      	bne.n	80044ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e067      	b.n	800457e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044ae:	4b37      	ldr	r3, [pc, #220]	@ (800458c <HAL_RCC_ClockConfig+0x1bc>)
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	f023 0203 	bic.w	r2, r3, #3
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	4934      	ldr	r1, [pc, #208]	@ (800458c <HAL_RCC_ClockConfig+0x1bc>)
 80044bc:	4313      	orrs	r3, r2
 80044be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80044c0:	f7fd fe06 	bl	80020d0 <HAL_GetTick>
 80044c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044c6:	e00a      	b.n	80044de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044c8:	f7fd fe02 	bl	80020d0 <HAL_GetTick>
 80044cc:	4602      	mov	r2, r0
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	1ad3      	subs	r3, r2, r3
 80044d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d901      	bls.n	80044de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80044da:	2303      	movs	r3, #3
 80044dc:	e04f      	b.n	800457e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044de:	4b2b      	ldr	r3, [pc, #172]	@ (800458c <HAL_RCC_ClockConfig+0x1bc>)
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	f003 020c 	and.w	r2, r3, #12
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	009b      	lsls	r3, r3, #2
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d1eb      	bne.n	80044c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80044f0:	4b25      	ldr	r3, [pc, #148]	@ (8004588 <HAL_RCC_ClockConfig+0x1b8>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 0307 	and.w	r3, r3, #7
 80044f8:	683a      	ldr	r2, [r7, #0]
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d20c      	bcs.n	8004518 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044fe:	4b22      	ldr	r3, [pc, #136]	@ (8004588 <HAL_RCC_ClockConfig+0x1b8>)
 8004500:	683a      	ldr	r2, [r7, #0]
 8004502:	b2d2      	uxtb	r2, r2
 8004504:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004506:	4b20      	ldr	r3, [pc, #128]	@ (8004588 <HAL_RCC_ClockConfig+0x1b8>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 0307 	and.w	r3, r3, #7
 800450e:	683a      	ldr	r2, [r7, #0]
 8004510:	429a      	cmp	r2, r3
 8004512:	d001      	beq.n	8004518 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	e032      	b.n	800457e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 0304 	and.w	r3, r3, #4
 8004520:	2b00      	cmp	r3, #0
 8004522:	d008      	beq.n	8004536 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004524:	4b19      	ldr	r3, [pc, #100]	@ (800458c <HAL_RCC_ClockConfig+0x1bc>)
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	68db      	ldr	r3, [r3, #12]
 8004530:	4916      	ldr	r1, [pc, #88]	@ (800458c <HAL_RCC_ClockConfig+0x1bc>)
 8004532:	4313      	orrs	r3, r2
 8004534:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 0308 	and.w	r3, r3, #8
 800453e:	2b00      	cmp	r3, #0
 8004540:	d009      	beq.n	8004556 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004542:	4b12      	ldr	r3, [pc, #72]	@ (800458c <HAL_RCC_ClockConfig+0x1bc>)
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	691b      	ldr	r3, [r3, #16]
 800454e:	00db      	lsls	r3, r3, #3
 8004550:	490e      	ldr	r1, [pc, #56]	@ (800458c <HAL_RCC_ClockConfig+0x1bc>)
 8004552:	4313      	orrs	r3, r2
 8004554:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004556:	f000 f821 	bl	800459c <HAL_RCC_GetSysClockFreq>
 800455a:	4602      	mov	r2, r0
 800455c:	4b0b      	ldr	r3, [pc, #44]	@ (800458c <HAL_RCC_ClockConfig+0x1bc>)
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	091b      	lsrs	r3, r3, #4
 8004562:	f003 030f 	and.w	r3, r3, #15
 8004566:	490a      	ldr	r1, [pc, #40]	@ (8004590 <HAL_RCC_ClockConfig+0x1c0>)
 8004568:	5ccb      	ldrb	r3, [r1, r3]
 800456a:	fa22 f303 	lsr.w	r3, r2, r3
 800456e:	4a09      	ldr	r2, [pc, #36]	@ (8004594 <HAL_RCC_ClockConfig+0x1c4>)
 8004570:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004572:	4b09      	ldr	r3, [pc, #36]	@ (8004598 <HAL_RCC_ClockConfig+0x1c8>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4618      	mov	r0, r3
 8004578:	f7fd fd66 	bl	8002048 <HAL_InitTick>

  return HAL_OK;
 800457c:	2300      	movs	r3, #0
}
 800457e:	4618      	mov	r0, r3
 8004580:	3710      	adds	r7, #16
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}
 8004586:	bf00      	nop
 8004588:	40023c00 	.word	0x40023c00
 800458c:	40023800 	.word	0x40023800
 8004590:	080069f0 	.word	0x080069f0
 8004594:	20000004 	.word	0x20000004
 8004598:	20000010 	.word	0x20000010

0800459c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800459c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045a0:	b090      	sub	sp, #64	@ 0x40
 80045a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80045a4:	2300      	movs	r3, #0
 80045a6:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80045a8:	2300      	movs	r3, #0
 80045aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80045ac:	2300      	movs	r3, #0
 80045ae:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80045b0:	2300      	movs	r3, #0
 80045b2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80045b4:	4b59      	ldr	r3, [pc, #356]	@ (800471c <HAL_RCC_GetSysClockFreq+0x180>)
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	f003 030c 	and.w	r3, r3, #12
 80045bc:	2b08      	cmp	r3, #8
 80045be:	d00d      	beq.n	80045dc <HAL_RCC_GetSysClockFreq+0x40>
 80045c0:	2b08      	cmp	r3, #8
 80045c2:	f200 80a1 	bhi.w	8004708 <HAL_RCC_GetSysClockFreq+0x16c>
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d002      	beq.n	80045d0 <HAL_RCC_GetSysClockFreq+0x34>
 80045ca:	2b04      	cmp	r3, #4
 80045cc:	d003      	beq.n	80045d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80045ce:	e09b      	b.n	8004708 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80045d0:	4b53      	ldr	r3, [pc, #332]	@ (8004720 <HAL_RCC_GetSysClockFreq+0x184>)
 80045d2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80045d4:	e09b      	b.n	800470e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80045d6:	4b53      	ldr	r3, [pc, #332]	@ (8004724 <HAL_RCC_GetSysClockFreq+0x188>)
 80045d8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80045da:	e098      	b.n	800470e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80045dc:	4b4f      	ldr	r3, [pc, #316]	@ (800471c <HAL_RCC_GetSysClockFreq+0x180>)
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80045e4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80045e6:	4b4d      	ldr	r3, [pc, #308]	@ (800471c <HAL_RCC_GetSysClockFreq+0x180>)
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d028      	beq.n	8004644 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045f2:	4b4a      	ldr	r3, [pc, #296]	@ (800471c <HAL_RCC_GetSysClockFreq+0x180>)
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	099b      	lsrs	r3, r3, #6
 80045f8:	2200      	movs	r2, #0
 80045fa:	623b      	str	r3, [r7, #32]
 80045fc:	627a      	str	r2, [r7, #36]	@ 0x24
 80045fe:	6a3b      	ldr	r3, [r7, #32]
 8004600:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004604:	2100      	movs	r1, #0
 8004606:	4b47      	ldr	r3, [pc, #284]	@ (8004724 <HAL_RCC_GetSysClockFreq+0x188>)
 8004608:	fb03 f201 	mul.w	r2, r3, r1
 800460c:	2300      	movs	r3, #0
 800460e:	fb00 f303 	mul.w	r3, r0, r3
 8004612:	4413      	add	r3, r2
 8004614:	4a43      	ldr	r2, [pc, #268]	@ (8004724 <HAL_RCC_GetSysClockFreq+0x188>)
 8004616:	fba0 1202 	umull	r1, r2, r0, r2
 800461a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800461c:	460a      	mov	r2, r1
 800461e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004620:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004622:	4413      	add	r3, r2
 8004624:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004626:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004628:	2200      	movs	r2, #0
 800462a:	61bb      	str	r3, [r7, #24]
 800462c:	61fa      	str	r2, [r7, #28]
 800462e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004632:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004636:	f7fb fe1b 	bl	8000270 <__aeabi_uldivmod>
 800463a:	4602      	mov	r2, r0
 800463c:	460b      	mov	r3, r1
 800463e:	4613      	mov	r3, r2
 8004640:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004642:	e053      	b.n	80046ec <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004644:	4b35      	ldr	r3, [pc, #212]	@ (800471c <HAL_RCC_GetSysClockFreq+0x180>)
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	099b      	lsrs	r3, r3, #6
 800464a:	2200      	movs	r2, #0
 800464c:	613b      	str	r3, [r7, #16]
 800464e:	617a      	str	r2, [r7, #20]
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004656:	f04f 0b00 	mov.w	fp, #0
 800465a:	4652      	mov	r2, sl
 800465c:	465b      	mov	r3, fp
 800465e:	f04f 0000 	mov.w	r0, #0
 8004662:	f04f 0100 	mov.w	r1, #0
 8004666:	0159      	lsls	r1, r3, #5
 8004668:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800466c:	0150      	lsls	r0, r2, #5
 800466e:	4602      	mov	r2, r0
 8004670:	460b      	mov	r3, r1
 8004672:	ebb2 080a 	subs.w	r8, r2, sl
 8004676:	eb63 090b 	sbc.w	r9, r3, fp
 800467a:	f04f 0200 	mov.w	r2, #0
 800467e:	f04f 0300 	mov.w	r3, #0
 8004682:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004686:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800468a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800468e:	ebb2 0408 	subs.w	r4, r2, r8
 8004692:	eb63 0509 	sbc.w	r5, r3, r9
 8004696:	f04f 0200 	mov.w	r2, #0
 800469a:	f04f 0300 	mov.w	r3, #0
 800469e:	00eb      	lsls	r3, r5, #3
 80046a0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80046a4:	00e2      	lsls	r2, r4, #3
 80046a6:	4614      	mov	r4, r2
 80046a8:	461d      	mov	r5, r3
 80046aa:	eb14 030a 	adds.w	r3, r4, sl
 80046ae:	603b      	str	r3, [r7, #0]
 80046b0:	eb45 030b 	adc.w	r3, r5, fp
 80046b4:	607b      	str	r3, [r7, #4]
 80046b6:	f04f 0200 	mov.w	r2, #0
 80046ba:	f04f 0300 	mov.w	r3, #0
 80046be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80046c2:	4629      	mov	r1, r5
 80046c4:	028b      	lsls	r3, r1, #10
 80046c6:	4621      	mov	r1, r4
 80046c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80046cc:	4621      	mov	r1, r4
 80046ce:	028a      	lsls	r2, r1, #10
 80046d0:	4610      	mov	r0, r2
 80046d2:	4619      	mov	r1, r3
 80046d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046d6:	2200      	movs	r2, #0
 80046d8:	60bb      	str	r3, [r7, #8]
 80046da:	60fa      	str	r2, [r7, #12]
 80046dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80046e0:	f7fb fdc6 	bl	8000270 <__aeabi_uldivmod>
 80046e4:	4602      	mov	r2, r0
 80046e6:	460b      	mov	r3, r1
 80046e8:	4613      	mov	r3, r2
 80046ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80046ec:	4b0b      	ldr	r3, [pc, #44]	@ (800471c <HAL_RCC_GetSysClockFreq+0x180>)
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	0c1b      	lsrs	r3, r3, #16
 80046f2:	f003 0303 	and.w	r3, r3, #3
 80046f6:	3301      	adds	r3, #1
 80046f8:	005b      	lsls	r3, r3, #1
 80046fa:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80046fc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80046fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004700:	fbb2 f3f3 	udiv	r3, r2, r3
 8004704:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004706:	e002      	b.n	800470e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004708:	4b05      	ldr	r3, [pc, #20]	@ (8004720 <HAL_RCC_GetSysClockFreq+0x184>)
 800470a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800470c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800470e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004710:	4618      	mov	r0, r3
 8004712:	3740      	adds	r7, #64	@ 0x40
 8004714:	46bd      	mov	sp, r7
 8004716:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800471a:	bf00      	nop
 800471c:	40023800 	.word	0x40023800
 8004720:	00f42400 	.word	0x00f42400
 8004724:	017d7840 	.word	0x017d7840

08004728 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004728:	b480      	push	{r7}
 800472a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800472c:	4b03      	ldr	r3, [pc, #12]	@ (800473c <HAL_RCC_GetHCLKFreq+0x14>)
 800472e:	681b      	ldr	r3, [r3, #0]
}
 8004730:	4618      	mov	r0, r3
 8004732:	46bd      	mov	sp, r7
 8004734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004738:	4770      	bx	lr
 800473a:	bf00      	nop
 800473c:	20000004 	.word	0x20000004

08004740 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004744:	f7ff fff0 	bl	8004728 <HAL_RCC_GetHCLKFreq>
 8004748:	4602      	mov	r2, r0
 800474a:	4b05      	ldr	r3, [pc, #20]	@ (8004760 <HAL_RCC_GetPCLK1Freq+0x20>)
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	0a9b      	lsrs	r3, r3, #10
 8004750:	f003 0307 	and.w	r3, r3, #7
 8004754:	4903      	ldr	r1, [pc, #12]	@ (8004764 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004756:	5ccb      	ldrb	r3, [r1, r3]
 8004758:	fa22 f303 	lsr.w	r3, r2, r3
}
 800475c:	4618      	mov	r0, r3
 800475e:	bd80      	pop	{r7, pc}
 8004760:	40023800 	.word	0x40023800
 8004764:	08006a00 	.word	0x08006a00

08004768 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800476c:	f7ff ffdc 	bl	8004728 <HAL_RCC_GetHCLKFreq>
 8004770:	4602      	mov	r2, r0
 8004772:	4b05      	ldr	r3, [pc, #20]	@ (8004788 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	0b5b      	lsrs	r3, r3, #13
 8004778:	f003 0307 	and.w	r3, r3, #7
 800477c:	4903      	ldr	r1, [pc, #12]	@ (800478c <HAL_RCC_GetPCLK2Freq+0x24>)
 800477e:	5ccb      	ldrb	r3, [r1, r3]
 8004780:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004784:	4618      	mov	r0, r3
 8004786:	bd80      	pop	{r7, pc}
 8004788:	40023800 	.word	0x40023800
 800478c:	08006a00 	.word	0x08006a00

08004790 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b082      	sub	sp, #8
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d101      	bne.n	80047a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	e07b      	b.n	800489a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d108      	bne.n	80047bc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80047b2:	d009      	beq.n	80047c8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2200      	movs	r2, #0
 80047b8:	61da      	str	r2, [r3, #28]
 80047ba:	e005      	b.n	80047c8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2200      	movs	r2, #0
 80047c0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2200      	movs	r2, #0
 80047c6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2200      	movs	r2, #0
 80047cc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d106      	bne.n	80047e8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2200      	movs	r2, #0
 80047de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f7fc fc7e 	bl	80010e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2202      	movs	r2, #2
 80047ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80047fe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004810:	431a      	orrs	r2, r3
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	68db      	ldr	r3, [r3, #12]
 8004816:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800481a:	431a      	orrs	r2, r3
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	691b      	ldr	r3, [r3, #16]
 8004820:	f003 0302 	and.w	r3, r3, #2
 8004824:	431a      	orrs	r2, r3
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	695b      	ldr	r3, [r3, #20]
 800482a:	f003 0301 	and.w	r3, r3, #1
 800482e:	431a      	orrs	r2, r3
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	699b      	ldr	r3, [r3, #24]
 8004834:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004838:	431a      	orrs	r2, r3
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	69db      	ldr	r3, [r3, #28]
 800483e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004842:	431a      	orrs	r2, r3
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6a1b      	ldr	r3, [r3, #32]
 8004848:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800484c:	ea42 0103 	orr.w	r1, r2, r3
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004854:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	430a      	orrs	r2, r1
 800485e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	699b      	ldr	r3, [r3, #24]
 8004864:	0c1b      	lsrs	r3, r3, #16
 8004866:	f003 0104 	and.w	r1, r3, #4
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800486e:	f003 0210 	and.w	r2, r3, #16
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	430a      	orrs	r2, r1
 8004878:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	69da      	ldr	r2, [r3, #28]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004888:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2200      	movs	r2, #0
 800488e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2201      	movs	r2, #1
 8004894:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004898:	2300      	movs	r3, #0
}
 800489a:	4618      	mov	r0, r3
 800489c:	3708      	adds	r7, #8
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}

080048a2 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048a2:	b580      	push	{r7, lr}
 80048a4:	b088      	sub	sp, #32
 80048a6:	af00      	add	r7, sp, #0
 80048a8:	60f8      	str	r0, [r7, #12]
 80048aa:	60b9      	str	r1, [r7, #8]
 80048ac:	603b      	str	r3, [r7, #0]
 80048ae:	4613      	mov	r3, r2
 80048b0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80048b2:	f7fd fc0d 	bl	80020d0 <HAL_GetTick>
 80048b6:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80048b8:	88fb      	ldrh	r3, [r7, #6]
 80048ba:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d001      	beq.n	80048cc <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80048c8:	2302      	movs	r3, #2
 80048ca:	e12a      	b.n	8004b22 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d002      	beq.n	80048d8 <HAL_SPI_Transmit+0x36>
 80048d2:	88fb      	ldrh	r3, [r7, #6]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d101      	bne.n	80048dc <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	e122      	b.n	8004b22 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80048e2:	2b01      	cmp	r3, #1
 80048e4:	d101      	bne.n	80048ea <HAL_SPI_Transmit+0x48>
 80048e6:	2302      	movs	r3, #2
 80048e8:	e11b      	b.n	8004b22 <HAL_SPI_Transmit+0x280>
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2201      	movs	r2, #1
 80048ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2203      	movs	r2, #3
 80048f6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2200      	movs	r2, #0
 80048fe:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	68ba      	ldr	r2, [r7, #8]
 8004904:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	88fa      	ldrh	r2, [r7, #6]
 800490a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	88fa      	ldrh	r2, [r7, #6]
 8004910:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2200      	movs	r2, #0
 8004916:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2200      	movs	r2, #0
 800491c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2200      	movs	r2, #0
 8004922:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2200      	movs	r2, #0
 8004928:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2200      	movs	r2, #0
 800492e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004938:	d10f      	bne.n	800495a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004948:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004958:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004964:	2b40      	cmp	r3, #64	@ 0x40
 8004966:	d007      	beq.n	8004978 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004976:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	68db      	ldr	r3, [r3, #12]
 800497c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004980:	d152      	bne.n	8004a28 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d002      	beq.n	8004990 <HAL_SPI_Transmit+0xee>
 800498a:	8b7b      	ldrh	r3, [r7, #26]
 800498c:	2b01      	cmp	r3, #1
 800498e:	d145      	bne.n	8004a1c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004994:	881a      	ldrh	r2, [r3, #0]
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049a0:	1c9a      	adds	r2, r3, #2
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80049aa:	b29b      	uxth	r3, r3
 80049ac:	3b01      	subs	r3, #1
 80049ae:	b29a      	uxth	r2, r3
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80049b4:	e032      	b.n	8004a1c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	f003 0302 	and.w	r3, r3, #2
 80049c0:	2b02      	cmp	r3, #2
 80049c2:	d112      	bne.n	80049ea <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049c8:	881a      	ldrh	r2, [r3, #0]
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049d4:	1c9a      	adds	r2, r3, #2
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80049de:	b29b      	uxth	r3, r3
 80049e0:	3b01      	subs	r3, #1
 80049e2:	b29a      	uxth	r2, r3
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	86da      	strh	r2, [r3, #54]	@ 0x36
 80049e8:	e018      	b.n	8004a1c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80049ea:	f7fd fb71 	bl	80020d0 <HAL_GetTick>
 80049ee:	4602      	mov	r2, r0
 80049f0:	69fb      	ldr	r3, [r7, #28]
 80049f2:	1ad3      	subs	r3, r2, r3
 80049f4:	683a      	ldr	r2, [r7, #0]
 80049f6:	429a      	cmp	r2, r3
 80049f8:	d803      	bhi.n	8004a02 <HAL_SPI_Transmit+0x160>
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a00:	d102      	bne.n	8004a08 <HAL_SPI_Transmit+0x166>
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d109      	bne.n	8004a1c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2200      	movs	r2, #0
 8004a14:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004a18:	2303      	movs	r3, #3
 8004a1a:	e082      	b.n	8004b22 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a20:	b29b      	uxth	r3, r3
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d1c7      	bne.n	80049b6 <HAL_SPI_Transmit+0x114>
 8004a26:	e053      	b.n	8004ad0 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d002      	beq.n	8004a36 <HAL_SPI_Transmit+0x194>
 8004a30:	8b7b      	ldrh	r3, [r7, #26]
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	d147      	bne.n	8004ac6 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	330c      	adds	r3, #12
 8004a40:	7812      	ldrb	r2, [r2, #0]
 8004a42:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a48:	1c5a      	adds	r2, r3, #1
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a52:	b29b      	uxth	r3, r3
 8004a54:	3b01      	subs	r3, #1
 8004a56:	b29a      	uxth	r2, r3
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004a5c:	e033      	b.n	8004ac6 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	f003 0302 	and.w	r3, r3, #2
 8004a68:	2b02      	cmp	r3, #2
 8004a6a:	d113      	bne.n	8004a94 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	330c      	adds	r3, #12
 8004a76:	7812      	ldrb	r2, [r2, #0]
 8004a78:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a7e:	1c5a      	adds	r2, r3, #1
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a88:	b29b      	uxth	r3, r3
 8004a8a:	3b01      	subs	r3, #1
 8004a8c:	b29a      	uxth	r2, r3
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004a92:	e018      	b.n	8004ac6 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a94:	f7fd fb1c 	bl	80020d0 <HAL_GetTick>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	69fb      	ldr	r3, [r7, #28]
 8004a9c:	1ad3      	subs	r3, r2, r3
 8004a9e:	683a      	ldr	r2, [r7, #0]
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d803      	bhi.n	8004aac <HAL_SPI_Transmit+0x20a>
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aaa:	d102      	bne.n	8004ab2 <HAL_SPI_Transmit+0x210>
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d109      	bne.n	8004ac6 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2200      	movs	r2, #0
 8004abe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004ac2:	2303      	movs	r3, #3
 8004ac4:	e02d      	b.n	8004b22 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004aca:	b29b      	uxth	r3, r3
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d1c6      	bne.n	8004a5e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ad0:	69fa      	ldr	r2, [r7, #28]
 8004ad2:	6839      	ldr	r1, [r7, #0]
 8004ad4:	68f8      	ldr	r0, [r7, #12]
 8004ad6:	f000 f8b1 	bl	8004c3c <SPI_EndRxTxTransaction>
 8004ada:	4603      	mov	r3, r0
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d002      	beq.n	8004ae6 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2220      	movs	r2, #32
 8004ae4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d10a      	bne.n	8004b04 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004aee:	2300      	movs	r3, #0
 8004af0:	617b      	str	r3, [r7, #20]
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	68db      	ldr	r3, [r3, #12]
 8004af8:	617b      	str	r3, [r7, #20]
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	617b      	str	r3, [r7, #20]
 8004b02:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2201      	movs	r2, #1
 8004b08:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d001      	beq.n	8004b20 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e000      	b.n	8004b22 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004b20:	2300      	movs	r3, #0
  }
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3720      	adds	r7, #32
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}
	...

08004b2c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b088      	sub	sp, #32
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	60f8      	str	r0, [r7, #12]
 8004b34:	60b9      	str	r1, [r7, #8]
 8004b36:	603b      	str	r3, [r7, #0]
 8004b38:	4613      	mov	r3, r2
 8004b3a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004b3c:	f7fd fac8 	bl	80020d0 <HAL_GetTick>
 8004b40:	4602      	mov	r2, r0
 8004b42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b44:	1a9b      	subs	r3, r3, r2
 8004b46:	683a      	ldr	r2, [r7, #0]
 8004b48:	4413      	add	r3, r2
 8004b4a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004b4c:	f7fd fac0 	bl	80020d0 <HAL_GetTick>
 8004b50:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004b52:	4b39      	ldr	r3, [pc, #228]	@ (8004c38 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	015b      	lsls	r3, r3, #5
 8004b58:	0d1b      	lsrs	r3, r3, #20
 8004b5a:	69fa      	ldr	r2, [r7, #28]
 8004b5c:	fb02 f303 	mul.w	r3, r2, r3
 8004b60:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b62:	e055      	b.n	8004c10 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b6a:	d051      	beq.n	8004c10 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004b6c:	f7fd fab0 	bl	80020d0 <HAL_GetTick>
 8004b70:	4602      	mov	r2, r0
 8004b72:	69bb      	ldr	r3, [r7, #24]
 8004b74:	1ad3      	subs	r3, r2, r3
 8004b76:	69fa      	ldr	r2, [r7, #28]
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d902      	bls.n	8004b82 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004b7c:	69fb      	ldr	r3, [r7, #28]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d13d      	bne.n	8004bfe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	685a      	ldr	r2, [r3, #4]
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004b90:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004b9a:	d111      	bne.n	8004bc0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ba4:	d004      	beq.n	8004bb0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004bae:	d107      	bne.n	8004bc0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004bbe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bc4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004bc8:	d10f      	bne.n	8004bea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	681a      	ldr	r2, [r3, #0]
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004bd8:	601a      	str	r2, [r3, #0]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004be8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2201      	movs	r2, #1
 8004bee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004bfa:	2303      	movs	r3, #3
 8004bfc:	e018      	b.n	8004c30 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d102      	bne.n	8004c0a <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8004c04:	2300      	movs	r3, #0
 8004c06:	61fb      	str	r3, [r7, #28]
 8004c08:	e002      	b.n	8004c10 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	3b01      	subs	r3, #1
 8004c0e:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	689a      	ldr	r2, [r3, #8]
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	4013      	ands	r3, r2
 8004c1a:	68ba      	ldr	r2, [r7, #8]
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	bf0c      	ite	eq
 8004c20:	2301      	moveq	r3, #1
 8004c22:	2300      	movne	r3, #0
 8004c24:	b2db      	uxtb	r3, r3
 8004c26:	461a      	mov	r2, r3
 8004c28:	79fb      	ldrb	r3, [r7, #7]
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	d19a      	bne.n	8004b64 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8004c2e:	2300      	movs	r3, #0
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	3720      	adds	r7, #32
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}
 8004c38:	20000004 	.word	0x20000004

08004c3c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b088      	sub	sp, #32
 8004c40:	af02      	add	r7, sp, #8
 8004c42:	60f8      	str	r0, [r7, #12]
 8004c44:	60b9      	str	r1, [r7, #8]
 8004c46:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	9300      	str	r3, [sp, #0]
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	2102      	movs	r1, #2
 8004c52:	68f8      	ldr	r0, [r7, #12]
 8004c54:	f7ff ff6a 	bl	8004b2c <SPI_WaitFlagStateUntilTimeout>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d007      	beq.n	8004c6e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c62:	f043 0220 	orr.w	r2, r3, #32
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004c6a:	2303      	movs	r3, #3
 8004c6c:	e032      	b.n	8004cd4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004c6e:	4b1b      	ldr	r3, [pc, #108]	@ (8004cdc <SPI_EndRxTxTransaction+0xa0>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a1b      	ldr	r2, [pc, #108]	@ (8004ce0 <SPI_EndRxTxTransaction+0xa4>)
 8004c74:	fba2 2303 	umull	r2, r3, r2, r3
 8004c78:	0d5b      	lsrs	r3, r3, #21
 8004c7a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004c7e:	fb02 f303 	mul.w	r3, r2, r3
 8004c82:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004c8c:	d112      	bne.n	8004cb4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	9300      	str	r3, [sp, #0]
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	2200      	movs	r2, #0
 8004c96:	2180      	movs	r1, #128	@ 0x80
 8004c98:	68f8      	ldr	r0, [r7, #12]
 8004c9a:	f7ff ff47 	bl	8004b2c <SPI_WaitFlagStateUntilTimeout>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d016      	beq.n	8004cd2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ca8:	f043 0220 	orr.w	r2, r3, #32
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004cb0:	2303      	movs	r3, #3
 8004cb2:	e00f      	b.n	8004cd4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d00a      	beq.n	8004cd0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	3b01      	subs	r3, #1
 8004cbe:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cca:	2b80      	cmp	r3, #128	@ 0x80
 8004ccc:	d0f2      	beq.n	8004cb4 <SPI_EndRxTxTransaction+0x78>
 8004cce:	e000      	b.n	8004cd2 <SPI_EndRxTxTransaction+0x96>
        break;
 8004cd0:	bf00      	nop
  }

  return HAL_OK;
 8004cd2:	2300      	movs	r3, #0
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3718      	adds	r7, #24
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}
 8004cdc:	20000004 	.word	0x20000004
 8004ce0:	165e9f81 	.word	0x165e9f81

08004ce4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b082      	sub	sp, #8
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d101      	bne.n	8004cf6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e042      	b.n	8004d7c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004cfc:	b2db      	uxtb	r3, r3
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d106      	bne.n	8004d10 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2200      	movs	r2, #0
 8004d06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f7fc fa52 	bl	80011b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2224      	movs	r2, #36	@ 0x24
 8004d14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	68da      	ldr	r2, [r3, #12]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004d26:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004d28:	6878      	ldr	r0, [r7, #4]
 8004d2a:	f000 f82b 	bl	8004d84 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	691a      	ldr	r2, [r3, #16]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004d3c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	695a      	ldr	r2, [r3, #20]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004d4c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	68da      	ldr	r2, [r3, #12]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004d5c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2200      	movs	r2, #0
 8004d62:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2220      	movs	r2, #32
 8004d68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2220      	movs	r2, #32
 8004d70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2200      	movs	r2, #0
 8004d78:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004d7a:	2300      	movs	r3, #0
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3708      	adds	r7, #8
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}

08004d84 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d88:	b0c0      	sub	sp, #256	@ 0x100
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	691b      	ldr	r3, [r3, #16]
 8004d98:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004da0:	68d9      	ldr	r1, [r3, #12]
 8004da2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	ea40 0301 	orr.w	r3, r0, r1
 8004dac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004dae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004db2:	689a      	ldr	r2, [r3, #8]
 8004db4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004db8:	691b      	ldr	r3, [r3, #16]
 8004dba:	431a      	orrs	r2, r3
 8004dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dc0:	695b      	ldr	r3, [r3, #20]
 8004dc2:	431a      	orrs	r2, r3
 8004dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dc8:	69db      	ldr	r3, [r3, #28]
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004dd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	68db      	ldr	r3, [r3, #12]
 8004dd8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004ddc:	f021 010c 	bic.w	r1, r1, #12
 8004de0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004dea:	430b      	orrs	r3, r1
 8004dec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004dee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	695b      	ldr	r3, [r3, #20]
 8004df6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004dfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dfe:	6999      	ldr	r1, [r3, #24]
 8004e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	ea40 0301 	orr.w	r3, r0, r1
 8004e0a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e10:	681a      	ldr	r2, [r3, #0]
 8004e12:	4b8f      	ldr	r3, [pc, #572]	@ (8005050 <UART_SetConfig+0x2cc>)
 8004e14:	429a      	cmp	r2, r3
 8004e16:	d005      	beq.n	8004e24 <UART_SetConfig+0xa0>
 8004e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	4b8d      	ldr	r3, [pc, #564]	@ (8005054 <UART_SetConfig+0x2d0>)
 8004e20:	429a      	cmp	r2, r3
 8004e22:	d104      	bne.n	8004e2e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004e24:	f7ff fca0 	bl	8004768 <HAL_RCC_GetPCLK2Freq>
 8004e28:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004e2c:	e003      	b.n	8004e36 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004e2e:	f7ff fc87 	bl	8004740 <HAL_RCC_GetPCLK1Freq>
 8004e32:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e3a:	69db      	ldr	r3, [r3, #28]
 8004e3c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e40:	f040 810c 	bne.w	800505c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004e44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e48:	2200      	movs	r2, #0
 8004e4a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004e4e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004e52:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004e56:	4622      	mov	r2, r4
 8004e58:	462b      	mov	r3, r5
 8004e5a:	1891      	adds	r1, r2, r2
 8004e5c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004e5e:	415b      	adcs	r3, r3
 8004e60:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004e62:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004e66:	4621      	mov	r1, r4
 8004e68:	eb12 0801 	adds.w	r8, r2, r1
 8004e6c:	4629      	mov	r1, r5
 8004e6e:	eb43 0901 	adc.w	r9, r3, r1
 8004e72:	f04f 0200 	mov.w	r2, #0
 8004e76:	f04f 0300 	mov.w	r3, #0
 8004e7a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e7e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e82:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e86:	4690      	mov	r8, r2
 8004e88:	4699      	mov	r9, r3
 8004e8a:	4623      	mov	r3, r4
 8004e8c:	eb18 0303 	adds.w	r3, r8, r3
 8004e90:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004e94:	462b      	mov	r3, r5
 8004e96:	eb49 0303 	adc.w	r3, r9, r3
 8004e9a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004e9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004eaa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004eae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004eb2:	460b      	mov	r3, r1
 8004eb4:	18db      	adds	r3, r3, r3
 8004eb6:	653b      	str	r3, [r7, #80]	@ 0x50
 8004eb8:	4613      	mov	r3, r2
 8004eba:	eb42 0303 	adc.w	r3, r2, r3
 8004ebe:	657b      	str	r3, [r7, #84]	@ 0x54
 8004ec0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004ec4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004ec8:	f7fb f9d2 	bl	8000270 <__aeabi_uldivmod>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	460b      	mov	r3, r1
 8004ed0:	4b61      	ldr	r3, [pc, #388]	@ (8005058 <UART_SetConfig+0x2d4>)
 8004ed2:	fba3 2302 	umull	r2, r3, r3, r2
 8004ed6:	095b      	lsrs	r3, r3, #5
 8004ed8:	011c      	lsls	r4, r3, #4
 8004eda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ede:	2200      	movs	r2, #0
 8004ee0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004ee4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004ee8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004eec:	4642      	mov	r2, r8
 8004eee:	464b      	mov	r3, r9
 8004ef0:	1891      	adds	r1, r2, r2
 8004ef2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004ef4:	415b      	adcs	r3, r3
 8004ef6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ef8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004efc:	4641      	mov	r1, r8
 8004efe:	eb12 0a01 	adds.w	sl, r2, r1
 8004f02:	4649      	mov	r1, r9
 8004f04:	eb43 0b01 	adc.w	fp, r3, r1
 8004f08:	f04f 0200 	mov.w	r2, #0
 8004f0c:	f04f 0300 	mov.w	r3, #0
 8004f10:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004f14:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004f18:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f1c:	4692      	mov	sl, r2
 8004f1e:	469b      	mov	fp, r3
 8004f20:	4643      	mov	r3, r8
 8004f22:	eb1a 0303 	adds.w	r3, sl, r3
 8004f26:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004f2a:	464b      	mov	r3, r9
 8004f2c:	eb4b 0303 	adc.w	r3, fp, r3
 8004f30:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004f34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004f40:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004f44:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004f48:	460b      	mov	r3, r1
 8004f4a:	18db      	adds	r3, r3, r3
 8004f4c:	643b      	str	r3, [r7, #64]	@ 0x40
 8004f4e:	4613      	mov	r3, r2
 8004f50:	eb42 0303 	adc.w	r3, r2, r3
 8004f54:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f56:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004f5a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004f5e:	f7fb f987 	bl	8000270 <__aeabi_uldivmod>
 8004f62:	4602      	mov	r2, r0
 8004f64:	460b      	mov	r3, r1
 8004f66:	4611      	mov	r1, r2
 8004f68:	4b3b      	ldr	r3, [pc, #236]	@ (8005058 <UART_SetConfig+0x2d4>)
 8004f6a:	fba3 2301 	umull	r2, r3, r3, r1
 8004f6e:	095b      	lsrs	r3, r3, #5
 8004f70:	2264      	movs	r2, #100	@ 0x64
 8004f72:	fb02 f303 	mul.w	r3, r2, r3
 8004f76:	1acb      	subs	r3, r1, r3
 8004f78:	00db      	lsls	r3, r3, #3
 8004f7a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004f7e:	4b36      	ldr	r3, [pc, #216]	@ (8005058 <UART_SetConfig+0x2d4>)
 8004f80:	fba3 2302 	umull	r2, r3, r3, r2
 8004f84:	095b      	lsrs	r3, r3, #5
 8004f86:	005b      	lsls	r3, r3, #1
 8004f88:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004f8c:	441c      	add	r4, r3
 8004f8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f92:	2200      	movs	r2, #0
 8004f94:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004f98:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004f9c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004fa0:	4642      	mov	r2, r8
 8004fa2:	464b      	mov	r3, r9
 8004fa4:	1891      	adds	r1, r2, r2
 8004fa6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004fa8:	415b      	adcs	r3, r3
 8004faa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004fac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004fb0:	4641      	mov	r1, r8
 8004fb2:	1851      	adds	r1, r2, r1
 8004fb4:	6339      	str	r1, [r7, #48]	@ 0x30
 8004fb6:	4649      	mov	r1, r9
 8004fb8:	414b      	adcs	r3, r1
 8004fba:	637b      	str	r3, [r7, #52]	@ 0x34
 8004fbc:	f04f 0200 	mov.w	r2, #0
 8004fc0:	f04f 0300 	mov.w	r3, #0
 8004fc4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004fc8:	4659      	mov	r1, fp
 8004fca:	00cb      	lsls	r3, r1, #3
 8004fcc:	4651      	mov	r1, sl
 8004fce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004fd2:	4651      	mov	r1, sl
 8004fd4:	00ca      	lsls	r2, r1, #3
 8004fd6:	4610      	mov	r0, r2
 8004fd8:	4619      	mov	r1, r3
 8004fda:	4603      	mov	r3, r0
 8004fdc:	4642      	mov	r2, r8
 8004fde:	189b      	adds	r3, r3, r2
 8004fe0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004fe4:	464b      	mov	r3, r9
 8004fe6:	460a      	mov	r2, r1
 8004fe8:	eb42 0303 	adc.w	r3, r2, r3
 8004fec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004ff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004ffc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005000:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005004:	460b      	mov	r3, r1
 8005006:	18db      	adds	r3, r3, r3
 8005008:	62bb      	str	r3, [r7, #40]	@ 0x28
 800500a:	4613      	mov	r3, r2
 800500c:	eb42 0303 	adc.w	r3, r2, r3
 8005010:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005012:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005016:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800501a:	f7fb f929 	bl	8000270 <__aeabi_uldivmod>
 800501e:	4602      	mov	r2, r0
 8005020:	460b      	mov	r3, r1
 8005022:	4b0d      	ldr	r3, [pc, #52]	@ (8005058 <UART_SetConfig+0x2d4>)
 8005024:	fba3 1302 	umull	r1, r3, r3, r2
 8005028:	095b      	lsrs	r3, r3, #5
 800502a:	2164      	movs	r1, #100	@ 0x64
 800502c:	fb01 f303 	mul.w	r3, r1, r3
 8005030:	1ad3      	subs	r3, r2, r3
 8005032:	00db      	lsls	r3, r3, #3
 8005034:	3332      	adds	r3, #50	@ 0x32
 8005036:	4a08      	ldr	r2, [pc, #32]	@ (8005058 <UART_SetConfig+0x2d4>)
 8005038:	fba2 2303 	umull	r2, r3, r2, r3
 800503c:	095b      	lsrs	r3, r3, #5
 800503e:	f003 0207 	and.w	r2, r3, #7
 8005042:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4422      	add	r2, r4
 800504a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800504c:	e106      	b.n	800525c <UART_SetConfig+0x4d8>
 800504e:	bf00      	nop
 8005050:	40011000 	.word	0x40011000
 8005054:	40011400 	.word	0x40011400
 8005058:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800505c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005060:	2200      	movs	r2, #0
 8005062:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005066:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800506a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800506e:	4642      	mov	r2, r8
 8005070:	464b      	mov	r3, r9
 8005072:	1891      	adds	r1, r2, r2
 8005074:	6239      	str	r1, [r7, #32]
 8005076:	415b      	adcs	r3, r3
 8005078:	627b      	str	r3, [r7, #36]	@ 0x24
 800507a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800507e:	4641      	mov	r1, r8
 8005080:	1854      	adds	r4, r2, r1
 8005082:	4649      	mov	r1, r9
 8005084:	eb43 0501 	adc.w	r5, r3, r1
 8005088:	f04f 0200 	mov.w	r2, #0
 800508c:	f04f 0300 	mov.w	r3, #0
 8005090:	00eb      	lsls	r3, r5, #3
 8005092:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005096:	00e2      	lsls	r2, r4, #3
 8005098:	4614      	mov	r4, r2
 800509a:	461d      	mov	r5, r3
 800509c:	4643      	mov	r3, r8
 800509e:	18e3      	adds	r3, r4, r3
 80050a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80050a4:	464b      	mov	r3, r9
 80050a6:	eb45 0303 	adc.w	r3, r5, r3
 80050aa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80050ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	2200      	movs	r2, #0
 80050b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80050ba:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80050be:	f04f 0200 	mov.w	r2, #0
 80050c2:	f04f 0300 	mov.w	r3, #0
 80050c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80050ca:	4629      	mov	r1, r5
 80050cc:	008b      	lsls	r3, r1, #2
 80050ce:	4621      	mov	r1, r4
 80050d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80050d4:	4621      	mov	r1, r4
 80050d6:	008a      	lsls	r2, r1, #2
 80050d8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80050dc:	f7fb f8c8 	bl	8000270 <__aeabi_uldivmod>
 80050e0:	4602      	mov	r2, r0
 80050e2:	460b      	mov	r3, r1
 80050e4:	4b60      	ldr	r3, [pc, #384]	@ (8005268 <UART_SetConfig+0x4e4>)
 80050e6:	fba3 2302 	umull	r2, r3, r3, r2
 80050ea:	095b      	lsrs	r3, r3, #5
 80050ec:	011c      	lsls	r4, r3, #4
 80050ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80050f2:	2200      	movs	r2, #0
 80050f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80050f8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80050fc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005100:	4642      	mov	r2, r8
 8005102:	464b      	mov	r3, r9
 8005104:	1891      	adds	r1, r2, r2
 8005106:	61b9      	str	r1, [r7, #24]
 8005108:	415b      	adcs	r3, r3
 800510a:	61fb      	str	r3, [r7, #28]
 800510c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005110:	4641      	mov	r1, r8
 8005112:	1851      	adds	r1, r2, r1
 8005114:	6139      	str	r1, [r7, #16]
 8005116:	4649      	mov	r1, r9
 8005118:	414b      	adcs	r3, r1
 800511a:	617b      	str	r3, [r7, #20]
 800511c:	f04f 0200 	mov.w	r2, #0
 8005120:	f04f 0300 	mov.w	r3, #0
 8005124:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005128:	4659      	mov	r1, fp
 800512a:	00cb      	lsls	r3, r1, #3
 800512c:	4651      	mov	r1, sl
 800512e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005132:	4651      	mov	r1, sl
 8005134:	00ca      	lsls	r2, r1, #3
 8005136:	4610      	mov	r0, r2
 8005138:	4619      	mov	r1, r3
 800513a:	4603      	mov	r3, r0
 800513c:	4642      	mov	r2, r8
 800513e:	189b      	adds	r3, r3, r2
 8005140:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005144:	464b      	mov	r3, r9
 8005146:	460a      	mov	r2, r1
 8005148:	eb42 0303 	adc.w	r3, r2, r3
 800514c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	2200      	movs	r2, #0
 8005158:	67bb      	str	r3, [r7, #120]	@ 0x78
 800515a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800515c:	f04f 0200 	mov.w	r2, #0
 8005160:	f04f 0300 	mov.w	r3, #0
 8005164:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005168:	4649      	mov	r1, r9
 800516a:	008b      	lsls	r3, r1, #2
 800516c:	4641      	mov	r1, r8
 800516e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005172:	4641      	mov	r1, r8
 8005174:	008a      	lsls	r2, r1, #2
 8005176:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800517a:	f7fb f879 	bl	8000270 <__aeabi_uldivmod>
 800517e:	4602      	mov	r2, r0
 8005180:	460b      	mov	r3, r1
 8005182:	4611      	mov	r1, r2
 8005184:	4b38      	ldr	r3, [pc, #224]	@ (8005268 <UART_SetConfig+0x4e4>)
 8005186:	fba3 2301 	umull	r2, r3, r3, r1
 800518a:	095b      	lsrs	r3, r3, #5
 800518c:	2264      	movs	r2, #100	@ 0x64
 800518e:	fb02 f303 	mul.w	r3, r2, r3
 8005192:	1acb      	subs	r3, r1, r3
 8005194:	011b      	lsls	r3, r3, #4
 8005196:	3332      	adds	r3, #50	@ 0x32
 8005198:	4a33      	ldr	r2, [pc, #204]	@ (8005268 <UART_SetConfig+0x4e4>)
 800519a:	fba2 2303 	umull	r2, r3, r2, r3
 800519e:	095b      	lsrs	r3, r3, #5
 80051a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80051a4:	441c      	add	r4, r3
 80051a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80051aa:	2200      	movs	r2, #0
 80051ac:	673b      	str	r3, [r7, #112]	@ 0x70
 80051ae:	677a      	str	r2, [r7, #116]	@ 0x74
 80051b0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80051b4:	4642      	mov	r2, r8
 80051b6:	464b      	mov	r3, r9
 80051b8:	1891      	adds	r1, r2, r2
 80051ba:	60b9      	str	r1, [r7, #8]
 80051bc:	415b      	adcs	r3, r3
 80051be:	60fb      	str	r3, [r7, #12]
 80051c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80051c4:	4641      	mov	r1, r8
 80051c6:	1851      	adds	r1, r2, r1
 80051c8:	6039      	str	r1, [r7, #0]
 80051ca:	4649      	mov	r1, r9
 80051cc:	414b      	adcs	r3, r1
 80051ce:	607b      	str	r3, [r7, #4]
 80051d0:	f04f 0200 	mov.w	r2, #0
 80051d4:	f04f 0300 	mov.w	r3, #0
 80051d8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80051dc:	4659      	mov	r1, fp
 80051de:	00cb      	lsls	r3, r1, #3
 80051e0:	4651      	mov	r1, sl
 80051e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80051e6:	4651      	mov	r1, sl
 80051e8:	00ca      	lsls	r2, r1, #3
 80051ea:	4610      	mov	r0, r2
 80051ec:	4619      	mov	r1, r3
 80051ee:	4603      	mov	r3, r0
 80051f0:	4642      	mov	r2, r8
 80051f2:	189b      	adds	r3, r3, r2
 80051f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80051f6:	464b      	mov	r3, r9
 80051f8:	460a      	mov	r2, r1
 80051fa:	eb42 0303 	adc.w	r3, r2, r3
 80051fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	2200      	movs	r2, #0
 8005208:	663b      	str	r3, [r7, #96]	@ 0x60
 800520a:	667a      	str	r2, [r7, #100]	@ 0x64
 800520c:	f04f 0200 	mov.w	r2, #0
 8005210:	f04f 0300 	mov.w	r3, #0
 8005214:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005218:	4649      	mov	r1, r9
 800521a:	008b      	lsls	r3, r1, #2
 800521c:	4641      	mov	r1, r8
 800521e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005222:	4641      	mov	r1, r8
 8005224:	008a      	lsls	r2, r1, #2
 8005226:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800522a:	f7fb f821 	bl	8000270 <__aeabi_uldivmod>
 800522e:	4602      	mov	r2, r0
 8005230:	460b      	mov	r3, r1
 8005232:	4b0d      	ldr	r3, [pc, #52]	@ (8005268 <UART_SetConfig+0x4e4>)
 8005234:	fba3 1302 	umull	r1, r3, r3, r2
 8005238:	095b      	lsrs	r3, r3, #5
 800523a:	2164      	movs	r1, #100	@ 0x64
 800523c:	fb01 f303 	mul.w	r3, r1, r3
 8005240:	1ad3      	subs	r3, r2, r3
 8005242:	011b      	lsls	r3, r3, #4
 8005244:	3332      	adds	r3, #50	@ 0x32
 8005246:	4a08      	ldr	r2, [pc, #32]	@ (8005268 <UART_SetConfig+0x4e4>)
 8005248:	fba2 2303 	umull	r2, r3, r2, r3
 800524c:	095b      	lsrs	r3, r3, #5
 800524e:	f003 020f 	and.w	r2, r3, #15
 8005252:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4422      	add	r2, r4
 800525a:	609a      	str	r2, [r3, #8]
}
 800525c:	bf00      	nop
 800525e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005262:	46bd      	mov	sp, r7
 8005264:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005268:	51eb851f 	.word	0x51eb851f

0800526c <ILI9341_Select>:
#include "stm32f4xx_hal.h"


#include "ili9341.h"

static void ILI9341_Select() {
 800526c:	b580      	push	{r7, lr}
 800526e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_RESET);
 8005270:	2200      	movs	r2, #0
 8005272:	2110      	movs	r1, #16
 8005274:	4802      	ldr	r0, [pc, #8]	@ (8005280 <ILI9341_Select+0x14>)
 8005276:	f7fd fdf5 	bl	8002e64 <HAL_GPIO_WritePin>
}
 800527a:	bf00      	nop
 800527c:	bd80      	pop	{r7, pc}
 800527e:	bf00      	nop
 8005280:	40021000 	.word	0x40021000

08005284 <ILI9341_Unselect>:

void ILI9341_Unselect() {
 8005284:	b580      	push	{r7, lr}
 8005286:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_SET);
 8005288:	2201      	movs	r2, #1
 800528a:	2110      	movs	r1, #16
 800528c:	4802      	ldr	r0, [pc, #8]	@ (8005298 <ILI9341_Unselect+0x14>)
 800528e:	f7fd fde9 	bl	8002e64 <HAL_GPIO_WritePin>
}
 8005292:	bf00      	nop
 8005294:	bd80      	pop	{r7, pc}
 8005296:	bf00      	nop
 8005298:	40021000 	.word	0x40021000

0800529c <ILI9341_Reset>:

static void ILI9341_Reset() {
 800529c:	b580      	push	{r7, lr}
 800529e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_RESET);
 80052a0:	2200      	movs	r2, #0
 80052a2:	2140      	movs	r1, #64	@ 0x40
 80052a4:	4806      	ldr	r0, [pc, #24]	@ (80052c0 <ILI9341_Reset+0x24>)
 80052a6:	f7fd fddd 	bl	8002e64 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 80052aa:	2005      	movs	r0, #5
 80052ac:	f7fc ff1c 	bl	80020e8 <HAL_Delay>
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_SET);
 80052b0:	2201      	movs	r2, #1
 80052b2:	2140      	movs	r1, #64	@ 0x40
 80052b4:	4802      	ldr	r0, [pc, #8]	@ (80052c0 <ILI9341_Reset+0x24>)
 80052b6:	f7fd fdd5 	bl	8002e64 <HAL_GPIO_WritePin>
}
 80052ba:	bf00      	nop
 80052bc:	bd80      	pop	{r7, pc}
 80052be:	bf00      	nop
 80052c0:	40021000 	.word	0x40021000

080052c4 <ILI9341_WriteCommand>:

static void ILI9341_WriteCommand(uint8_t cmd) {
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b082      	sub	sp, #8
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	4603      	mov	r3, r0
 80052cc:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_RESET);
 80052ce:	2200      	movs	r2, #0
 80052d0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80052d4:	4806      	ldr	r0, [pc, #24]	@ (80052f0 <ILI9341_WriteCommand+0x2c>)
 80052d6:	f7fd fdc5 	bl	8002e64 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ILI9341_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 80052da:	1df9      	adds	r1, r7, #7
 80052dc:	f04f 33ff 	mov.w	r3, #4294967295
 80052e0:	2201      	movs	r2, #1
 80052e2:	4804      	ldr	r0, [pc, #16]	@ (80052f4 <ILI9341_WriteCommand+0x30>)
 80052e4:	f7ff fadd 	bl	80048a2 <HAL_SPI_Transmit>
}
 80052e8:	bf00      	nop
 80052ea:	3708      	adds	r7, #8
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}
 80052f0:	40020800 	.word	0x40020800
 80052f4:	20000154 	.word	0x20000154

080052f8 <ILI9341_WriteData>:

static void ILI9341_WriteData(uint8_t* buff, size_t buff_size) {
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b084      	sub	sp, #16
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
 8005300:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 8005302:	2201      	movs	r2, #1
 8005304:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005308:	4810      	ldr	r0, [pc, #64]	@ (800534c <ILI9341_WriteData+0x54>)
 800530a:	f7fd fdab 	bl	8002e64 <HAL_GPIO_WritePin>

    // split data in small chunks because HAL can't send more then 64K at once
    while(buff_size > 0) {
 800530e:	e014      	b.n	800533a <ILI9341_WriteData+0x42>
        uint16_t chunk_size = buff_size > 32768 ? 32768 : buff_size;
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005316:	bf28      	it	cs
 8005318:	f44f 4300 	movcs.w	r3, #32768	@ 0x8000
 800531c:	81fb      	strh	r3, [r7, #14]
        HAL_SPI_Transmit(&ILI9341_SPI_PORT, buff, chunk_size, 100);
 800531e:	89fa      	ldrh	r2, [r7, #14]
 8005320:	2364      	movs	r3, #100	@ 0x64
 8005322:	6879      	ldr	r1, [r7, #4]
 8005324:	480a      	ldr	r0, [pc, #40]	@ (8005350 <ILI9341_WriteData+0x58>)
 8005326:	f7ff fabc 	bl	80048a2 <HAL_SPI_Transmit>
        buff += chunk_size;
 800532a:	89fb      	ldrh	r3, [r7, #14]
 800532c:	687a      	ldr	r2, [r7, #4]
 800532e:	4413      	add	r3, r2
 8005330:	607b      	str	r3, [r7, #4]
        buff_size -= chunk_size;
 8005332:	89fb      	ldrh	r3, [r7, #14]
 8005334:	683a      	ldr	r2, [r7, #0]
 8005336:	1ad3      	subs	r3, r2, r3
 8005338:	603b      	str	r3, [r7, #0]
    while(buff_size > 0) {
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d1e7      	bne.n	8005310 <ILI9341_WriteData+0x18>
    }
}
 8005340:	bf00      	nop
 8005342:	bf00      	nop
 8005344:	3710      	adds	r7, #16
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}
 800534a:	bf00      	nop
 800534c:	40020800 	.word	0x40020800
 8005350:	20000154 	.word	0x20000154

08005354 <ILI9341_SetAddressWindow>:

static void ILI9341_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 8005354:	b590      	push	{r4, r7, lr}
 8005356:	b085      	sub	sp, #20
 8005358:	af00      	add	r7, sp, #0
 800535a:	4604      	mov	r4, r0
 800535c:	4608      	mov	r0, r1
 800535e:	4611      	mov	r1, r2
 8005360:	461a      	mov	r2, r3
 8005362:	4623      	mov	r3, r4
 8005364:	80fb      	strh	r3, [r7, #6]
 8005366:	4603      	mov	r3, r0
 8005368:	80bb      	strh	r3, [r7, #4]
 800536a:	460b      	mov	r3, r1
 800536c:	807b      	strh	r3, [r7, #2]
 800536e:	4613      	mov	r3, r2
 8005370:	803b      	strh	r3, [r7, #0]
    // column address set
    ILI9341_WriteCommand(0x2A); // CASET
 8005372:	202a      	movs	r0, #42	@ 0x2a
 8005374:	f7ff ffa6 	bl	80052c4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { (x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1 & 0xFF };
 8005378:	88fb      	ldrh	r3, [r7, #6]
 800537a:	0a1b      	lsrs	r3, r3, #8
 800537c:	b29b      	uxth	r3, r3
 800537e:	b2db      	uxtb	r3, r3
 8005380:	733b      	strb	r3, [r7, #12]
 8005382:	88fb      	ldrh	r3, [r7, #6]
 8005384:	b2db      	uxtb	r3, r3
 8005386:	737b      	strb	r3, [r7, #13]
 8005388:	887b      	ldrh	r3, [r7, #2]
 800538a:	0a1b      	lsrs	r3, r3, #8
 800538c:	b29b      	uxth	r3, r3
 800538e:	b2db      	uxtb	r3, r3
 8005390:	73bb      	strb	r3, [r7, #14]
 8005392:	887b      	ldrh	r3, [r7, #2]
 8005394:	b2db      	uxtb	r3, r3
 8005396:	73fb      	strb	r3, [r7, #15]
        ILI9341_WriteData(data, sizeof(data));
 8005398:	f107 030c 	add.w	r3, r7, #12
 800539c:	2104      	movs	r1, #4
 800539e:	4618      	mov	r0, r3
 80053a0:	f7ff ffaa 	bl	80052f8 <ILI9341_WriteData>
    }

    // row address set
    ILI9341_WriteCommand(0x2B); // RASET
 80053a4:	202b      	movs	r0, #43	@ 0x2b
 80053a6:	f7ff ff8d 	bl	80052c4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { (y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1 & 0xFF };
 80053aa:	88bb      	ldrh	r3, [r7, #4]
 80053ac:	0a1b      	lsrs	r3, r3, #8
 80053ae:	b29b      	uxth	r3, r3
 80053b0:	b2db      	uxtb	r3, r3
 80053b2:	723b      	strb	r3, [r7, #8]
 80053b4:	88bb      	ldrh	r3, [r7, #4]
 80053b6:	b2db      	uxtb	r3, r3
 80053b8:	727b      	strb	r3, [r7, #9]
 80053ba:	883b      	ldrh	r3, [r7, #0]
 80053bc:	0a1b      	lsrs	r3, r3, #8
 80053be:	b29b      	uxth	r3, r3
 80053c0:	b2db      	uxtb	r3, r3
 80053c2:	72bb      	strb	r3, [r7, #10]
 80053c4:	883b      	ldrh	r3, [r7, #0]
 80053c6:	b2db      	uxtb	r3, r3
 80053c8:	72fb      	strb	r3, [r7, #11]
        ILI9341_WriteData(data, sizeof(data));
 80053ca:	f107 0308 	add.w	r3, r7, #8
 80053ce:	2104      	movs	r1, #4
 80053d0:	4618      	mov	r0, r3
 80053d2:	f7ff ff91 	bl	80052f8 <ILI9341_WriteData>
    }

    // write to RAM
    ILI9341_WriteCommand(0x2C); // RAMWR
 80053d6:	202c      	movs	r0, #44	@ 0x2c
 80053d8:	f7ff ff74 	bl	80052c4 <ILI9341_WriteCommand>
}
 80053dc:	bf00      	nop
 80053de:	3714      	adds	r7, #20
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd90      	pop	{r4, r7, pc}

080053e4 <ILI9341_Init>:

void ILI9341_Init() {
 80053e4:	b590      	push	{r4, r7, lr}
 80053e6:	b09b      	sub	sp, #108	@ 0x6c
 80053e8:	af00      	add	r7, sp, #0
    ILI9341_Select();
 80053ea:	f7ff ff3f 	bl	800526c <ILI9341_Select>
    ILI9341_Reset();
 80053ee:	f7ff ff55 	bl	800529c <ILI9341_Reset>

    // command list is based on https://github.com/martnak/STM32-ILI9341

    // SOFTWARE RESET
    ILI9341_WriteCommand(0x01);
 80053f2:	2001      	movs	r0, #1
 80053f4:	f7ff ff66 	bl	80052c4 <ILI9341_WriteCommand>
    HAL_Delay(1000);
 80053f8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80053fc:	f7fc fe74 	bl	80020e8 <HAL_Delay>
        
    // POWER CONTROL A
    ILI9341_WriteCommand(0xCB);
 8005400:	20cb      	movs	r0, #203	@ 0xcb
 8005402:	f7ff ff5f 	bl	80052c4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x39, 0x2C, 0x00, 0x34, 0x02 };
 8005406:	4a87      	ldr	r2, [pc, #540]	@ (8005624 <ILI9341_Init+0x240>)
 8005408:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800540c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005410:	6018      	str	r0, [r3, #0]
 8005412:	3304      	adds	r3, #4
 8005414:	7019      	strb	r1, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 8005416:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800541a:	2105      	movs	r1, #5
 800541c:	4618      	mov	r0, r3
 800541e:	f7ff ff6b 	bl	80052f8 <ILI9341_WriteData>
    }

    // POWER CONTROL B
    ILI9341_WriteCommand(0xCF);
 8005422:	20cf      	movs	r0, #207	@ 0xcf
 8005424:	f7ff ff4e 	bl	80052c4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0xC1, 0x30 };
 8005428:	4a7f      	ldr	r2, [pc, #508]	@ (8005628 <ILI9341_Init+0x244>)
 800542a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800542e:	6812      	ldr	r2, [r2, #0]
 8005430:	4611      	mov	r1, r2
 8005432:	8019      	strh	r1, [r3, #0]
 8005434:	3302      	adds	r3, #2
 8005436:	0c12      	lsrs	r2, r2, #16
 8005438:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 800543a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800543e:	2103      	movs	r1, #3
 8005440:	4618      	mov	r0, r3
 8005442:	f7ff ff59 	bl	80052f8 <ILI9341_WriteData>
    }

    // DRIVER TIMING CONTROL A
    ILI9341_WriteCommand(0xE8);
 8005446:	20e8      	movs	r0, #232	@ 0xe8
 8005448:	f7ff ff3c 	bl	80052c4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x85, 0x00, 0x78 };
 800544c:	4a77      	ldr	r2, [pc, #476]	@ (800562c <ILI9341_Init+0x248>)
 800544e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8005452:	6812      	ldr	r2, [r2, #0]
 8005454:	4611      	mov	r1, r2
 8005456:	8019      	strh	r1, [r3, #0]
 8005458:	3302      	adds	r3, #2
 800545a:	0c12      	lsrs	r2, r2, #16
 800545c:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 800545e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8005462:	2103      	movs	r1, #3
 8005464:	4618      	mov	r0, r3
 8005466:	f7ff ff47 	bl	80052f8 <ILI9341_WriteData>
    }

    // DRIVER TIMING CONTROL B
    ILI9341_WriteCommand(0xEA);
 800546a:	20ea      	movs	r0, #234	@ 0xea
 800546c:	f7ff ff2a 	bl	80052c4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x00 };
 8005470:	2300      	movs	r3, #0
 8005472:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
        ILI9341_WriteData(data, sizeof(data));
 8005476:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800547a:	2102      	movs	r1, #2
 800547c:	4618      	mov	r0, r3
 800547e:	f7ff ff3b 	bl	80052f8 <ILI9341_WriteData>
    }

    // POWER ON SEQUENCE CONTROL
    ILI9341_WriteCommand(0xED);
 8005482:	20ed      	movs	r0, #237	@ 0xed
 8005484:	f7ff ff1e 	bl	80052c4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x64, 0x03, 0x12, 0x81 };
 8005488:	4b69      	ldr	r3, [pc, #420]	@ (8005630 <ILI9341_Init+0x24c>)
 800548a:	653b      	str	r3, [r7, #80]	@ 0x50
        ILI9341_WriteData(data, sizeof(data));
 800548c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8005490:	2104      	movs	r1, #4
 8005492:	4618      	mov	r0, r3
 8005494:	f7ff ff30 	bl	80052f8 <ILI9341_WriteData>
    }

    // PUMP RATIO CONTROL
    ILI9341_WriteCommand(0xF7);
 8005498:	20f7      	movs	r0, #247	@ 0xf7
 800549a:	f7ff ff13 	bl	80052c4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x20 };
 800549e:	2320      	movs	r3, #32
 80054a0:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
        ILI9341_WriteData(data, sizeof(data));
 80054a4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80054a8:	2101      	movs	r1, #1
 80054aa:	4618      	mov	r0, r3
 80054ac:	f7ff ff24 	bl	80052f8 <ILI9341_WriteData>
    }

    // POWER CONTROL,VRH[5:0]
    ILI9341_WriteCommand(0xC0);
 80054b0:	20c0      	movs	r0, #192	@ 0xc0
 80054b2:	f7ff ff07 	bl	80052c4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x23 };
 80054b6:	2323      	movs	r3, #35	@ 0x23
 80054b8:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
        ILI9341_WriteData(data, sizeof(data));
 80054bc:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80054c0:	2101      	movs	r1, #1
 80054c2:	4618      	mov	r0, r3
 80054c4:	f7ff ff18 	bl	80052f8 <ILI9341_WriteData>
    }

    // POWER CONTROL,SAP[2:0];BT[3:0]
    ILI9341_WriteCommand(0xC1);
 80054c8:	20c1      	movs	r0, #193	@ 0xc1
 80054ca:	f7ff fefb 	bl	80052c4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x10 };
 80054ce:	2310      	movs	r3, #16
 80054d0:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
        ILI9341_WriteData(data, sizeof(data));
 80054d4:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80054d8:	2101      	movs	r1, #1
 80054da:	4618      	mov	r0, r3
 80054dc:	f7ff ff0c 	bl	80052f8 <ILI9341_WriteData>
    }

    // VCM CONTROL
    ILI9341_WriteCommand(0xC5);
 80054e0:	20c5      	movs	r0, #197	@ 0xc5
 80054e2:	f7ff feef 	bl	80052c4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x3E, 0x28 };
 80054e6:	f642 033e 	movw	r3, #10302	@ 0x283e
 80054ea:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
        ILI9341_WriteData(data, sizeof(data));
 80054ee:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80054f2:	2102      	movs	r1, #2
 80054f4:	4618      	mov	r0, r3
 80054f6:	f7ff feff 	bl	80052f8 <ILI9341_WriteData>
    }

    // VCM CONTROL 2
    ILI9341_WriteCommand(0xC7);
 80054fa:	20c7      	movs	r0, #199	@ 0xc7
 80054fc:	f7ff fee2 	bl	80052c4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x86 };
 8005500:	2386      	movs	r3, #134	@ 0x86
 8005502:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
        ILI9341_WriteData(data, sizeof(data));
 8005506:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800550a:	2101      	movs	r1, #1
 800550c:	4618      	mov	r0, r3
 800550e:	f7ff fef3 	bl	80052f8 <ILI9341_WriteData>
    }

    // MEMORY ACCESS CONTROL
    ILI9341_WriteCommand(0x36);
 8005512:	2036      	movs	r0, #54	@ 0x36
 8005514:	f7ff fed6 	bl	80052c4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x48 };
 8005518:	2348      	movs	r3, #72	@ 0x48
 800551a:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
        ILI9341_WriteData(data, sizeof(data));
 800551e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8005522:	2101      	movs	r1, #1
 8005524:	4618      	mov	r0, r3
 8005526:	f7ff fee7 	bl	80052f8 <ILI9341_WriteData>
    }

    // PIXEL FORMAT
    ILI9341_WriteCommand(0x3A);
 800552a:	203a      	movs	r0, #58	@ 0x3a
 800552c:	f7ff feca 	bl	80052c4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x55 };
 8005530:	2355      	movs	r3, #85	@ 0x55
 8005532:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        ILI9341_WriteData(data, sizeof(data));
 8005536:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800553a:	2101      	movs	r1, #1
 800553c:	4618      	mov	r0, r3
 800553e:	f7ff fedb 	bl	80052f8 <ILI9341_WriteData>
    }

    // FRAME RATIO CONTROL, STANDARD RGB COLOR
    ILI9341_WriteCommand(0xB1);
 8005542:	20b1      	movs	r0, #177	@ 0xb1
 8005544:	f7ff febe 	bl	80052c4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x18 };
 8005548:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800554c:	863b      	strh	r3, [r7, #48]	@ 0x30
        ILI9341_WriteData(data, sizeof(data));
 800554e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8005552:	2102      	movs	r1, #2
 8005554:	4618      	mov	r0, r3
 8005556:	f7ff fecf 	bl	80052f8 <ILI9341_WriteData>
    }

    // DISPLAY FUNCTION CONTROL
    ILI9341_WriteCommand(0xB6);
 800555a:	20b6      	movs	r0, #182	@ 0xb6
 800555c:	f7ff feb2 	bl	80052c4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x08, 0x82, 0x27 };
 8005560:	4a34      	ldr	r2, [pc, #208]	@ (8005634 <ILI9341_Init+0x250>)
 8005562:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005566:	6812      	ldr	r2, [r2, #0]
 8005568:	4611      	mov	r1, r2
 800556a:	8019      	strh	r1, [r3, #0]
 800556c:	3302      	adds	r3, #2
 800556e:	0c12      	lsrs	r2, r2, #16
 8005570:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 8005572:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005576:	2103      	movs	r1, #3
 8005578:	4618      	mov	r0, r3
 800557a:	f7ff febd 	bl	80052f8 <ILI9341_WriteData>
    }

    // 3GAMMA FUNCTION DISABLE
    ILI9341_WriteCommand(0xF2);
 800557e:	20f2      	movs	r0, #242	@ 0xf2
 8005580:	f7ff fea0 	bl	80052c4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00 };
 8005584:	2300      	movs	r3, #0
 8005586:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
        ILI9341_WriteData(data, sizeof(data));
 800558a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800558e:	2101      	movs	r1, #1
 8005590:	4618      	mov	r0, r3
 8005592:	f7ff feb1 	bl	80052f8 <ILI9341_WriteData>
    }

    // GAMMA CURVE SELECTED
    ILI9341_WriteCommand(0x26);
 8005596:	2026      	movs	r0, #38	@ 0x26
 8005598:	f7ff fe94 	bl	80052c4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x01 };
 800559c:	2301      	movs	r3, #1
 800559e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        ILI9341_WriteData(data, sizeof(data));
 80055a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80055a6:	2101      	movs	r1, #1
 80055a8:	4618      	mov	r0, r3
 80055aa:	f7ff fea5 	bl	80052f8 <ILI9341_WriteData>
    }

    // POSITIVE GAMMA CORRECTION
    ILI9341_WriteCommand(0xE0);
 80055ae:	20e0      	movs	r0, #224	@ 0xe0
 80055b0:	f7ff fe88 	bl	80052c4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x0F, 0x31, 0x2B, 0x0C, 0x0E, 0x08, 0x4E, 0xF1,
 80055b4:	4b20      	ldr	r3, [pc, #128]	@ (8005638 <ILI9341_Init+0x254>)
 80055b6:	f107 0414 	add.w	r4, r7, #20
 80055ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80055bc:	c407      	stmia	r4!, {r0, r1, r2}
 80055be:	8023      	strh	r3, [r4, #0]
 80055c0:	3402      	adds	r4, #2
 80055c2:	0c1b      	lsrs	r3, r3, #16
 80055c4:	7023      	strb	r3, [r4, #0]
                           0x37, 0x07, 0x10, 0x03, 0x0E, 0x09, 0x00 };
        ILI9341_WriteData(data, sizeof(data));
 80055c6:	f107 0314 	add.w	r3, r7, #20
 80055ca:	210f      	movs	r1, #15
 80055cc:	4618      	mov	r0, r3
 80055ce:	f7ff fe93 	bl	80052f8 <ILI9341_WriteData>
    }

    // NEGATIVE GAMMA CORRECTION
    ILI9341_WriteCommand(0xE1);
 80055d2:	20e1      	movs	r0, #225	@ 0xe1
 80055d4:	f7ff fe76 	bl	80052c4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x0E, 0x14, 0x03, 0x11, 0x07, 0x31, 0xC1,
 80055d8:	4b18      	ldr	r3, [pc, #96]	@ (800563c <ILI9341_Init+0x258>)
 80055da:	1d3c      	adds	r4, r7, #4
 80055dc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80055de:	c407      	stmia	r4!, {r0, r1, r2}
 80055e0:	8023      	strh	r3, [r4, #0]
 80055e2:	3402      	adds	r4, #2
 80055e4:	0c1b      	lsrs	r3, r3, #16
 80055e6:	7023      	strb	r3, [r4, #0]
                           0x48, 0x08, 0x0F, 0x0C, 0x31, 0x36, 0x0F };
        ILI9341_WriteData(data, sizeof(data));
 80055e8:	1d3b      	adds	r3, r7, #4
 80055ea:	210f      	movs	r1, #15
 80055ec:	4618      	mov	r0, r3
 80055ee:	f7ff fe83 	bl	80052f8 <ILI9341_WriteData>
    }

    // EXIT SLEEP
    ILI9341_WriteCommand(0x11);
 80055f2:	2011      	movs	r0, #17
 80055f4:	f7ff fe66 	bl	80052c4 <ILI9341_WriteCommand>
    HAL_Delay(120);
 80055f8:	2078      	movs	r0, #120	@ 0x78
 80055fa:	f7fc fd75 	bl	80020e8 <HAL_Delay>

    // TURN ON DISPLAY
    ILI9341_WriteCommand(0x29);
 80055fe:	2029      	movs	r0, #41	@ 0x29
 8005600:	f7ff fe60 	bl	80052c4 <ILI9341_WriteCommand>

    // MADCTL
    ILI9341_WriteCommand(0x36);
 8005604:	2036      	movs	r0, #54	@ 0x36
 8005606:	f7ff fe5d 	bl	80052c4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { ILI9341_ROTATION };
 800560a:	23e8      	movs	r3, #232	@ 0xe8
 800560c:	703b      	strb	r3, [r7, #0]
        ILI9341_WriteData(data, sizeof(data));
 800560e:	463b      	mov	r3, r7
 8005610:	2101      	movs	r1, #1
 8005612:	4618      	mov	r0, r3
 8005614:	f7ff fe70 	bl	80052f8 <ILI9341_WriteData>
    }

    ILI9341_Unselect();
 8005618:	f7ff fe34 	bl	8005284 <ILI9341_Unselect>
}
 800561c:	bf00      	nop
 800561e:	376c      	adds	r7, #108	@ 0x6c
 8005620:	46bd      	mov	sp, r7
 8005622:	bd90      	pop	{r4, r7, pc}
 8005624:	080069bc 	.word	0x080069bc
 8005628:	080069c4 	.word	0x080069c4
 800562c:	080069c8 	.word	0x080069c8
 8005630:	81120364 	.word	0x81120364
 8005634:	080069cc 	.word	0x080069cc
 8005638:	080069d0 	.word	0x080069d0
 800563c:	080069e0 	.word	0x080069e0

08005640 <ILI9341_WriteChar>:
    ILI9341_WriteData(data, sizeof(data));

    ILI9341_Unselect();
}

static void ILI9341_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8005640:	b082      	sub	sp, #8
 8005642:	b580      	push	{r7, lr}
 8005644:	b088      	sub	sp, #32
 8005646:	af00      	add	r7, sp, #0
 8005648:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800564a:	4603      	mov	r3, r0
 800564c:	80fb      	strh	r3, [r7, #6]
 800564e:	460b      	mov	r3, r1
 8005650:	80bb      	strh	r3, [r7, #4]
 8005652:	4613      	mov	r3, r2
 8005654:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ILI9341_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8005656:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800565a:	461a      	mov	r2, r3
 800565c:	88fb      	ldrh	r3, [r7, #6]
 800565e:	4413      	add	r3, r2
 8005660:	b29b      	uxth	r3, r3
 8005662:	3b01      	subs	r3, #1
 8005664:	b29a      	uxth	r2, r3
 8005666:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800566a:	4619      	mov	r1, r3
 800566c:	88bb      	ldrh	r3, [r7, #4]
 800566e:	440b      	add	r3, r1
 8005670:	b29b      	uxth	r3, r3
 8005672:	3b01      	subs	r3, #1
 8005674:	b29b      	uxth	r3, r3
 8005676:	88b9      	ldrh	r1, [r7, #4]
 8005678:	88f8      	ldrh	r0, [r7, #6]
 800567a:	f7ff fe6b 	bl	8005354 <ILI9341_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 800567e:	2300      	movs	r3, #0
 8005680:	61fb      	str	r3, [r7, #28]
 8005682:	e041      	b.n	8005708 <ILI9341_WriteChar+0xc8>
        b = font.data[(ch - 32) * font.height + i];
 8005684:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005686:	78fb      	ldrb	r3, [r7, #3]
 8005688:	3b20      	subs	r3, #32
 800568a:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 800568e:	fb01 f303 	mul.w	r3, r1, r3
 8005692:	4619      	mov	r1, r3
 8005694:	69fb      	ldr	r3, [r7, #28]
 8005696:	440b      	add	r3, r1
 8005698:	005b      	lsls	r3, r3, #1
 800569a:	4413      	add	r3, r2
 800569c:	881b      	ldrh	r3, [r3, #0]
 800569e:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 80056a0:	2300      	movs	r3, #0
 80056a2:	61bb      	str	r3, [r7, #24]
 80056a4:	e027      	b.n	80056f6 <ILI9341_WriteChar+0xb6>
            if((b << j) & 0x8000)  {
 80056a6:	697a      	ldr	r2, [r7, #20]
 80056a8:	69bb      	ldr	r3, [r7, #24]
 80056aa:	fa02 f303 	lsl.w	r3, r2, r3
 80056ae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d00e      	beq.n	80056d4 <ILI9341_WriteChar+0x94>
                uint8_t data[] = { color >> 8, color & 0xFF };
 80056b6:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80056b8:	0a1b      	lsrs	r3, r3, #8
 80056ba:	b29b      	uxth	r3, r3
 80056bc:	b2db      	uxtb	r3, r3
 80056be:	743b      	strb	r3, [r7, #16]
 80056c0:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80056c2:	b2db      	uxtb	r3, r3
 80056c4:	747b      	strb	r3, [r7, #17]
                ILI9341_WriteData(data, sizeof(data));
 80056c6:	f107 0310 	add.w	r3, r7, #16
 80056ca:	2102      	movs	r1, #2
 80056cc:	4618      	mov	r0, r3
 80056ce:	f7ff fe13 	bl	80052f8 <ILI9341_WriteData>
 80056d2:	e00d      	b.n	80056f0 <ILI9341_WriteChar+0xb0>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 80056d4:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80056d6:	0a1b      	lsrs	r3, r3, #8
 80056d8:	b29b      	uxth	r3, r3
 80056da:	b2db      	uxtb	r3, r3
 80056dc:	733b      	strb	r3, [r7, #12]
 80056de:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80056e0:	b2db      	uxtb	r3, r3
 80056e2:	737b      	strb	r3, [r7, #13]
                ILI9341_WriteData(data, sizeof(data));
 80056e4:	f107 030c 	add.w	r3, r7, #12
 80056e8:	2102      	movs	r1, #2
 80056ea:	4618      	mov	r0, r3
 80056ec:	f7ff fe04 	bl	80052f8 <ILI9341_WriteData>
        for(j = 0; j < font.width; j++) {
 80056f0:	69bb      	ldr	r3, [r7, #24]
 80056f2:	3301      	adds	r3, #1
 80056f4:	61bb      	str	r3, [r7, #24]
 80056f6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80056fa:	461a      	mov	r2, r3
 80056fc:	69bb      	ldr	r3, [r7, #24]
 80056fe:	4293      	cmp	r3, r2
 8005700:	d3d1      	bcc.n	80056a6 <ILI9341_WriteChar+0x66>
    for(i = 0; i < font.height; i++) {
 8005702:	69fb      	ldr	r3, [r7, #28]
 8005704:	3301      	adds	r3, #1
 8005706:	61fb      	str	r3, [r7, #28]
 8005708:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800570c:	461a      	mov	r2, r3
 800570e:	69fb      	ldr	r3, [r7, #28]
 8005710:	4293      	cmp	r3, r2
 8005712:	d3b7      	bcc.n	8005684 <ILI9341_WriteChar+0x44>
            }
        }
    }
}
 8005714:	bf00      	nop
 8005716:	bf00      	nop
 8005718:	3720      	adds	r7, #32
 800571a:	46bd      	mov	sp, r7
 800571c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005720:	b002      	add	sp, #8
 8005722:	4770      	bx	lr

08005724 <ILI9341_WriteString>:

void ILI9341_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8005724:	b082      	sub	sp, #8
 8005726:	b580      	push	{r7, lr}
 8005728:	b086      	sub	sp, #24
 800572a:	af04      	add	r7, sp, #16
 800572c:	603a      	str	r2, [r7, #0]
 800572e:	617b      	str	r3, [r7, #20]
 8005730:	4603      	mov	r3, r0
 8005732:	80fb      	strh	r3, [r7, #6]
 8005734:	460b      	mov	r3, r1
 8005736:	80bb      	strh	r3, [r7, #4]
    ILI9341_Select();
 8005738:	f7ff fd98 	bl	800526c <ILI9341_Select>

    while(*str) {
 800573c:	e02e      	b.n	800579c <ILI9341_WriteString+0x78>
        if(x + font.width >= ILI9341_WIDTH) {
 800573e:	88fb      	ldrh	r3, [r7, #6]
 8005740:	7d3a      	ldrb	r2, [r7, #20]
 8005742:	4413      	add	r3, r2
 8005744:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8005748:	db13      	blt.n	8005772 <ILI9341_WriteString+0x4e>
            x = 0;
 800574a:	2300      	movs	r3, #0
 800574c:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 800574e:	7d7b      	ldrb	r3, [r7, #21]
 8005750:	461a      	mov	r2, r3
 8005752:	88bb      	ldrh	r3, [r7, #4]
 8005754:	4413      	add	r3, r2
 8005756:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ILI9341_HEIGHT) {
 8005758:	88bb      	ldrh	r3, [r7, #4]
 800575a:	7d7a      	ldrb	r2, [r7, #21]
 800575c:	4413      	add	r3, r2
 800575e:	2bef      	cmp	r3, #239	@ 0xef
 8005760:	dc21      	bgt.n	80057a6 <ILI9341_WriteString+0x82>
                break;
            }

            if(*str == ' ') {
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	781b      	ldrb	r3, [r3, #0]
 8005766:	2b20      	cmp	r3, #32
 8005768:	d103      	bne.n	8005772 <ILI9341_WriteString+0x4e>
                // skip spaces in the beginning of the new line
                str++;
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	3301      	adds	r3, #1
 800576e:	603b      	str	r3, [r7, #0]
                continue;
 8005770:	e014      	b.n	800579c <ILI9341_WriteString+0x78>
            }
        }

        ILI9341_WriteChar(x, y, *str, font, color, bgcolor);
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	781a      	ldrb	r2, [r3, #0]
 8005776:	88b9      	ldrh	r1, [r7, #4]
 8005778:	88f8      	ldrh	r0, [r7, #6]
 800577a:	8c3b      	ldrh	r3, [r7, #32]
 800577c:	9302      	str	r3, [sp, #8]
 800577e:	8bbb      	ldrh	r3, [r7, #28]
 8005780:	9301      	str	r3, [sp, #4]
 8005782:	69bb      	ldr	r3, [r7, #24]
 8005784:	9300      	str	r3, [sp, #0]
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	f7ff ff5a 	bl	8005640 <ILI9341_WriteChar>
        x += font.width;
 800578c:	7d3b      	ldrb	r3, [r7, #20]
 800578e:	461a      	mov	r2, r3
 8005790:	88fb      	ldrh	r3, [r7, #6]
 8005792:	4413      	add	r3, r2
 8005794:	80fb      	strh	r3, [r7, #6]
        str++;
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	3301      	adds	r3, #1
 800579a:	603b      	str	r3, [r7, #0]
    while(*str) {
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	781b      	ldrb	r3, [r3, #0]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d1cc      	bne.n	800573e <ILI9341_WriteString+0x1a>
 80057a4:	e000      	b.n	80057a8 <ILI9341_WriteString+0x84>
                break;
 80057a6:	bf00      	nop
    }

    ILI9341_Unselect();
 80057a8:	f7ff fd6c 	bl	8005284 <ILI9341_Unselect>
}
 80057ac:	bf00      	nop
 80057ae:	3708      	adds	r7, #8
 80057b0:	46bd      	mov	sp, r7
 80057b2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80057b6:	b002      	add	sp, #8
 80057b8:	4770      	bx	lr
	...

080057bc <ILI9341_FillRectangle>:

void ILI9341_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 80057bc:	b590      	push	{r4, r7, lr}
 80057be:	b085      	sub	sp, #20
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	4604      	mov	r4, r0
 80057c4:	4608      	mov	r0, r1
 80057c6:	4611      	mov	r1, r2
 80057c8:	461a      	mov	r2, r3
 80057ca:	4623      	mov	r3, r4
 80057cc:	80fb      	strh	r3, [r7, #6]
 80057ce:	4603      	mov	r3, r0
 80057d0:	80bb      	strh	r3, [r7, #4]
 80057d2:	460b      	mov	r3, r1
 80057d4:	807b      	strh	r3, [r7, #2]
 80057d6:	4613      	mov	r3, r2
 80057d8:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 80057da:	88fb      	ldrh	r3, [r7, #6]
 80057dc:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80057e0:	d252      	bcs.n	8005888 <ILI9341_FillRectangle+0xcc>
 80057e2:	88bb      	ldrh	r3, [r7, #4]
 80057e4:	2bef      	cmp	r3, #239	@ 0xef
 80057e6:	d84f      	bhi.n	8005888 <ILI9341_FillRectangle+0xcc>
    if((x + w - 1) >= ILI9341_WIDTH) w = ILI9341_WIDTH - x;
 80057e8:	88fa      	ldrh	r2, [r7, #6]
 80057ea:	887b      	ldrh	r3, [r7, #2]
 80057ec:	4413      	add	r3, r2
 80057ee:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80057f2:	dd03      	ble.n	80057fc <ILI9341_FillRectangle+0x40>
 80057f4:	88fb      	ldrh	r3, [r7, #6]
 80057f6:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 80057fa:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ILI9341_HEIGHT) h = ILI9341_HEIGHT - y;
 80057fc:	88ba      	ldrh	r2, [r7, #4]
 80057fe:	883b      	ldrh	r3, [r7, #0]
 8005800:	4413      	add	r3, r2
 8005802:	2bf0      	cmp	r3, #240	@ 0xf0
 8005804:	dd03      	ble.n	800580e <ILI9341_FillRectangle+0x52>
 8005806:	88bb      	ldrh	r3, [r7, #4]
 8005808:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 800580c:	803b      	strh	r3, [r7, #0]

    ILI9341_Select();
 800580e:	f7ff fd2d 	bl	800526c <ILI9341_Select>
    ILI9341_SetAddressWindow(x, y, x+w-1, y+h-1);
 8005812:	88fa      	ldrh	r2, [r7, #6]
 8005814:	887b      	ldrh	r3, [r7, #2]
 8005816:	4413      	add	r3, r2
 8005818:	b29b      	uxth	r3, r3
 800581a:	3b01      	subs	r3, #1
 800581c:	b29c      	uxth	r4, r3
 800581e:	88ba      	ldrh	r2, [r7, #4]
 8005820:	883b      	ldrh	r3, [r7, #0]
 8005822:	4413      	add	r3, r2
 8005824:	b29b      	uxth	r3, r3
 8005826:	3b01      	subs	r3, #1
 8005828:	b29b      	uxth	r3, r3
 800582a:	88b9      	ldrh	r1, [r7, #4]
 800582c:	88f8      	ldrh	r0, [r7, #6]
 800582e:	4622      	mov	r2, r4
 8005830:	f7ff fd90 	bl	8005354 <ILI9341_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8005834:	8c3b      	ldrh	r3, [r7, #32]
 8005836:	0a1b      	lsrs	r3, r3, #8
 8005838:	b29b      	uxth	r3, r3
 800583a:	b2db      	uxtb	r3, r3
 800583c:	733b      	strb	r3, [r7, #12]
 800583e:	8c3b      	ldrh	r3, [r7, #32]
 8005840:	b2db      	uxtb	r3, r3
 8005842:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 8005844:	2201      	movs	r2, #1
 8005846:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800584a:	4811      	ldr	r0, [pc, #68]	@ (8005890 <ILI9341_FillRectangle+0xd4>)
 800584c:	f7fd fb0a 	bl	8002e64 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8005850:	883b      	ldrh	r3, [r7, #0]
 8005852:	80bb      	strh	r3, [r7, #4]
 8005854:	e012      	b.n	800587c <ILI9341_FillRectangle+0xc0>
        for(x = w; x > 0; x--) {
 8005856:	887b      	ldrh	r3, [r7, #2]
 8005858:	80fb      	strh	r3, [r7, #6]
 800585a:	e009      	b.n	8005870 <ILI9341_FillRectangle+0xb4>
            HAL_SPI_Transmit(&ILI9341_SPI_PORT, data, sizeof(data), 100);
 800585c:	f107 010c 	add.w	r1, r7, #12
 8005860:	2364      	movs	r3, #100	@ 0x64
 8005862:	2202      	movs	r2, #2
 8005864:	480b      	ldr	r0, [pc, #44]	@ (8005894 <ILI9341_FillRectangle+0xd8>)
 8005866:	f7ff f81c 	bl	80048a2 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 800586a:	88fb      	ldrh	r3, [r7, #6]
 800586c:	3b01      	subs	r3, #1
 800586e:	80fb      	strh	r3, [r7, #6]
 8005870:	88fb      	ldrh	r3, [r7, #6]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d1f2      	bne.n	800585c <ILI9341_FillRectangle+0xa0>
    for(y = h; y > 0; y--) {
 8005876:	88bb      	ldrh	r3, [r7, #4]
 8005878:	3b01      	subs	r3, #1
 800587a:	80bb      	strh	r3, [r7, #4]
 800587c:	88bb      	ldrh	r3, [r7, #4]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d1e9      	bne.n	8005856 <ILI9341_FillRectangle+0x9a>
        }
    }

    ILI9341_Unselect();
 8005882:	f7ff fcff 	bl	8005284 <ILI9341_Unselect>
 8005886:	e000      	b.n	800588a <ILI9341_FillRectangle+0xce>
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 8005888:	bf00      	nop
}
 800588a:	3714      	adds	r7, #20
 800588c:	46bd      	mov	sp, r7
 800588e:	bd90      	pop	{r4, r7, pc}
 8005890:	40020800 	.word	0x40020800
 8005894:	20000154 	.word	0x20000154

08005898 <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color) {
 8005898:	b580      	push	{r7, lr}
 800589a:	b084      	sub	sp, #16
 800589c:	af02      	add	r7, sp, #8
 800589e:	4603      	mov	r3, r0
 80058a0:	80fb      	strh	r3, [r7, #6]
    ILI9341_FillRectangle(0, 0, ILI9341_WIDTH, ILI9341_HEIGHT, color);
 80058a2:	88fb      	ldrh	r3, [r7, #6]
 80058a4:	9300      	str	r3, [sp, #0]
 80058a6:	23f0      	movs	r3, #240	@ 0xf0
 80058a8:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80058ac:	2100      	movs	r1, #0
 80058ae:	2000      	movs	r0, #0
 80058b0:	f7ff ff84 	bl	80057bc <ILI9341_FillRectangle>
}
 80058b4:	bf00      	nop
 80058b6:	3708      	adds	r7, #8
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}

080058bc <ILI9341_DrawImage>:

void ILI9341_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t* data) {
 80058bc:	b590      	push	{r4, r7, lr}
 80058be:	b083      	sub	sp, #12
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	4604      	mov	r4, r0
 80058c4:	4608      	mov	r0, r1
 80058c6:	4611      	mov	r1, r2
 80058c8:	461a      	mov	r2, r3
 80058ca:	4623      	mov	r3, r4
 80058cc:	80fb      	strh	r3, [r7, #6]
 80058ce:	4603      	mov	r3, r0
 80058d0:	80bb      	strh	r3, [r7, #4]
 80058d2:	460b      	mov	r3, r1
 80058d4:	807b      	strh	r3, [r7, #2]
 80058d6:	4613      	mov	r3, r2
 80058d8:	803b      	strh	r3, [r7, #0]
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 80058da:	88fb      	ldrh	r3, [r7, #6]
 80058dc:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80058e0:	d22c      	bcs.n	800593c <ILI9341_DrawImage+0x80>
 80058e2:	88bb      	ldrh	r3, [r7, #4]
 80058e4:	2bef      	cmp	r3, #239	@ 0xef
 80058e6:	d829      	bhi.n	800593c <ILI9341_DrawImage+0x80>
    if((x + w - 1) >= ILI9341_WIDTH) return;
 80058e8:	88fa      	ldrh	r2, [r7, #6]
 80058ea:	887b      	ldrh	r3, [r7, #2]
 80058ec:	4413      	add	r3, r2
 80058ee:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80058f2:	dc25      	bgt.n	8005940 <ILI9341_DrawImage+0x84>
    if((y + h - 1) >= ILI9341_HEIGHT) return;
 80058f4:	88ba      	ldrh	r2, [r7, #4]
 80058f6:	883b      	ldrh	r3, [r7, #0]
 80058f8:	4413      	add	r3, r2
 80058fa:	2bf0      	cmp	r3, #240	@ 0xf0
 80058fc:	dc22      	bgt.n	8005944 <ILI9341_DrawImage+0x88>

    ILI9341_Select();
 80058fe:	f7ff fcb5 	bl	800526c <ILI9341_Select>
    ILI9341_SetAddressWindow(x, y, x+w-1, y+h-1);
 8005902:	88fa      	ldrh	r2, [r7, #6]
 8005904:	887b      	ldrh	r3, [r7, #2]
 8005906:	4413      	add	r3, r2
 8005908:	b29b      	uxth	r3, r3
 800590a:	3b01      	subs	r3, #1
 800590c:	b29c      	uxth	r4, r3
 800590e:	88ba      	ldrh	r2, [r7, #4]
 8005910:	883b      	ldrh	r3, [r7, #0]
 8005912:	4413      	add	r3, r2
 8005914:	b29b      	uxth	r3, r3
 8005916:	3b01      	subs	r3, #1
 8005918:	b29b      	uxth	r3, r3
 800591a:	88b9      	ldrh	r1, [r7, #4]
 800591c:	88f8      	ldrh	r0, [r7, #6]
 800591e:	4622      	mov	r2, r4
 8005920:	f7ff fd18 	bl	8005354 <ILI9341_SetAddressWindow>
    ILI9341_WriteData((uint8_t*)data, sizeof(uint16_t)*w*h);
 8005924:	887b      	ldrh	r3, [r7, #2]
 8005926:	883a      	ldrh	r2, [r7, #0]
 8005928:	fb02 f303 	mul.w	r3, r2, r3
 800592c:	005b      	lsls	r3, r3, #1
 800592e:	4619      	mov	r1, r3
 8005930:	69b8      	ldr	r0, [r7, #24]
 8005932:	f7ff fce1 	bl	80052f8 <ILI9341_WriteData>
    ILI9341_Unselect();
 8005936:	f7ff fca5 	bl	8005284 <ILI9341_Unselect>
 800593a:	e004      	b.n	8005946 <ILI9341_DrawImage+0x8a>
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 800593c:	bf00      	nop
 800593e:	e002      	b.n	8005946 <ILI9341_DrawImage+0x8a>
    if((x + w - 1) >= ILI9341_WIDTH) return;
 8005940:	bf00      	nop
 8005942:	e000      	b.n	8005946 <ILI9341_DrawImage+0x8a>
    if((y + h - 1) >= ILI9341_HEIGHT) return;
 8005944:	bf00      	nop
}
 8005946:	370c      	adds	r7, #12
 8005948:	46bd      	mov	sp, r7
 800594a:	bd90      	pop	{r4, r7, pc}

0800594c <srand>:
 800594c:	b538      	push	{r3, r4, r5, lr}
 800594e:	4b10      	ldr	r3, [pc, #64]	@ (8005990 <srand+0x44>)
 8005950:	681d      	ldr	r5, [r3, #0]
 8005952:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8005954:	4604      	mov	r4, r0
 8005956:	b9b3      	cbnz	r3, 8005986 <srand+0x3a>
 8005958:	2018      	movs	r0, #24
 800595a:	f000 fa4d 	bl	8005df8 <malloc>
 800595e:	4602      	mov	r2, r0
 8005960:	6328      	str	r0, [r5, #48]	@ 0x30
 8005962:	b920      	cbnz	r0, 800596e <srand+0x22>
 8005964:	4b0b      	ldr	r3, [pc, #44]	@ (8005994 <srand+0x48>)
 8005966:	480c      	ldr	r0, [pc, #48]	@ (8005998 <srand+0x4c>)
 8005968:	2146      	movs	r1, #70	@ 0x46
 800596a:	f000 f9dd 	bl	8005d28 <__assert_func>
 800596e:	490b      	ldr	r1, [pc, #44]	@ (800599c <srand+0x50>)
 8005970:	4b0b      	ldr	r3, [pc, #44]	@ (80059a0 <srand+0x54>)
 8005972:	e9c0 1300 	strd	r1, r3, [r0]
 8005976:	4b0b      	ldr	r3, [pc, #44]	@ (80059a4 <srand+0x58>)
 8005978:	6083      	str	r3, [r0, #8]
 800597a:	230b      	movs	r3, #11
 800597c:	8183      	strh	r3, [r0, #12]
 800597e:	2100      	movs	r1, #0
 8005980:	2001      	movs	r0, #1
 8005982:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8005986:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8005988:	2200      	movs	r2, #0
 800598a:	611c      	str	r4, [r3, #16]
 800598c:	615a      	str	r2, [r3, #20]
 800598e:	bd38      	pop	{r3, r4, r5, pc}
 8005990:	20000034 	.word	0x20000034
 8005994:	080639bc 	.word	0x080639bc
 8005998:	080639d3 	.word	0x080639d3
 800599c:	abcd330e 	.word	0xabcd330e
 80059a0:	e66d1234 	.word	0xe66d1234
 80059a4:	0005deec 	.word	0x0005deec

080059a8 <rand>:
 80059a8:	4b16      	ldr	r3, [pc, #88]	@ (8005a04 <rand+0x5c>)
 80059aa:	b510      	push	{r4, lr}
 80059ac:	681c      	ldr	r4, [r3, #0]
 80059ae:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80059b0:	b9b3      	cbnz	r3, 80059e0 <rand+0x38>
 80059b2:	2018      	movs	r0, #24
 80059b4:	f000 fa20 	bl	8005df8 <malloc>
 80059b8:	4602      	mov	r2, r0
 80059ba:	6320      	str	r0, [r4, #48]	@ 0x30
 80059bc:	b920      	cbnz	r0, 80059c8 <rand+0x20>
 80059be:	4b12      	ldr	r3, [pc, #72]	@ (8005a08 <rand+0x60>)
 80059c0:	4812      	ldr	r0, [pc, #72]	@ (8005a0c <rand+0x64>)
 80059c2:	2152      	movs	r1, #82	@ 0x52
 80059c4:	f000 f9b0 	bl	8005d28 <__assert_func>
 80059c8:	4911      	ldr	r1, [pc, #68]	@ (8005a10 <rand+0x68>)
 80059ca:	4b12      	ldr	r3, [pc, #72]	@ (8005a14 <rand+0x6c>)
 80059cc:	e9c0 1300 	strd	r1, r3, [r0]
 80059d0:	4b11      	ldr	r3, [pc, #68]	@ (8005a18 <rand+0x70>)
 80059d2:	6083      	str	r3, [r0, #8]
 80059d4:	230b      	movs	r3, #11
 80059d6:	8183      	strh	r3, [r0, #12]
 80059d8:	2100      	movs	r1, #0
 80059da:	2001      	movs	r0, #1
 80059dc:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80059e0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80059e2:	480e      	ldr	r0, [pc, #56]	@ (8005a1c <rand+0x74>)
 80059e4:	690b      	ldr	r3, [r1, #16]
 80059e6:	694c      	ldr	r4, [r1, #20]
 80059e8:	4a0d      	ldr	r2, [pc, #52]	@ (8005a20 <rand+0x78>)
 80059ea:	4358      	muls	r0, r3
 80059ec:	fb02 0004 	mla	r0, r2, r4, r0
 80059f0:	fba3 3202 	umull	r3, r2, r3, r2
 80059f4:	3301      	adds	r3, #1
 80059f6:	eb40 0002 	adc.w	r0, r0, r2
 80059fa:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80059fe:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8005a02:	bd10      	pop	{r4, pc}
 8005a04:	20000034 	.word	0x20000034
 8005a08:	080639bc 	.word	0x080639bc
 8005a0c:	080639d3 	.word	0x080639d3
 8005a10:	abcd330e 	.word	0xabcd330e
 8005a14:	e66d1234 	.word	0xe66d1234
 8005a18:	0005deec 	.word	0x0005deec
 8005a1c:	5851f42d 	.word	0x5851f42d
 8005a20:	4c957f2d 	.word	0x4c957f2d

08005a24 <std>:
 8005a24:	2300      	movs	r3, #0
 8005a26:	b510      	push	{r4, lr}
 8005a28:	4604      	mov	r4, r0
 8005a2a:	e9c0 3300 	strd	r3, r3, [r0]
 8005a2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005a32:	6083      	str	r3, [r0, #8]
 8005a34:	8181      	strh	r1, [r0, #12]
 8005a36:	6643      	str	r3, [r0, #100]	@ 0x64
 8005a38:	81c2      	strh	r2, [r0, #14]
 8005a3a:	6183      	str	r3, [r0, #24]
 8005a3c:	4619      	mov	r1, r3
 8005a3e:	2208      	movs	r2, #8
 8005a40:	305c      	adds	r0, #92	@ 0x5c
 8005a42:	f000 f8f4 	bl	8005c2e <memset>
 8005a46:	4b0d      	ldr	r3, [pc, #52]	@ (8005a7c <std+0x58>)
 8005a48:	6263      	str	r3, [r4, #36]	@ 0x24
 8005a4a:	4b0d      	ldr	r3, [pc, #52]	@ (8005a80 <std+0x5c>)
 8005a4c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005a4e:	4b0d      	ldr	r3, [pc, #52]	@ (8005a84 <std+0x60>)
 8005a50:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005a52:	4b0d      	ldr	r3, [pc, #52]	@ (8005a88 <std+0x64>)
 8005a54:	6323      	str	r3, [r4, #48]	@ 0x30
 8005a56:	4b0d      	ldr	r3, [pc, #52]	@ (8005a8c <std+0x68>)
 8005a58:	6224      	str	r4, [r4, #32]
 8005a5a:	429c      	cmp	r4, r3
 8005a5c:	d006      	beq.n	8005a6c <std+0x48>
 8005a5e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005a62:	4294      	cmp	r4, r2
 8005a64:	d002      	beq.n	8005a6c <std+0x48>
 8005a66:	33d0      	adds	r3, #208	@ 0xd0
 8005a68:	429c      	cmp	r4, r3
 8005a6a:	d105      	bne.n	8005a78 <std+0x54>
 8005a6c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005a70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a74:	f000 b954 	b.w	8005d20 <__retarget_lock_init_recursive>
 8005a78:	bd10      	pop	{r4, pc}
 8005a7a:	bf00      	nop
 8005a7c:	08005ba9 	.word	0x08005ba9
 8005a80:	08005bcb 	.word	0x08005bcb
 8005a84:	08005c03 	.word	0x08005c03
 8005a88:	08005c27 	.word	0x08005c27
 8005a8c:	20000548 	.word	0x20000548

08005a90 <stdio_exit_handler>:
 8005a90:	4a02      	ldr	r2, [pc, #8]	@ (8005a9c <stdio_exit_handler+0xc>)
 8005a92:	4903      	ldr	r1, [pc, #12]	@ (8005aa0 <stdio_exit_handler+0x10>)
 8005a94:	4803      	ldr	r0, [pc, #12]	@ (8005aa4 <stdio_exit_handler+0x14>)
 8005a96:	f000 b869 	b.w	8005b6c <_fwalk_sglue>
 8005a9a:	bf00      	nop
 8005a9c:	20000028 	.word	0x20000028
 8005aa0:	0800606d 	.word	0x0800606d
 8005aa4:	20000038 	.word	0x20000038

08005aa8 <cleanup_stdio>:
 8005aa8:	6841      	ldr	r1, [r0, #4]
 8005aaa:	4b0c      	ldr	r3, [pc, #48]	@ (8005adc <cleanup_stdio+0x34>)
 8005aac:	4299      	cmp	r1, r3
 8005aae:	b510      	push	{r4, lr}
 8005ab0:	4604      	mov	r4, r0
 8005ab2:	d001      	beq.n	8005ab8 <cleanup_stdio+0x10>
 8005ab4:	f000 fada 	bl	800606c <_fflush_r>
 8005ab8:	68a1      	ldr	r1, [r4, #8]
 8005aba:	4b09      	ldr	r3, [pc, #36]	@ (8005ae0 <cleanup_stdio+0x38>)
 8005abc:	4299      	cmp	r1, r3
 8005abe:	d002      	beq.n	8005ac6 <cleanup_stdio+0x1e>
 8005ac0:	4620      	mov	r0, r4
 8005ac2:	f000 fad3 	bl	800606c <_fflush_r>
 8005ac6:	68e1      	ldr	r1, [r4, #12]
 8005ac8:	4b06      	ldr	r3, [pc, #24]	@ (8005ae4 <cleanup_stdio+0x3c>)
 8005aca:	4299      	cmp	r1, r3
 8005acc:	d004      	beq.n	8005ad8 <cleanup_stdio+0x30>
 8005ace:	4620      	mov	r0, r4
 8005ad0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ad4:	f000 baca 	b.w	800606c <_fflush_r>
 8005ad8:	bd10      	pop	{r4, pc}
 8005ada:	bf00      	nop
 8005adc:	20000548 	.word	0x20000548
 8005ae0:	200005b0 	.word	0x200005b0
 8005ae4:	20000618 	.word	0x20000618

08005ae8 <global_stdio_init.part.0>:
 8005ae8:	b510      	push	{r4, lr}
 8005aea:	4b0b      	ldr	r3, [pc, #44]	@ (8005b18 <global_stdio_init.part.0+0x30>)
 8005aec:	4c0b      	ldr	r4, [pc, #44]	@ (8005b1c <global_stdio_init.part.0+0x34>)
 8005aee:	4a0c      	ldr	r2, [pc, #48]	@ (8005b20 <global_stdio_init.part.0+0x38>)
 8005af0:	601a      	str	r2, [r3, #0]
 8005af2:	4620      	mov	r0, r4
 8005af4:	2200      	movs	r2, #0
 8005af6:	2104      	movs	r1, #4
 8005af8:	f7ff ff94 	bl	8005a24 <std>
 8005afc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005b00:	2201      	movs	r2, #1
 8005b02:	2109      	movs	r1, #9
 8005b04:	f7ff ff8e 	bl	8005a24 <std>
 8005b08:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005b0c:	2202      	movs	r2, #2
 8005b0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b12:	2112      	movs	r1, #18
 8005b14:	f7ff bf86 	b.w	8005a24 <std>
 8005b18:	20000680 	.word	0x20000680
 8005b1c:	20000548 	.word	0x20000548
 8005b20:	08005a91 	.word	0x08005a91

08005b24 <__sfp_lock_acquire>:
 8005b24:	4801      	ldr	r0, [pc, #4]	@ (8005b2c <__sfp_lock_acquire+0x8>)
 8005b26:	f000 b8fc 	b.w	8005d22 <__retarget_lock_acquire_recursive>
 8005b2a:	bf00      	nop
 8005b2c:	20000689 	.word	0x20000689

08005b30 <__sfp_lock_release>:
 8005b30:	4801      	ldr	r0, [pc, #4]	@ (8005b38 <__sfp_lock_release+0x8>)
 8005b32:	f000 b8f7 	b.w	8005d24 <__retarget_lock_release_recursive>
 8005b36:	bf00      	nop
 8005b38:	20000689 	.word	0x20000689

08005b3c <__sinit>:
 8005b3c:	b510      	push	{r4, lr}
 8005b3e:	4604      	mov	r4, r0
 8005b40:	f7ff fff0 	bl	8005b24 <__sfp_lock_acquire>
 8005b44:	6a23      	ldr	r3, [r4, #32]
 8005b46:	b11b      	cbz	r3, 8005b50 <__sinit+0x14>
 8005b48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b4c:	f7ff bff0 	b.w	8005b30 <__sfp_lock_release>
 8005b50:	4b04      	ldr	r3, [pc, #16]	@ (8005b64 <__sinit+0x28>)
 8005b52:	6223      	str	r3, [r4, #32]
 8005b54:	4b04      	ldr	r3, [pc, #16]	@ (8005b68 <__sinit+0x2c>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d1f5      	bne.n	8005b48 <__sinit+0xc>
 8005b5c:	f7ff ffc4 	bl	8005ae8 <global_stdio_init.part.0>
 8005b60:	e7f2      	b.n	8005b48 <__sinit+0xc>
 8005b62:	bf00      	nop
 8005b64:	08005aa9 	.word	0x08005aa9
 8005b68:	20000680 	.word	0x20000680

08005b6c <_fwalk_sglue>:
 8005b6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b70:	4607      	mov	r7, r0
 8005b72:	4688      	mov	r8, r1
 8005b74:	4614      	mov	r4, r2
 8005b76:	2600      	movs	r6, #0
 8005b78:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005b7c:	f1b9 0901 	subs.w	r9, r9, #1
 8005b80:	d505      	bpl.n	8005b8e <_fwalk_sglue+0x22>
 8005b82:	6824      	ldr	r4, [r4, #0]
 8005b84:	2c00      	cmp	r4, #0
 8005b86:	d1f7      	bne.n	8005b78 <_fwalk_sglue+0xc>
 8005b88:	4630      	mov	r0, r6
 8005b8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b8e:	89ab      	ldrh	r3, [r5, #12]
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	d907      	bls.n	8005ba4 <_fwalk_sglue+0x38>
 8005b94:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005b98:	3301      	adds	r3, #1
 8005b9a:	d003      	beq.n	8005ba4 <_fwalk_sglue+0x38>
 8005b9c:	4629      	mov	r1, r5
 8005b9e:	4638      	mov	r0, r7
 8005ba0:	47c0      	blx	r8
 8005ba2:	4306      	orrs	r6, r0
 8005ba4:	3568      	adds	r5, #104	@ 0x68
 8005ba6:	e7e9      	b.n	8005b7c <_fwalk_sglue+0x10>

08005ba8 <__sread>:
 8005ba8:	b510      	push	{r4, lr}
 8005baa:	460c      	mov	r4, r1
 8005bac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bb0:	f000 f868 	bl	8005c84 <_read_r>
 8005bb4:	2800      	cmp	r0, #0
 8005bb6:	bfab      	itete	ge
 8005bb8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005bba:	89a3      	ldrhlt	r3, [r4, #12]
 8005bbc:	181b      	addge	r3, r3, r0
 8005bbe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005bc2:	bfac      	ite	ge
 8005bc4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005bc6:	81a3      	strhlt	r3, [r4, #12]
 8005bc8:	bd10      	pop	{r4, pc}

08005bca <__swrite>:
 8005bca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bce:	461f      	mov	r7, r3
 8005bd0:	898b      	ldrh	r3, [r1, #12]
 8005bd2:	05db      	lsls	r3, r3, #23
 8005bd4:	4605      	mov	r5, r0
 8005bd6:	460c      	mov	r4, r1
 8005bd8:	4616      	mov	r6, r2
 8005bda:	d505      	bpl.n	8005be8 <__swrite+0x1e>
 8005bdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005be0:	2302      	movs	r3, #2
 8005be2:	2200      	movs	r2, #0
 8005be4:	f000 f83c 	bl	8005c60 <_lseek_r>
 8005be8:	89a3      	ldrh	r3, [r4, #12]
 8005bea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005bee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005bf2:	81a3      	strh	r3, [r4, #12]
 8005bf4:	4632      	mov	r2, r6
 8005bf6:	463b      	mov	r3, r7
 8005bf8:	4628      	mov	r0, r5
 8005bfa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005bfe:	f000 b853 	b.w	8005ca8 <_write_r>

08005c02 <__sseek>:
 8005c02:	b510      	push	{r4, lr}
 8005c04:	460c      	mov	r4, r1
 8005c06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c0a:	f000 f829 	bl	8005c60 <_lseek_r>
 8005c0e:	1c43      	adds	r3, r0, #1
 8005c10:	89a3      	ldrh	r3, [r4, #12]
 8005c12:	bf15      	itete	ne
 8005c14:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005c16:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005c1a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005c1e:	81a3      	strheq	r3, [r4, #12]
 8005c20:	bf18      	it	ne
 8005c22:	81a3      	strhne	r3, [r4, #12]
 8005c24:	bd10      	pop	{r4, pc}

08005c26 <__sclose>:
 8005c26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c2a:	f000 b809 	b.w	8005c40 <_close_r>

08005c2e <memset>:
 8005c2e:	4402      	add	r2, r0
 8005c30:	4603      	mov	r3, r0
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d100      	bne.n	8005c38 <memset+0xa>
 8005c36:	4770      	bx	lr
 8005c38:	f803 1b01 	strb.w	r1, [r3], #1
 8005c3c:	e7f9      	b.n	8005c32 <memset+0x4>
	...

08005c40 <_close_r>:
 8005c40:	b538      	push	{r3, r4, r5, lr}
 8005c42:	4d06      	ldr	r5, [pc, #24]	@ (8005c5c <_close_r+0x1c>)
 8005c44:	2300      	movs	r3, #0
 8005c46:	4604      	mov	r4, r0
 8005c48:	4608      	mov	r0, r1
 8005c4a:	602b      	str	r3, [r5, #0]
 8005c4c:	f7fb fb85 	bl	800135a <_close>
 8005c50:	1c43      	adds	r3, r0, #1
 8005c52:	d102      	bne.n	8005c5a <_close_r+0x1a>
 8005c54:	682b      	ldr	r3, [r5, #0]
 8005c56:	b103      	cbz	r3, 8005c5a <_close_r+0x1a>
 8005c58:	6023      	str	r3, [r4, #0]
 8005c5a:	bd38      	pop	{r3, r4, r5, pc}
 8005c5c:	20000684 	.word	0x20000684

08005c60 <_lseek_r>:
 8005c60:	b538      	push	{r3, r4, r5, lr}
 8005c62:	4d07      	ldr	r5, [pc, #28]	@ (8005c80 <_lseek_r+0x20>)
 8005c64:	4604      	mov	r4, r0
 8005c66:	4608      	mov	r0, r1
 8005c68:	4611      	mov	r1, r2
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	602a      	str	r2, [r5, #0]
 8005c6e:	461a      	mov	r2, r3
 8005c70:	f7fb fb9a 	bl	80013a8 <_lseek>
 8005c74:	1c43      	adds	r3, r0, #1
 8005c76:	d102      	bne.n	8005c7e <_lseek_r+0x1e>
 8005c78:	682b      	ldr	r3, [r5, #0]
 8005c7a:	b103      	cbz	r3, 8005c7e <_lseek_r+0x1e>
 8005c7c:	6023      	str	r3, [r4, #0]
 8005c7e:	bd38      	pop	{r3, r4, r5, pc}
 8005c80:	20000684 	.word	0x20000684

08005c84 <_read_r>:
 8005c84:	b538      	push	{r3, r4, r5, lr}
 8005c86:	4d07      	ldr	r5, [pc, #28]	@ (8005ca4 <_read_r+0x20>)
 8005c88:	4604      	mov	r4, r0
 8005c8a:	4608      	mov	r0, r1
 8005c8c:	4611      	mov	r1, r2
 8005c8e:	2200      	movs	r2, #0
 8005c90:	602a      	str	r2, [r5, #0]
 8005c92:	461a      	mov	r2, r3
 8005c94:	f7fb fb28 	bl	80012e8 <_read>
 8005c98:	1c43      	adds	r3, r0, #1
 8005c9a:	d102      	bne.n	8005ca2 <_read_r+0x1e>
 8005c9c:	682b      	ldr	r3, [r5, #0]
 8005c9e:	b103      	cbz	r3, 8005ca2 <_read_r+0x1e>
 8005ca0:	6023      	str	r3, [r4, #0]
 8005ca2:	bd38      	pop	{r3, r4, r5, pc}
 8005ca4:	20000684 	.word	0x20000684

08005ca8 <_write_r>:
 8005ca8:	b538      	push	{r3, r4, r5, lr}
 8005caa:	4d07      	ldr	r5, [pc, #28]	@ (8005cc8 <_write_r+0x20>)
 8005cac:	4604      	mov	r4, r0
 8005cae:	4608      	mov	r0, r1
 8005cb0:	4611      	mov	r1, r2
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	602a      	str	r2, [r5, #0]
 8005cb6:	461a      	mov	r2, r3
 8005cb8:	f7fb fb33 	bl	8001322 <_write>
 8005cbc:	1c43      	adds	r3, r0, #1
 8005cbe:	d102      	bne.n	8005cc6 <_write_r+0x1e>
 8005cc0:	682b      	ldr	r3, [r5, #0]
 8005cc2:	b103      	cbz	r3, 8005cc6 <_write_r+0x1e>
 8005cc4:	6023      	str	r3, [r4, #0]
 8005cc6:	bd38      	pop	{r3, r4, r5, pc}
 8005cc8:	20000684 	.word	0x20000684

08005ccc <__errno>:
 8005ccc:	4b01      	ldr	r3, [pc, #4]	@ (8005cd4 <__errno+0x8>)
 8005cce:	6818      	ldr	r0, [r3, #0]
 8005cd0:	4770      	bx	lr
 8005cd2:	bf00      	nop
 8005cd4:	20000034 	.word	0x20000034

08005cd8 <__libc_init_array>:
 8005cd8:	b570      	push	{r4, r5, r6, lr}
 8005cda:	4d0d      	ldr	r5, [pc, #52]	@ (8005d10 <__libc_init_array+0x38>)
 8005cdc:	4c0d      	ldr	r4, [pc, #52]	@ (8005d14 <__libc_init_array+0x3c>)
 8005cde:	1b64      	subs	r4, r4, r5
 8005ce0:	10a4      	asrs	r4, r4, #2
 8005ce2:	2600      	movs	r6, #0
 8005ce4:	42a6      	cmp	r6, r4
 8005ce6:	d109      	bne.n	8005cfc <__libc_init_array+0x24>
 8005ce8:	4d0b      	ldr	r5, [pc, #44]	@ (8005d18 <__libc_init_array+0x40>)
 8005cea:	4c0c      	ldr	r4, [pc, #48]	@ (8005d1c <__libc_init_array+0x44>)
 8005cec:	f000 fe38 	bl	8006960 <_init>
 8005cf0:	1b64      	subs	r4, r4, r5
 8005cf2:	10a4      	asrs	r4, r4, #2
 8005cf4:	2600      	movs	r6, #0
 8005cf6:	42a6      	cmp	r6, r4
 8005cf8:	d105      	bne.n	8005d06 <__libc_init_array+0x2e>
 8005cfa:	bd70      	pop	{r4, r5, r6, pc}
 8005cfc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d00:	4798      	blx	r3
 8005d02:	3601      	adds	r6, #1
 8005d04:	e7ee      	b.n	8005ce4 <__libc_init_array+0xc>
 8005d06:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d0a:	4798      	blx	r3
 8005d0c:	3601      	adds	r6, #1
 8005d0e:	e7f2      	b.n	8005cf6 <__libc_init_array+0x1e>
 8005d10:	08063aa4 	.word	0x08063aa4
 8005d14:	08063aa4 	.word	0x08063aa4
 8005d18:	08063aa4 	.word	0x08063aa4
 8005d1c:	08063aa8 	.word	0x08063aa8

08005d20 <__retarget_lock_init_recursive>:
 8005d20:	4770      	bx	lr

08005d22 <__retarget_lock_acquire_recursive>:
 8005d22:	4770      	bx	lr

08005d24 <__retarget_lock_release_recursive>:
 8005d24:	4770      	bx	lr
	...

08005d28 <__assert_func>:
 8005d28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005d2a:	4614      	mov	r4, r2
 8005d2c:	461a      	mov	r2, r3
 8005d2e:	4b09      	ldr	r3, [pc, #36]	@ (8005d54 <__assert_func+0x2c>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4605      	mov	r5, r0
 8005d34:	68d8      	ldr	r0, [r3, #12]
 8005d36:	b14c      	cbz	r4, 8005d4c <__assert_func+0x24>
 8005d38:	4b07      	ldr	r3, [pc, #28]	@ (8005d58 <__assert_func+0x30>)
 8005d3a:	9100      	str	r1, [sp, #0]
 8005d3c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005d40:	4906      	ldr	r1, [pc, #24]	@ (8005d5c <__assert_func+0x34>)
 8005d42:	462b      	mov	r3, r5
 8005d44:	f000 f9ba 	bl	80060bc <fiprintf>
 8005d48:	f000 f9da 	bl	8006100 <abort>
 8005d4c:	4b04      	ldr	r3, [pc, #16]	@ (8005d60 <__assert_func+0x38>)
 8005d4e:	461c      	mov	r4, r3
 8005d50:	e7f3      	b.n	8005d3a <__assert_func+0x12>
 8005d52:	bf00      	nop
 8005d54:	20000034 	.word	0x20000034
 8005d58:	08063a2b 	.word	0x08063a2b
 8005d5c:	08063a38 	.word	0x08063a38
 8005d60:	08063a66 	.word	0x08063a66

08005d64 <_free_r>:
 8005d64:	b538      	push	{r3, r4, r5, lr}
 8005d66:	4605      	mov	r5, r0
 8005d68:	2900      	cmp	r1, #0
 8005d6a:	d041      	beq.n	8005df0 <_free_r+0x8c>
 8005d6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d70:	1f0c      	subs	r4, r1, #4
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	bfb8      	it	lt
 8005d76:	18e4      	addlt	r4, r4, r3
 8005d78:	f000 f8e8 	bl	8005f4c <__malloc_lock>
 8005d7c:	4a1d      	ldr	r2, [pc, #116]	@ (8005df4 <_free_r+0x90>)
 8005d7e:	6813      	ldr	r3, [r2, #0]
 8005d80:	b933      	cbnz	r3, 8005d90 <_free_r+0x2c>
 8005d82:	6063      	str	r3, [r4, #4]
 8005d84:	6014      	str	r4, [r2, #0]
 8005d86:	4628      	mov	r0, r5
 8005d88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005d8c:	f000 b8e4 	b.w	8005f58 <__malloc_unlock>
 8005d90:	42a3      	cmp	r3, r4
 8005d92:	d908      	bls.n	8005da6 <_free_r+0x42>
 8005d94:	6820      	ldr	r0, [r4, #0]
 8005d96:	1821      	adds	r1, r4, r0
 8005d98:	428b      	cmp	r3, r1
 8005d9a:	bf01      	itttt	eq
 8005d9c:	6819      	ldreq	r1, [r3, #0]
 8005d9e:	685b      	ldreq	r3, [r3, #4]
 8005da0:	1809      	addeq	r1, r1, r0
 8005da2:	6021      	streq	r1, [r4, #0]
 8005da4:	e7ed      	b.n	8005d82 <_free_r+0x1e>
 8005da6:	461a      	mov	r2, r3
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	b10b      	cbz	r3, 8005db0 <_free_r+0x4c>
 8005dac:	42a3      	cmp	r3, r4
 8005dae:	d9fa      	bls.n	8005da6 <_free_r+0x42>
 8005db0:	6811      	ldr	r1, [r2, #0]
 8005db2:	1850      	adds	r0, r2, r1
 8005db4:	42a0      	cmp	r0, r4
 8005db6:	d10b      	bne.n	8005dd0 <_free_r+0x6c>
 8005db8:	6820      	ldr	r0, [r4, #0]
 8005dba:	4401      	add	r1, r0
 8005dbc:	1850      	adds	r0, r2, r1
 8005dbe:	4283      	cmp	r3, r0
 8005dc0:	6011      	str	r1, [r2, #0]
 8005dc2:	d1e0      	bne.n	8005d86 <_free_r+0x22>
 8005dc4:	6818      	ldr	r0, [r3, #0]
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	6053      	str	r3, [r2, #4]
 8005dca:	4408      	add	r0, r1
 8005dcc:	6010      	str	r0, [r2, #0]
 8005dce:	e7da      	b.n	8005d86 <_free_r+0x22>
 8005dd0:	d902      	bls.n	8005dd8 <_free_r+0x74>
 8005dd2:	230c      	movs	r3, #12
 8005dd4:	602b      	str	r3, [r5, #0]
 8005dd6:	e7d6      	b.n	8005d86 <_free_r+0x22>
 8005dd8:	6820      	ldr	r0, [r4, #0]
 8005dda:	1821      	adds	r1, r4, r0
 8005ddc:	428b      	cmp	r3, r1
 8005dde:	bf04      	itt	eq
 8005de0:	6819      	ldreq	r1, [r3, #0]
 8005de2:	685b      	ldreq	r3, [r3, #4]
 8005de4:	6063      	str	r3, [r4, #4]
 8005de6:	bf04      	itt	eq
 8005de8:	1809      	addeq	r1, r1, r0
 8005dea:	6021      	streq	r1, [r4, #0]
 8005dec:	6054      	str	r4, [r2, #4]
 8005dee:	e7ca      	b.n	8005d86 <_free_r+0x22>
 8005df0:	bd38      	pop	{r3, r4, r5, pc}
 8005df2:	bf00      	nop
 8005df4:	20000690 	.word	0x20000690

08005df8 <malloc>:
 8005df8:	4b02      	ldr	r3, [pc, #8]	@ (8005e04 <malloc+0xc>)
 8005dfa:	4601      	mov	r1, r0
 8005dfc:	6818      	ldr	r0, [r3, #0]
 8005dfe:	f000 b825 	b.w	8005e4c <_malloc_r>
 8005e02:	bf00      	nop
 8005e04:	20000034 	.word	0x20000034

08005e08 <sbrk_aligned>:
 8005e08:	b570      	push	{r4, r5, r6, lr}
 8005e0a:	4e0f      	ldr	r6, [pc, #60]	@ (8005e48 <sbrk_aligned+0x40>)
 8005e0c:	460c      	mov	r4, r1
 8005e0e:	6831      	ldr	r1, [r6, #0]
 8005e10:	4605      	mov	r5, r0
 8005e12:	b911      	cbnz	r1, 8005e1a <sbrk_aligned+0x12>
 8005e14:	f000 f964 	bl	80060e0 <_sbrk_r>
 8005e18:	6030      	str	r0, [r6, #0]
 8005e1a:	4621      	mov	r1, r4
 8005e1c:	4628      	mov	r0, r5
 8005e1e:	f000 f95f 	bl	80060e0 <_sbrk_r>
 8005e22:	1c43      	adds	r3, r0, #1
 8005e24:	d103      	bne.n	8005e2e <sbrk_aligned+0x26>
 8005e26:	f04f 34ff 	mov.w	r4, #4294967295
 8005e2a:	4620      	mov	r0, r4
 8005e2c:	bd70      	pop	{r4, r5, r6, pc}
 8005e2e:	1cc4      	adds	r4, r0, #3
 8005e30:	f024 0403 	bic.w	r4, r4, #3
 8005e34:	42a0      	cmp	r0, r4
 8005e36:	d0f8      	beq.n	8005e2a <sbrk_aligned+0x22>
 8005e38:	1a21      	subs	r1, r4, r0
 8005e3a:	4628      	mov	r0, r5
 8005e3c:	f000 f950 	bl	80060e0 <_sbrk_r>
 8005e40:	3001      	adds	r0, #1
 8005e42:	d1f2      	bne.n	8005e2a <sbrk_aligned+0x22>
 8005e44:	e7ef      	b.n	8005e26 <sbrk_aligned+0x1e>
 8005e46:	bf00      	nop
 8005e48:	2000068c 	.word	0x2000068c

08005e4c <_malloc_r>:
 8005e4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e50:	1ccd      	adds	r5, r1, #3
 8005e52:	f025 0503 	bic.w	r5, r5, #3
 8005e56:	3508      	adds	r5, #8
 8005e58:	2d0c      	cmp	r5, #12
 8005e5a:	bf38      	it	cc
 8005e5c:	250c      	movcc	r5, #12
 8005e5e:	2d00      	cmp	r5, #0
 8005e60:	4606      	mov	r6, r0
 8005e62:	db01      	blt.n	8005e68 <_malloc_r+0x1c>
 8005e64:	42a9      	cmp	r1, r5
 8005e66:	d904      	bls.n	8005e72 <_malloc_r+0x26>
 8005e68:	230c      	movs	r3, #12
 8005e6a:	6033      	str	r3, [r6, #0]
 8005e6c:	2000      	movs	r0, #0
 8005e6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e72:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005f48 <_malloc_r+0xfc>
 8005e76:	f000 f869 	bl	8005f4c <__malloc_lock>
 8005e7a:	f8d8 3000 	ldr.w	r3, [r8]
 8005e7e:	461c      	mov	r4, r3
 8005e80:	bb44      	cbnz	r4, 8005ed4 <_malloc_r+0x88>
 8005e82:	4629      	mov	r1, r5
 8005e84:	4630      	mov	r0, r6
 8005e86:	f7ff ffbf 	bl	8005e08 <sbrk_aligned>
 8005e8a:	1c43      	adds	r3, r0, #1
 8005e8c:	4604      	mov	r4, r0
 8005e8e:	d158      	bne.n	8005f42 <_malloc_r+0xf6>
 8005e90:	f8d8 4000 	ldr.w	r4, [r8]
 8005e94:	4627      	mov	r7, r4
 8005e96:	2f00      	cmp	r7, #0
 8005e98:	d143      	bne.n	8005f22 <_malloc_r+0xd6>
 8005e9a:	2c00      	cmp	r4, #0
 8005e9c:	d04b      	beq.n	8005f36 <_malloc_r+0xea>
 8005e9e:	6823      	ldr	r3, [r4, #0]
 8005ea0:	4639      	mov	r1, r7
 8005ea2:	4630      	mov	r0, r6
 8005ea4:	eb04 0903 	add.w	r9, r4, r3
 8005ea8:	f000 f91a 	bl	80060e0 <_sbrk_r>
 8005eac:	4581      	cmp	r9, r0
 8005eae:	d142      	bne.n	8005f36 <_malloc_r+0xea>
 8005eb0:	6821      	ldr	r1, [r4, #0]
 8005eb2:	1a6d      	subs	r5, r5, r1
 8005eb4:	4629      	mov	r1, r5
 8005eb6:	4630      	mov	r0, r6
 8005eb8:	f7ff ffa6 	bl	8005e08 <sbrk_aligned>
 8005ebc:	3001      	adds	r0, #1
 8005ebe:	d03a      	beq.n	8005f36 <_malloc_r+0xea>
 8005ec0:	6823      	ldr	r3, [r4, #0]
 8005ec2:	442b      	add	r3, r5
 8005ec4:	6023      	str	r3, [r4, #0]
 8005ec6:	f8d8 3000 	ldr.w	r3, [r8]
 8005eca:	685a      	ldr	r2, [r3, #4]
 8005ecc:	bb62      	cbnz	r2, 8005f28 <_malloc_r+0xdc>
 8005ece:	f8c8 7000 	str.w	r7, [r8]
 8005ed2:	e00f      	b.n	8005ef4 <_malloc_r+0xa8>
 8005ed4:	6822      	ldr	r2, [r4, #0]
 8005ed6:	1b52      	subs	r2, r2, r5
 8005ed8:	d420      	bmi.n	8005f1c <_malloc_r+0xd0>
 8005eda:	2a0b      	cmp	r2, #11
 8005edc:	d917      	bls.n	8005f0e <_malloc_r+0xc2>
 8005ede:	1961      	adds	r1, r4, r5
 8005ee0:	42a3      	cmp	r3, r4
 8005ee2:	6025      	str	r5, [r4, #0]
 8005ee4:	bf18      	it	ne
 8005ee6:	6059      	strne	r1, [r3, #4]
 8005ee8:	6863      	ldr	r3, [r4, #4]
 8005eea:	bf08      	it	eq
 8005eec:	f8c8 1000 	streq.w	r1, [r8]
 8005ef0:	5162      	str	r2, [r4, r5]
 8005ef2:	604b      	str	r3, [r1, #4]
 8005ef4:	4630      	mov	r0, r6
 8005ef6:	f000 f82f 	bl	8005f58 <__malloc_unlock>
 8005efa:	f104 000b 	add.w	r0, r4, #11
 8005efe:	1d23      	adds	r3, r4, #4
 8005f00:	f020 0007 	bic.w	r0, r0, #7
 8005f04:	1ac2      	subs	r2, r0, r3
 8005f06:	bf1c      	itt	ne
 8005f08:	1a1b      	subne	r3, r3, r0
 8005f0a:	50a3      	strne	r3, [r4, r2]
 8005f0c:	e7af      	b.n	8005e6e <_malloc_r+0x22>
 8005f0e:	6862      	ldr	r2, [r4, #4]
 8005f10:	42a3      	cmp	r3, r4
 8005f12:	bf0c      	ite	eq
 8005f14:	f8c8 2000 	streq.w	r2, [r8]
 8005f18:	605a      	strne	r2, [r3, #4]
 8005f1a:	e7eb      	b.n	8005ef4 <_malloc_r+0xa8>
 8005f1c:	4623      	mov	r3, r4
 8005f1e:	6864      	ldr	r4, [r4, #4]
 8005f20:	e7ae      	b.n	8005e80 <_malloc_r+0x34>
 8005f22:	463c      	mov	r4, r7
 8005f24:	687f      	ldr	r7, [r7, #4]
 8005f26:	e7b6      	b.n	8005e96 <_malloc_r+0x4a>
 8005f28:	461a      	mov	r2, r3
 8005f2a:	685b      	ldr	r3, [r3, #4]
 8005f2c:	42a3      	cmp	r3, r4
 8005f2e:	d1fb      	bne.n	8005f28 <_malloc_r+0xdc>
 8005f30:	2300      	movs	r3, #0
 8005f32:	6053      	str	r3, [r2, #4]
 8005f34:	e7de      	b.n	8005ef4 <_malloc_r+0xa8>
 8005f36:	230c      	movs	r3, #12
 8005f38:	6033      	str	r3, [r6, #0]
 8005f3a:	4630      	mov	r0, r6
 8005f3c:	f000 f80c 	bl	8005f58 <__malloc_unlock>
 8005f40:	e794      	b.n	8005e6c <_malloc_r+0x20>
 8005f42:	6005      	str	r5, [r0, #0]
 8005f44:	e7d6      	b.n	8005ef4 <_malloc_r+0xa8>
 8005f46:	bf00      	nop
 8005f48:	20000690 	.word	0x20000690

08005f4c <__malloc_lock>:
 8005f4c:	4801      	ldr	r0, [pc, #4]	@ (8005f54 <__malloc_lock+0x8>)
 8005f4e:	f7ff bee8 	b.w	8005d22 <__retarget_lock_acquire_recursive>
 8005f52:	bf00      	nop
 8005f54:	20000688 	.word	0x20000688

08005f58 <__malloc_unlock>:
 8005f58:	4801      	ldr	r0, [pc, #4]	@ (8005f60 <__malloc_unlock+0x8>)
 8005f5a:	f7ff bee3 	b.w	8005d24 <__retarget_lock_release_recursive>
 8005f5e:	bf00      	nop
 8005f60:	20000688 	.word	0x20000688

08005f64 <__sflush_r>:
 8005f64:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005f68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f6c:	0716      	lsls	r6, r2, #28
 8005f6e:	4605      	mov	r5, r0
 8005f70:	460c      	mov	r4, r1
 8005f72:	d454      	bmi.n	800601e <__sflush_r+0xba>
 8005f74:	684b      	ldr	r3, [r1, #4]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	dc02      	bgt.n	8005f80 <__sflush_r+0x1c>
 8005f7a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	dd48      	ble.n	8006012 <__sflush_r+0xae>
 8005f80:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005f82:	2e00      	cmp	r6, #0
 8005f84:	d045      	beq.n	8006012 <__sflush_r+0xae>
 8005f86:	2300      	movs	r3, #0
 8005f88:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005f8c:	682f      	ldr	r7, [r5, #0]
 8005f8e:	6a21      	ldr	r1, [r4, #32]
 8005f90:	602b      	str	r3, [r5, #0]
 8005f92:	d030      	beq.n	8005ff6 <__sflush_r+0x92>
 8005f94:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005f96:	89a3      	ldrh	r3, [r4, #12]
 8005f98:	0759      	lsls	r1, r3, #29
 8005f9a:	d505      	bpl.n	8005fa8 <__sflush_r+0x44>
 8005f9c:	6863      	ldr	r3, [r4, #4]
 8005f9e:	1ad2      	subs	r2, r2, r3
 8005fa0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005fa2:	b10b      	cbz	r3, 8005fa8 <__sflush_r+0x44>
 8005fa4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005fa6:	1ad2      	subs	r2, r2, r3
 8005fa8:	2300      	movs	r3, #0
 8005faa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005fac:	6a21      	ldr	r1, [r4, #32]
 8005fae:	4628      	mov	r0, r5
 8005fb0:	47b0      	blx	r6
 8005fb2:	1c43      	adds	r3, r0, #1
 8005fb4:	89a3      	ldrh	r3, [r4, #12]
 8005fb6:	d106      	bne.n	8005fc6 <__sflush_r+0x62>
 8005fb8:	6829      	ldr	r1, [r5, #0]
 8005fba:	291d      	cmp	r1, #29
 8005fbc:	d82b      	bhi.n	8006016 <__sflush_r+0xb2>
 8005fbe:	4a2a      	ldr	r2, [pc, #168]	@ (8006068 <__sflush_r+0x104>)
 8005fc0:	40ca      	lsrs	r2, r1
 8005fc2:	07d6      	lsls	r6, r2, #31
 8005fc4:	d527      	bpl.n	8006016 <__sflush_r+0xb2>
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	6062      	str	r2, [r4, #4]
 8005fca:	04d9      	lsls	r1, r3, #19
 8005fcc:	6922      	ldr	r2, [r4, #16]
 8005fce:	6022      	str	r2, [r4, #0]
 8005fd0:	d504      	bpl.n	8005fdc <__sflush_r+0x78>
 8005fd2:	1c42      	adds	r2, r0, #1
 8005fd4:	d101      	bne.n	8005fda <__sflush_r+0x76>
 8005fd6:	682b      	ldr	r3, [r5, #0]
 8005fd8:	b903      	cbnz	r3, 8005fdc <__sflush_r+0x78>
 8005fda:	6560      	str	r0, [r4, #84]	@ 0x54
 8005fdc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005fde:	602f      	str	r7, [r5, #0]
 8005fe0:	b1b9      	cbz	r1, 8006012 <__sflush_r+0xae>
 8005fe2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005fe6:	4299      	cmp	r1, r3
 8005fe8:	d002      	beq.n	8005ff0 <__sflush_r+0x8c>
 8005fea:	4628      	mov	r0, r5
 8005fec:	f7ff feba 	bl	8005d64 <_free_r>
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	6363      	str	r3, [r4, #52]	@ 0x34
 8005ff4:	e00d      	b.n	8006012 <__sflush_r+0xae>
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	4628      	mov	r0, r5
 8005ffa:	47b0      	blx	r6
 8005ffc:	4602      	mov	r2, r0
 8005ffe:	1c50      	adds	r0, r2, #1
 8006000:	d1c9      	bne.n	8005f96 <__sflush_r+0x32>
 8006002:	682b      	ldr	r3, [r5, #0]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d0c6      	beq.n	8005f96 <__sflush_r+0x32>
 8006008:	2b1d      	cmp	r3, #29
 800600a:	d001      	beq.n	8006010 <__sflush_r+0xac>
 800600c:	2b16      	cmp	r3, #22
 800600e:	d11e      	bne.n	800604e <__sflush_r+0xea>
 8006010:	602f      	str	r7, [r5, #0]
 8006012:	2000      	movs	r0, #0
 8006014:	e022      	b.n	800605c <__sflush_r+0xf8>
 8006016:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800601a:	b21b      	sxth	r3, r3
 800601c:	e01b      	b.n	8006056 <__sflush_r+0xf2>
 800601e:	690f      	ldr	r7, [r1, #16]
 8006020:	2f00      	cmp	r7, #0
 8006022:	d0f6      	beq.n	8006012 <__sflush_r+0xae>
 8006024:	0793      	lsls	r3, r2, #30
 8006026:	680e      	ldr	r6, [r1, #0]
 8006028:	bf08      	it	eq
 800602a:	694b      	ldreq	r3, [r1, #20]
 800602c:	600f      	str	r7, [r1, #0]
 800602e:	bf18      	it	ne
 8006030:	2300      	movne	r3, #0
 8006032:	eba6 0807 	sub.w	r8, r6, r7
 8006036:	608b      	str	r3, [r1, #8]
 8006038:	f1b8 0f00 	cmp.w	r8, #0
 800603c:	dde9      	ble.n	8006012 <__sflush_r+0xae>
 800603e:	6a21      	ldr	r1, [r4, #32]
 8006040:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006042:	4643      	mov	r3, r8
 8006044:	463a      	mov	r2, r7
 8006046:	4628      	mov	r0, r5
 8006048:	47b0      	blx	r6
 800604a:	2800      	cmp	r0, #0
 800604c:	dc08      	bgt.n	8006060 <__sflush_r+0xfc>
 800604e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006052:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006056:	81a3      	strh	r3, [r4, #12]
 8006058:	f04f 30ff 	mov.w	r0, #4294967295
 800605c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006060:	4407      	add	r7, r0
 8006062:	eba8 0800 	sub.w	r8, r8, r0
 8006066:	e7e7      	b.n	8006038 <__sflush_r+0xd4>
 8006068:	20400001 	.word	0x20400001

0800606c <_fflush_r>:
 800606c:	b538      	push	{r3, r4, r5, lr}
 800606e:	690b      	ldr	r3, [r1, #16]
 8006070:	4605      	mov	r5, r0
 8006072:	460c      	mov	r4, r1
 8006074:	b913      	cbnz	r3, 800607c <_fflush_r+0x10>
 8006076:	2500      	movs	r5, #0
 8006078:	4628      	mov	r0, r5
 800607a:	bd38      	pop	{r3, r4, r5, pc}
 800607c:	b118      	cbz	r0, 8006086 <_fflush_r+0x1a>
 800607e:	6a03      	ldr	r3, [r0, #32]
 8006080:	b90b      	cbnz	r3, 8006086 <_fflush_r+0x1a>
 8006082:	f7ff fd5b 	bl	8005b3c <__sinit>
 8006086:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d0f3      	beq.n	8006076 <_fflush_r+0xa>
 800608e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006090:	07d0      	lsls	r0, r2, #31
 8006092:	d404      	bmi.n	800609e <_fflush_r+0x32>
 8006094:	0599      	lsls	r1, r3, #22
 8006096:	d402      	bmi.n	800609e <_fflush_r+0x32>
 8006098:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800609a:	f7ff fe42 	bl	8005d22 <__retarget_lock_acquire_recursive>
 800609e:	4628      	mov	r0, r5
 80060a0:	4621      	mov	r1, r4
 80060a2:	f7ff ff5f 	bl	8005f64 <__sflush_r>
 80060a6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80060a8:	07da      	lsls	r2, r3, #31
 80060aa:	4605      	mov	r5, r0
 80060ac:	d4e4      	bmi.n	8006078 <_fflush_r+0xc>
 80060ae:	89a3      	ldrh	r3, [r4, #12]
 80060b0:	059b      	lsls	r3, r3, #22
 80060b2:	d4e1      	bmi.n	8006078 <_fflush_r+0xc>
 80060b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80060b6:	f7ff fe35 	bl	8005d24 <__retarget_lock_release_recursive>
 80060ba:	e7dd      	b.n	8006078 <_fflush_r+0xc>

080060bc <fiprintf>:
 80060bc:	b40e      	push	{r1, r2, r3}
 80060be:	b503      	push	{r0, r1, lr}
 80060c0:	4601      	mov	r1, r0
 80060c2:	ab03      	add	r3, sp, #12
 80060c4:	4805      	ldr	r0, [pc, #20]	@ (80060dc <fiprintf+0x20>)
 80060c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80060ca:	6800      	ldr	r0, [r0, #0]
 80060cc:	9301      	str	r3, [sp, #4]
 80060ce:	f000 f847 	bl	8006160 <_vfiprintf_r>
 80060d2:	b002      	add	sp, #8
 80060d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80060d8:	b003      	add	sp, #12
 80060da:	4770      	bx	lr
 80060dc:	20000034 	.word	0x20000034

080060e0 <_sbrk_r>:
 80060e0:	b538      	push	{r3, r4, r5, lr}
 80060e2:	4d06      	ldr	r5, [pc, #24]	@ (80060fc <_sbrk_r+0x1c>)
 80060e4:	2300      	movs	r3, #0
 80060e6:	4604      	mov	r4, r0
 80060e8:	4608      	mov	r0, r1
 80060ea:	602b      	str	r3, [r5, #0]
 80060ec:	f7fb f96a 	bl	80013c4 <_sbrk>
 80060f0:	1c43      	adds	r3, r0, #1
 80060f2:	d102      	bne.n	80060fa <_sbrk_r+0x1a>
 80060f4:	682b      	ldr	r3, [r5, #0]
 80060f6:	b103      	cbz	r3, 80060fa <_sbrk_r+0x1a>
 80060f8:	6023      	str	r3, [r4, #0]
 80060fa:	bd38      	pop	{r3, r4, r5, pc}
 80060fc:	20000684 	.word	0x20000684

08006100 <abort>:
 8006100:	b508      	push	{r3, lr}
 8006102:	2006      	movs	r0, #6
 8006104:	f000 fb8c 	bl	8006820 <raise>
 8006108:	2001      	movs	r0, #1
 800610a:	f7fb f8e2 	bl	80012d2 <_exit>

0800610e <__sfputc_r>:
 800610e:	6893      	ldr	r3, [r2, #8]
 8006110:	3b01      	subs	r3, #1
 8006112:	2b00      	cmp	r3, #0
 8006114:	b410      	push	{r4}
 8006116:	6093      	str	r3, [r2, #8]
 8006118:	da08      	bge.n	800612c <__sfputc_r+0x1e>
 800611a:	6994      	ldr	r4, [r2, #24]
 800611c:	42a3      	cmp	r3, r4
 800611e:	db01      	blt.n	8006124 <__sfputc_r+0x16>
 8006120:	290a      	cmp	r1, #10
 8006122:	d103      	bne.n	800612c <__sfputc_r+0x1e>
 8006124:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006128:	f000 babe 	b.w	80066a8 <__swbuf_r>
 800612c:	6813      	ldr	r3, [r2, #0]
 800612e:	1c58      	adds	r0, r3, #1
 8006130:	6010      	str	r0, [r2, #0]
 8006132:	7019      	strb	r1, [r3, #0]
 8006134:	4608      	mov	r0, r1
 8006136:	f85d 4b04 	ldr.w	r4, [sp], #4
 800613a:	4770      	bx	lr

0800613c <__sfputs_r>:
 800613c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800613e:	4606      	mov	r6, r0
 8006140:	460f      	mov	r7, r1
 8006142:	4614      	mov	r4, r2
 8006144:	18d5      	adds	r5, r2, r3
 8006146:	42ac      	cmp	r4, r5
 8006148:	d101      	bne.n	800614e <__sfputs_r+0x12>
 800614a:	2000      	movs	r0, #0
 800614c:	e007      	b.n	800615e <__sfputs_r+0x22>
 800614e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006152:	463a      	mov	r2, r7
 8006154:	4630      	mov	r0, r6
 8006156:	f7ff ffda 	bl	800610e <__sfputc_r>
 800615a:	1c43      	adds	r3, r0, #1
 800615c:	d1f3      	bne.n	8006146 <__sfputs_r+0xa>
 800615e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006160 <_vfiprintf_r>:
 8006160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006164:	460d      	mov	r5, r1
 8006166:	b09d      	sub	sp, #116	@ 0x74
 8006168:	4614      	mov	r4, r2
 800616a:	4698      	mov	r8, r3
 800616c:	4606      	mov	r6, r0
 800616e:	b118      	cbz	r0, 8006178 <_vfiprintf_r+0x18>
 8006170:	6a03      	ldr	r3, [r0, #32]
 8006172:	b90b      	cbnz	r3, 8006178 <_vfiprintf_r+0x18>
 8006174:	f7ff fce2 	bl	8005b3c <__sinit>
 8006178:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800617a:	07d9      	lsls	r1, r3, #31
 800617c:	d405      	bmi.n	800618a <_vfiprintf_r+0x2a>
 800617e:	89ab      	ldrh	r3, [r5, #12]
 8006180:	059a      	lsls	r2, r3, #22
 8006182:	d402      	bmi.n	800618a <_vfiprintf_r+0x2a>
 8006184:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006186:	f7ff fdcc 	bl	8005d22 <__retarget_lock_acquire_recursive>
 800618a:	89ab      	ldrh	r3, [r5, #12]
 800618c:	071b      	lsls	r3, r3, #28
 800618e:	d501      	bpl.n	8006194 <_vfiprintf_r+0x34>
 8006190:	692b      	ldr	r3, [r5, #16]
 8006192:	b99b      	cbnz	r3, 80061bc <_vfiprintf_r+0x5c>
 8006194:	4629      	mov	r1, r5
 8006196:	4630      	mov	r0, r6
 8006198:	f000 fac4 	bl	8006724 <__swsetup_r>
 800619c:	b170      	cbz	r0, 80061bc <_vfiprintf_r+0x5c>
 800619e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80061a0:	07dc      	lsls	r4, r3, #31
 80061a2:	d504      	bpl.n	80061ae <_vfiprintf_r+0x4e>
 80061a4:	f04f 30ff 	mov.w	r0, #4294967295
 80061a8:	b01d      	add	sp, #116	@ 0x74
 80061aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061ae:	89ab      	ldrh	r3, [r5, #12]
 80061b0:	0598      	lsls	r0, r3, #22
 80061b2:	d4f7      	bmi.n	80061a4 <_vfiprintf_r+0x44>
 80061b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80061b6:	f7ff fdb5 	bl	8005d24 <__retarget_lock_release_recursive>
 80061ba:	e7f3      	b.n	80061a4 <_vfiprintf_r+0x44>
 80061bc:	2300      	movs	r3, #0
 80061be:	9309      	str	r3, [sp, #36]	@ 0x24
 80061c0:	2320      	movs	r3, #32
 80061c2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80061c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80061ca:	2330      	movs	r3, #48	@ 0x30
 80061cc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800637c <_vfiprintf_r+0x21c>
 80061d0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80061d4:	f04f 0901 	mov.w	r9, #1
 80061d8:	4623      	mov	r3, r4
 80061da:	469a      	mov	sl, r3
 80061dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80061e0:	b10a      	cbz	r2, 80061e6 <_vfiprintf_r+0x86>
 80061e2:	2a25      	cmp	r2, #37	@ 0x25
 80061e4:	d1f9      	bne.n	80061da <_vfiprintf_r+0x7a>
 80061e6:	ebba 0b04 	subs.w	fp, sl, r4
 80061ea:	d00b      	beq.n	8006204 <_vfiprintf_r+0xa4>
 80061ec:	465b      	mov	r3, fp
 80061ee:	4622      	mov	r2, r4
 80061f0:	4629      	mov	r1, r5
 80061f2:	4630      	mov	r0, r6
 80061f4:	f7ff ffa2 	bl	800613c <__sfputs_r>
 80061f8:	3001      	adds	r0, #1
 80061fa:	f000 80a7 	beq.w	800634c <_vfiprintf_r+0x1ec>
 80061fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006200:	445a      	add	r2, fp
 8006202:	9209      	str	r2, [sp, #36]	@ 0x24
 8006204:	f89a 3000 	ldrb.w	r3, [sl]
 8006208:	2b00      	cmp	r3, #0
 800620a:	f000 809f 	beq.w	800634c <_vfiprintf_r+0x1ec>
 800620e:	2300      	movs	r3, #0
 8006210:	f04f 32ff 	mov.w	r2, #4294967295
 8006214:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006218:	f10a 0a01 	add.w	sl, sl, #1
 800621c:	9304      	str	r3, [sp, #16]
 800621e:	9307      	str	r3, [sp, #28]
 8006220:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006224:	931a      	str	r3, [sp, #104]	@ 0x68
 8006226:	4654      	mov	r4, sl
 8006228:	2205      	movs	r2, #5
 800622a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800622e:	4853      	ldr	r0, [pc, #332]	@ (800637c <_vfiprintf_r+0x21c>)
 8006230:	f7f9 ffce 	bl	80001d0 <memchr>
 8006234:	9a04      	ldr	r2, [sp, #16]
 8006236:	b9d8      	cbnz	r0, 8006270 <_vfiprintf_r+0x110>
 8006238:	06d1      	lsls	r1, r2, #27
 800623a:	bf44      	itt	mi
 800623c:	2320      	movmi	r3, #32
 800623e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006242:	0713      	lsls	r3, r2, #28
 8006244:	bf44      	itt	mi
 8006246:	232b      	movmi	r3, #43	@ 0x2b
 8006248:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800624c:	f89a 3000 	ldrb.w	r3, [sl]
 8006250:	2b2a      	cmp	r3, #42	@ 0x2a
 8006252:	d015      	beq.n	8006280 <_vfiprintf_r+0x120>
 8006254:	9a07      	ldr	r2, [sp, #28]
 8006256:	4654      	mov	r4, sl
 8006258:	2000      	movs	r0, #0
 800625a:	f04f 0c0a 	mov.w	ip, #10
 800625e:	4621      	mov	r1, r4
 8006260:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006264:	3b30      	subs	r3, #48	@ 0x30
 8006266:	2b09      	cmp	r3, #9
 8006268:	d94b      	bls.n	8006302 <_vfiprintf_r+0x1a2>
 800626a:	b1b0      	cbz	r0, 800629a <_vfiprintf_r+0x13a>
 800626c:	9207      	str	r2, [sp, #28]
 800626e:	e014      	b.n	800629a <_vfiprintf_r+0x13a>
 8006270:	eba0 0308 	sub.w	r3, r0, r8
 8006274:	fa09 f303 	lsl.w	r3, r9, r3
 8006278:	4313      	orrs	r3, r2
 800627a:	9304      	str	r3, [sp, #16]
 800627c:	46a2      	mov	sl, r4
 800627e:	e7d2      	b.n	8006226 <_vfiprintf_r+0xc6>
 8006280:	9b03      	ldr	r3, [sp, #12]
 8006282:	1d19      	adds	r1, r3, #4
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	9103      	str	r1, [sp, #12]
 8006288:	2b00      	cmp	r3, #0
 800628a:	bfbb      	ittet	lt
 800628c:	425b      	neglt	r3, r3
 800628e:	f042 0202 	orrlt.w	r2, r2, #2
 8006292:	9307      	strge	r3, [sp, #28]
 8006294:	9307      	strlt	r3, [sp, #28]
 8006296:	bfb8      	it	lt
 8006298:	9204      	strlt	r2, [sp, #16]
 800629a:	7823      	ldrb	r3, [r4, #0]
 800629c:	2b2e      	cmp	r3, #46	@ 0x2e
 800629e:	d10a      	bne.n	80062b6 <_vfiprintf_r+0x156>
 80062a0:	7863      	ldrb	r3, [r4, #1]
 80062a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80062a4:	d132      	bne.n	800630c <_vfiprintf_r+0x1ac>
 80062a6:	9b03      	ldr	r3, [sp, #12]
 80062a8:	1d1a      	adds	r2, r3, #4
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	9203      	str	r2, [sp, #12]
 80062ae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80062b2:	3402      	adds	r4, #2
 80062b4:	9305      	str	r3, [sp, #20]
 80062b6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800638c <_vfiprintf_r+0x22c>
 80062ba:	7821      	ldrb	r1, [r4, #0]
 80062bc:	2203      	movs	r2, #3
 80062be:	4650      	mov	r0, sl
 80062c0:	f7f9 ff86 	bl	80001d0 <memchr>
 80062c4:	b138      	cbz	r0, 80062d6 <_vfiprintf_r+0x176>
 80062c6:	9b04      	ldr	r3, [sp, #16]
 80062c8:	eba0 000a 	sub.w	r0, r0, sl
 80062cc:	2240      	movs	r2, #64	@ 0x40
 80062ce:	4082      	lsls	r2, r0
 80062d0:	4313      	orrs	r3, r2
 80062d2:	3401      	adds	r4, #1
 80062d4:	9304      	str	r3, [sp, #16]
 80062d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062da:	4829      	ldr	r0, [pc, #164]	@ (8006380 <_vfiprintf_r+0x220>)
 80062dc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80062e0:	2206      	movs	r2, #6
 80062e2:	f7f9 ff75 	bl	80001d0 <memchr>
 80062e6:	2800      	cmp	r0, #0
 80062e8:	d03f      	beq.n	800636a <_vfiprintf_r+0x20a>
 80062ea:	4b26      	ldr	r3, [pc, #152]	@ (8006384 <_vfiprintf_r+0x224>)
 80062ec:	bb1b      	cbnz	r3, 8006336 <_vfiprintf_r+0x1d6>
 80062ee:	9b03      	ldr	r3, [sp, #12]
 80062f0:	3307      	adds	r3, #7
 80062f2:	f023 0307 	bic.w	r3, r3, #7
 80062f6:	3308      	adds	r3, #8
 80062f8:	9303      	str	r3, [sp, #12]
 80062fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80062fc:	443b      	add	r3, r7
 80062fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8006300:	e76a      	b.n	80061d8 <_vfiprintf_r+0x78>
 8006302:	fb0c 3202 	mla	r2, ip, r2, r3
 8006306:	460c      	mov	r4, r1
 8006308:	2001      	movs	r0, #1
 800630a:	e7a8      	b.n	800625e <_vfiprintf_r+0xfe>
 800630c:	2300      	movs	r3, #0
 800630e:	3401      	adds	r4, #1
 8006310:	9305      	str	r3, [sp, #20]
 8006312:	4619      	mov	r1, r3
 8006314:	f04f 0c0a 	mov.w	ip, #10
 8006318:	4620      	mov	r0, r4
 800631a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800631e:	3a30      	subs	r2, #48	@ 0x30
 8006320:	2a09      	cmp	r2, #9
 8006322:	d903      	bls.n	800632c <_vfiprintf_r+0x1cc>
 8006324:	2b00      	cmp	r3, #0
 8006326:	d0c6      	beq.n	80062b6 <_vfiprintf_r+0x156>
 8006328:	9105      	str	r1, [sp, #20]
 800632a:	e7c4      	b.n	80062b6 <_vfiprintf_r+0x156>
 800632c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006330:	4604      	mov	r4, r0
 8006332:	2301      	movs	r3, #1
 8006334:	e7f0      	b.n	8006318 <_vfiprintf_r+0x1b8>
 8006336:	ab03      	add	r3, sp, #12
 8006338:	9300      	str	r3, [sp, #0]
 800633a:	462a      	mov	r2, r5
 800633c:	4b12      	ldr	r3, [pc, #72]	@ (8006388 <_vfiprintf_r+0x228>)
 800633e:	a904      	add	r1, sp, #16
 8006340:	4630      	mov	r0, r6
 8006342:	f3af 8000 	nop.w
 8006346:	4607      	mov	r7, r0
 8006348:	1c78      	adds	r0, r7, #1
 800634a:	d1d6      	bne.n	80062fa <_vfiprintf_r+0x19a>
 800634c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800634e:	07d9      	lsls	r1, r3, #31
 8006350:	d405      	bmi.n	800635e <_vfiprintf_r+0x1fe>
 8006352:	89ab      	ldrh	r3, [r5, #12]
 8006354:	059a      	lsls	r2, r3, #22
 8006356:	d402      	bmi.n	800635e <_vfiprintf_r+0x1fe>
 8006358:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800635a:	f7ff fce3 	bl	8005d24 <__retarget_lock_release_recursive>
 800635e:	89ab      	ldrh	r3, [r5, #12]
 8006360:	065b      	lsls	r3, r3, #25
 8006362:	f53f af1f 	bmi.w	80061a4 <_vfiprintf_r+0x44>
 8006366:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006368:	e71e      	b.n	80061a8 <_vfiprintf_r+0x48>
 800636a:	ab03      	add	r3, sp, #12
 800636c:	9300      	str	r3, [sp, #0]
 800636e:	462a      	mov	r2, r5
 8006370:	4b05      	ldr	r3, [pc, #20]	@ (8006388 <_vfiprintf_r+0x228>)
 8006372:	a904      	add	r1, sp, #16
 8006374:	4630      	mov	r0, r6
 8006376:	f000 f879 	bl	800646c <_printf_i>
 800637a:	e7e4      	b.n	8006346 <_vfiprintf_r+0x1e6>
 800637c:	08063a67 	.word	0x08063a67
 8006380:	08063a71 	.word	0x08063a71
 8006384:	00000000 	.word	0x00000000
 8006388:	0800613d 	.word	0x0800613d
 800638c:	08063a6d 	.word	0x08063a6d

08006390 <_printf_common>:
 8006390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006394:	4616      	mov	r6, r2
 8006396:	4698      	mov	r8, r3
 8006398:	688a      	ldr	r2, [r1, #8]
 800639a:	690b      	ldr	r3, [r1, #16]
 800639c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80063a0:	4293      	cmp	r3, r2
 80063a2:	bfb8      	it	lt
 80063a4:	4613      	movlt	r3, r2
 80063a6:	6033      	str	r3, [r6, #0]
 80063a8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80063ac:	4607      	mov	r7, r0
 80063ae:	460c      	mov	r4, r1
 80063b0:	b10a      	cbz	r2, 80063b6 <_printf_common+0x26>
 80063b2:	3301      	adds	r3, #1
 80063b4:	6033      	str	r3, [r6, #0]
 80063b6:	6823      	ldr	r3, [r4, #0]
 80063b8:	0699      	lsls	r1, r3, #26
 80063ba:	bf42      	ittt	mi
 80063bc:	6833      	ldrmi	r3, [r6, #0]
 80063be:	3302      	addmi	r3, #2
 80063c0:	6033      	strmi	r3, [r6, #0]
 80063c2:	6825      	ldr	r5, [r4, #0]
 80063c4:	f015 0506 	ands.w	r5, r5, #6
 80063c8:	d106      	bne.n	80063d8 <_printf_common+0x48>
 80063ca:	f104 0a19 	add.w	sl, r4, #25
 80063ce:	68e3      	ldr	r3, [r4, #12]
 80063d0:	6832      	ldr	r2, [r6, #0]
 80063d2:	1a9b      	subs	r3, r3, r2
 80063d4:	42ab      	cmp	r3, r5
 80063d6:	dc26      	bgt.n	8006426 <_printf_common+0x96>
 80063d8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80063dc:	6822      	ldr	r2, [r4, #0]
 80063de:	3b00      	subs	r3, #0
 80063e0:	bf18      	it	ne
 80063e2:	2301      	movne	r3, #1
 80063e4:	0692      	lsls	r2, r2, #26
 80063e6:	d42b      	bmi.n	8006440 <_printf_common+0xb0>
 80063e8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80063ec:	4641      	mov	r1, r8
 80063ee:	4638      	mov	r0, r7
 80063f0:	47c8      	blx	r9
 80063f2:	3001      	adds	r0, #1
 80063f4:	d01e      	beq.n	8006434 <_printf_common+0xa4>
 80063f6:	6823      	ldr	r3, [r4, #0]
 80063f8:	6922      	ldr	r2, [r4, #16]
 80063fa:	f003 0306 	and.w	r3, r3, #6
 80063fe:	2b04      	cmp	r3, #4
 8006400:	bf02      	ittt	eq
 8006402:	68e5      	ldreq	r5, [r4, #12]
 8006404:	6833      	ldreq	r3, [r6, #0]
 8006406:	1aed      	subeq	r5, r5, r3
 8006408:	68a3      	ldr	r3, [r4, #8]
 800640a:	bf0c      	ite	eq
 800640c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006410:	2500      	movne	r5, #0
 8006412:	4293      	cmp	r3, r2
 8006414:	bfc4      	itt	gt
 8006416:	1a9b      	subgt	r3, r3, r2
 8006418:	18ed      	addgt	r5, r5, r3
 800641a:	2600      	movs	r6, #0
 800641c:	341a      	adds	r4, #26
 800641e:	42b5      	cmp	r5, r6
 8006420:	d11a      	bne.n	8006458 <_printf_common+0xc8>
 8006422:	2000      	movs	r0, #0
 8006424:	e008      	b.n	8006438 <_printf_common+0xa8>
 8006426:	2301      	movs	r3, #1
 8006428:	4652      	mov	r2, sl
 800642a:	4641      	mov	r1, r8
 800642c:	4638      	mov	r0, r7
 800642e:	47c8      	blx	r9
 8006430:	3001      	adds	r0, #1
 8006432:	d103      	bne.n	800643c <_printf_common+0xac>
 8006434:	f04f 30ff 	mov.w	r0, #4294967295
 8006438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800643c:	3501      	adds	r5, #1
 800643e:	e7c6      	b.n	80063ce <_printf_common+0x3e>
 8006440:	18e1      	adds	r1, r4, r3
 8006442:	1c5a      	adds	r2, r3, #1
 8006444:	2030      	movs	r0, #48	@ 0x30
 8006446:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800644a:	4422      	add	r2, r4
 800644c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006450:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006454:	3302      	adds	r3, #2
 8006456:	e7c7      	b.n	80063e8 <_printf_common+0x58>
 8006458:	2301      	movs	r3, #1
 800645a:	4622      	mov	r2, r4
 800645c:	4641      	mov	r1, r8
 800645e:	4638      	mov	r0, r7
 8006460:	47c8      	blx	r9
 8006462:	3001      	adds	r0, #1
 8006464:	d0e6      	beq.n	8006434 <_printf_common+0xa4>
 8006466:	3601      	adds	r6, #1
 8006468:	e7d9      	b.n	800641e <_printf_common+0x8e>
	...

0800646c <_printf_i>:
 800646c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006470:	7e0f      	ldrb	r7, [r1, #24]
 8006472:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006474:	2f78      	cmp	r7, #120	@ 0x78
 8006476:	4691      	mov	r9, r2
 8006478:	4680      	mov	r8, r0
 800647a:	460c      	mov	r4, r1
 800647c:	469a      	mov	sl, r3
 800647e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006482:	d807      	bhi.n	8006494 <_printf_i+0x28>
 8006484:	2f62      	cmp	r7, #98	@ 0x62
 8006486:	d80a      	bhi.n	800649e <_printf_i+0x32>
 8006488:	2f00      	cmp	r7, #0
 800648a:	f000 80d1 	beq.w	8006630 <_printf_i+0x1c4>
 800648e:	2f58      	cmp	r7, #88	@ 0x58
 8006490:	f000 80b8 	beq.w	8006604 <_printf_i+0x198>
 8006494:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006498:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800649c:	e03a      	b.n	8006514 <_printf_i+0xa8>
 800649e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80064a2:	2b15      	cmp	r3, #21
 80064a4:	d8f6      	bhi.n	8006494 <_printf_i+0x28>
 80064a6:	a101      	add	r1, pc, #4	@ (adr r1, 80064ac <_printf_i+0x40>)
 80064a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80064ac:	08006505 	.word	0x08006505
 80064b0:	08006519 	.word	0x08006519
 80064b4:	08006495 	.word	0x08006495
 80064b8:	08006495 	.word	0x08006495
 80064bc:	08006495 	.word	0x08006495
 80064c0:	08006495 	.word	0x08006495
 80064c4:	08006519 	.word	0x08006519
 80064c8:	08006495 	.word	0x08006495
 80064cc:	08006495 	.word	0x08006495
 80064d0:	08006495 	.word	0x08006495
 80064d4:	08006495 	.word	0x08006495
 80064d8:	08006617 	.word	0x08006617
 80064dc:	08006543 	.word	0x08006543
 80064e0:	080065d1 	.word	0x080065d1
 80064e4:	08006495 	.word	0x08006495
 80064e8:	08006495 	.word	0x08006495
 80064ec:	08006639 	.word	0x08006639
 80064f0:	08006495 	.word	0x08006495
 80064f4:	08006543 	.word	0x08006543
 80064f8:	08006495 	.word	0x08006495
 80064fc:	08006495 	.word	0x08006495
 8006500:	080065d9 	.word	0x080065d9
 8006504:	6833      	ldr	r3, [r6, #0]
 8006506:	1d1a      	adds	r2, r3, #4
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	6032      	str	r2, [r6, #0]
 800650c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006510:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006514:	2301      	movs	r3, #1
 8006516:	e09c      	b.n	8006652 <_printf_i+0x1e6>
 8006518:	6833      	ldr	r3, [r6, #0]
 800651a:	6820      	ldr	r0, [r4, #0]
 800651c:	1d19      	adds	r1, r3, #4
 800651e:	6031      	str	r1, [r6, #0]
 8006520:	0606      	lsls	r6, r0, #24
 8006522:	d501      	bpl.n	8006528 <_printf_i+0xbc>
 8006524:	681d      	ldr	r5, [r3, #0]
 8006526:	e003      	b.n	8006530 <_printf_i+0xc4>
 8006528:	0645      	lsls	r5, r0, #25
 800652a:	d5fb      	bpl.n	8006524 <_printf_i+0xb8>
 800652c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006530:	2d00      	cmp	r5, #0
 8006532:	da03      	bge.n	800653c <_printf_i+0xd0>
 8006534:	232d      	movs	r3, #45	@ 0x2d
 8006536:	426d      	negs	r5, r5
 8006538:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800653c:	4858      	ldr	r0, [pc, #352]	@ (80066a0 <_printf_i+0x234>)
 800653e:	230a      	movs	r3, #10
 8006540:	e011      	b.n	8006566 <_printf_i+0xfa>
 8006542:	6821      	ldr	r1, [r4, #0]
 8006544:	6833      	ldr	r3, [r6, #0]
 8006546:	0608      	lsls	r0, r1, #24
 8006548:	f853 5b04 	ldr.w	r5, [r3], #4
 800654c:	d402      	bmi.n	8006554 <_printf_i+0xe8>
 800654e:	0649      	lsls	r1, r1, #25
 8006550:	bf48      	it	mi
 8006552:	b2ad      	uxthmi	r5, r5
 8006554:	2f6f      	cmp	r7, #111	@ 0x6f
 8006556:	4852      	ldr	r0, [pc, #328]	@ (80066a0 <_printf_i+0x234>)
 8006558:	6033      	str	r3, [r6, #0]
 800655a:	bf14      	ite	ne
 800655c:	230a      	movne	r3, #10
 800655e:	2308      	moveq	r3, #8
 8006560:	2100      	movs	r1, #0
 8006562:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006566:	6866      	ldr	r6, [r4, #4]
 8006568:	60a6      	str	r6, [r4, #8]
 800656a:	2e00      	cmp	r6, #0
 800656c:	db05      	blt.n	800657a <_printf_i+0x10e>
 800656e:	6821      	ldr	r1, [r4, #0]
 8006570:	432e      	orrs	r6, r5
 8006572:	f021 0104 	bic.w	r1, r1, #4
 8006576:	6021      	str	r1, [r4, #0]
 8006578:	d04b      	beq.n	8006612 <_printf_i+0x1a6>
 800657a:	4616      	mov	r6, r2
 800657c:	fbb5 f1f3 	udiv	r1, r5, r3
 8006580:	fb03 5711 	mls	r7, r3, r1, r5
 8006584:	5dc7      	ldrb	r7, [r0, r7]
 8006586:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800658a:	462f      	mov	r7, r5
 800658c:	42bb      	cmp	r3, r7
 800658e:	460d      	mov	r5, r1
 8006590:	d9f4      	bls.n	800657c <_printf_i+0x110>
 8006592:	2b08      	cmp	r3, #8
 8006594:	d10b      	bne.n	80065ae <_printf_i+0x142>
 8006596:	6823      	ldr	r3, [r4, #0]
 8006598:	07df      	lsls	r7, r3, #31
 800659a:	d508      	bpl.n	80065ae <_printf_i+0x142>
 800659c:	6923      	ldr	r3, [r4, #16]
 800659e:	6861      	ldr	r1, [r4, #4]
 80065a0:	4299      	cmp	r1, r3
 80065a2:	bfde      	ittt	le
 80065a4:	2330      	movle	r3, #48	@ 0x30
 80065a6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80065aa:	f106 36ff 	addle.w	r6, r6, #4294967295
 80065ae:	1b92      	subs	r2, r2, r6
 80065b0:	6122      	str	r2, [r4, #16]
 80065b2:	f8cd a000 	str.w	sl, [sp]
 80065b6:	464b      	mov	r3, r9
 80065b8:	aa03      	add	r2, sp, #12
 80065ba:	4621      	mov	r1, r4
 80065bc:	4640      	mov	r0, r8
 80065be:	f7ff fee7 	bl	8006390 <_printf_common>
 80065c2:	3001      	adds	r0, #1
 80065c4:	d14a      	bne.n	800665c <_printf_i+0x1f0>
 80065c6:	f04f 30ff 	mov.w	r0, #4294967295
 80065ca:	b004      	add	sp, #16
 80065cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065d0:	6823      	ldr	r3, [r4, #0]
 80065d2:	f043 0320 	orr.w	r3, r3, #32
 80065d6:	6023      	str	r3, [r4, #0]
 80065d8:	4832      	ldr	r0, [pc, #200]	@ (80066a4 <_printf_i+0x238>)
 80065da:	2778      	movs	r7, #120	@ 0x78
 80065dc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80065e0:	6823      	ldr	r3, [r4, #0]
 80065e2:	6831      	ldr	r1, [r6, #0]
 80065e4:	061f      	lsls	r7, r3, #24
 80065e6:	f851 5b04 	ldr.w	r5, [r1], #4
 80065ea:	d402      	bmi.n	80065f2 <_printf_i+0x186>
 80065ec:	065f      	lsls	r7, r3, #25
 80065ee:	bf48      	it	mi
 80065f0:	b2ad      	uxthmi	r5, r5
 80065f2:	6031      	str	r1, [r6, #0]
 80065f4:	07d9      	lsls	r1, r3, #31
 80065f6:	bf44      	itt	mi
 80065f8:	f043 0320 	orrmi.w	r3, r3, #32
 80065fc:	6023      	strmi	r3, [r4, #0]
 80065fe:	b11d      	cbz	r5, 8006608 <_printf_i+0x19c>
 8006600:	2310      	movs	r3, #16
 8006602:	e7ad      	b.n	8006560 <_printf_i+0xf4>
 8006604:	4826      	ldr	r0, [pc, #152]	@ (80066a0 <_printf_i+0x234>)
 8006606:	e7e9      	b.n	80065dc <_printf_i+0x170>
 8006608:	6823      	ldr	r3, [r4, #0]
 800660a:	f023 0320 	bic.w	r3, r3, #32
 800660e:	6023      	str	r3, [r4, #0]
 8006610:	e7f6      	b.n	8006600 <_printf_i+0x194>
 8006612:	4616      	mov	r6, r2
 8006614:	e7bd      	b.n	8006592 <_printf_i+0x126>
 8006616:	6833      	ldr	r3, [r6, #0]
 8006618:	6825      	ldr	r5, [r4, #0]
 800661a:	6961      	ldr	r1, [r4, #20]
 800661c:	1d18      	adds	r0, r3, #4
 800661e:	6030      	str	r0, [r6, #0]
 8006620:	062e      	lsls	r6, r5, #24
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	d501      	bpl.n	800662a <_printf_i+0x1be>
 8006626:	6019      	str	r1, [r3, #0]
 8006628:	e002      	b.n	8006630 <_printf_i+0x1c4>
 800662a:	0668      	lsls	r0, r5, #25
 800662c:	d5fb      	bpl.n	8006626 <_printf_i+0x1ba>
 800662e:	8019      	strh	r1, [r3, #0]
 8006630:	2300      	movs	r3, #0
 8006632:	6123      	str	r3, [r4, #16]
 8006634:	4616      	mov	r6, r2
 8006636:	e7bc      	b.n	80065b2 <_printf_i+0x146>
 8006638:	6833      	ldr	r3, [r6, #0]
 800663a:	1d1a      	adds	r2, r3, #4
 800663c:	6032      	str	r2, [r6, #0]
 800663e:	681e      	ldr	r6, [r3, #0]
 8006640:	6862      	ldr	r2, [r4, #4]
 8006642:	2100      	movs	r1, #0
 8006644:	4630      	mov	r0, r6
 8006646:	f7f9 fdc3 	bl	80001d0 <memchr>
 800664a:	b108      	cbz	r0, 8006650 <_printf_i+0x1e4>
 800664c:	1b80      	subs	r0, r0, r6
 800664e:	6060      	str	r0, [r4, #4]
 8006650:	6863      	ldr	r3, [r4, #4]
 8006652:	6123      	str	r3, [r4, #16]
 8006654:	2300      	movs	r3, #0
 8006656:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800665a:	e7aa      	b.n	80065b2 <_printf_i+0x146>
 800665c:	6923      	ldr	r3, [r4, #16]
 800665e:	4632      	mov	r2, r6
 8006660:	4649      	mov	r1, r9
 8006662:	4640      	mov	r0, r8
 8006664:	47d0      	blx	sl
 8006666:	3001      	adds	r0, #1
 8006668:	d0ad      	beq.n	80065c6 <_printf_i+0x15a>
 800666a:	6823      	ldr	r3, [r4, #0]
 800666c:	079b      	lsls	r3, r3, #30
 800666e:	d413      	bmi.n	8006698 <_printf_i+0x22c>
 8006670:	68e0      	ldr	r0, [r4, #12]
 8006672:	9b03      	ldr	r3, [sp, #12]
 8006674:	4298      	cmp	r0, r3
 8006676:	bfb8      	it	lt
 8006678:	4618      	movlt	r0, r3
 800667a:	e7a6      	b.n	80065ca <_printf_i+0x15e>
 800667c:	2301      	movs	r3, #1
 800667e:	4632      	mov	r2, r6
 8006680:	4649      	mov	r1, r9
 8006682:	4640      	mov	r0, r8
 8006684:	47d0      	blx	sl
 8006686:	3001      	adds	r0, #1
 8006688:	d09d      	beq.n	80065c6 <_printf_i+0x15a>
 800668a:	3501      	adds	r5, #1
 800668c:	68e3      	ldr	r3, [r4, #12]
 800668e:	9903      	ldr	r1, [sp, #12]
 8006690:	1a5b      	subs	r3, r3, r1
 8006692:	42ab      	cmp	r3, r5
 8006694:	dcf2      	bgt.n	800667c <_printf_i+0x210>
 8006696:	e7eb      	b.n	8006670 <_printf_i+0x204>
 8006698:	2500      	movs	r5, #0
 800669a:	f104 0619 	add.w	r6, r4, #25
 800669e:	e7f5      	b.n	800668c <_printf_i+0x220>
 80066a0:	08063a78 	.word	0x08063a78
 80066a4:	08063a89 	.word	0x08063a89

080066a8 <__swbuf_r>:
 80066a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066aa:	460e      	mov	r6, r1
 80066ac:	4614      	mov	r4, r2
 80066ae:	4605      	mov	r5, r0
 80066b0:	b118      	cbz	r0, 80066ba <__swbuf_r+0x12>
 80066b2:	6a03      	ldr	r3, [r0, #32]
 80066b4:	b90b      	cbnz	r3, 80066ba <__swbuf_r+0x12>
 80066b6:	f7ff fa41 	bl	8005b3c <__sinit>
 80066ba:	69a3      	ldr	r3, [r4, #24]
 80066bc:	60a3      	str	r3, [r4, #8]
 80066be:	89a3      	ldrh	r3, [r4, #12]
 80066c0:	071a      	lsls	r2, r3, #28
 80066c2:	d501      	bpl.n	80066c8 <__swbuf_r+0x20>
 80066c4:	6923      	ldr	r3, [r4, #16]
 80066c6:	b943      	cbnz	r3, 80066da <__swbuf_r+0x32>
 80066c8:	4621      	mov	r1, r4
 80066ca:	4628      	mov	r0, r5
 80066cc:	f000 f82a 	bl	8006724 <__swsetup_r>
 80066d0:	b118      	cbz	r0, 80066da <__swbuf_r+0x32>
 80066d2:	f04f 37ff 	mov.w	r7, #4294967295
 80066d6:	4638      	mov	r0, r7
 80066d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80066da:	6823      	ldr	r3, [r4, #0]
 80066dc:	6922      	ldr	r2, [r4, #16]
 80066de:	1a98      	subs	r0, r3, r2
 80066e0:	6963      	ldr	r3, [r4, #20]
 80066e2:	b2f6      	uxtb	r6, r6
 80066e4:	4283      	cmp	r3, r0
 80066e6:	4637      	mov	r7, r6
 80066e8:	dc05      	bgt.n	80066f6 <__swbuf_r+0x4e>
 80066ea:	4621      	mov	r1, r4
 80066ec:	4628      	mov	r0, r5
 80066ee:	f7ff fcbd 	bl	800606c <_fflush_r>
 80066f2:	2800      	cmp	r0, #0
 80066f4:	d1ed      	bne.n	80066d2 <__swbuf_r+0x2a>
 80066f6:	68a3      	ldr	r3, [r4, #8]
 80066f8:	3b01      	subs	r3, #1
 80066fa:	60a3      	str	r3, [r4, #8]
 80066fc:	6823      	ldr	r3, [r4, #0]
 80066fe:	1c5a      	adds	r2, r3, #1
 8006700:	6022      	str	r2, [r4, #0]
 8006702:	701e      	strb	r6, [r3, #0]
 8006704:	6962      	ldr	r2, [r4, #20]
 8006706:	1c43      	adds	r3, r0, #1
 8006708:	429a      	cmp	r2, r3
 800670a:	d004      	beq.n	8006716 <__swbuf_r+0x6e>
 800670c:	89a3      	ldrh	r3, [r4, #12]
 800670e:	07db      	lsls	r3, r3, #31
 8006710:	d5e1      	bpl.n	80066d6 <__swbuf_r+0x2e>
 8006712:	2e0a      	cmp	r6, #10
 8006714:	d1df      	bne.n	80066d6 <__swbuf_r+0x2e>
 8006716:	4621      	mov	r1, r4
 8006718:	4628      	mov	r0, r5
 800671a:	f7ff fca7 	bl	800606c <_fflush_r>
 800671e:	2800      	cmp	r0, #0
 8006720:	d0d9      	beq.n	80066d6 <__swbuf_r+0x2e>
 8006722:	e7d6      	b.n	80066d2 <__swbuf_r+0x2a>

08006724 <__swsetup_r>:
 8006724:	b538      	push	{r3, r4, r5, lr}
 8006726:	4b29      	ldr	r3, [pc, #164]	@ (80067cc <__swsetup_r+0xa8>)
 8006728:	4605      	mov	r5, r0
 800672a:	6818      	ldr	r0, [r3, #0]
 800672c:	460c      	mov	r4, r1
 800672e:	b118      	cbz	r0, 8006738 <__swsetup_r+0x14>
 8006730:	6a03      	ldr	r3, [r0, #32]
 8006732:	b90b      	cbnz	r3, 8006738 <__swsetup_r+0x14>
 8006734:	f7ff fa02 	bl	8005b3c <__sinit>
 8006738:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800673c:	0719      	lsls	r1, r3, #28
 800673e:	d422      	bmi.n	8006786 <__swsetup_r+0x62>
 8006740:	06da      	lsls	r2, r3, #27
 8006742:	d407      	bmi.n	8006754 <__swsetup_r+0x30>
 8006744:	2209      	movs	r2, #9
 8006746:	602a      	str	r2, [r5, #0]
 8006748:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800674c:	81a3      	strh	r3, [r4, #12]
 800674e:	f04f 30ff 	mov.w	r0, #4294967295
 8006752:	e033      	b.n	80067bc <__swsetup_r+0x98>
 8006754:	0758      	lsls	r0, r3, #29
 8006756:	d512      	bpl.n	800677e <__swsetup_r+0x5a>
 8006758:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800675a:	b141      	cbz	r1, 800676e <__swsetup_r+0x4a>
 800675c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006760:	4299      	cmp	r1, r3
 8006762:	d002      	beq.n	800676a <__swsetup_r+0x46>
 8006764:	4628      	mov	r0, r5
 8006766:	f7ff fafd 	bl	8005d64 <_free_r>
 800676a:	2300      	movs	r3, #0
 800676c:	6363      	str	r3, [r4, #52]	@ 0x34
 800676e:	89a3      	ldrh	r3, [r4, #12]
 8006770:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006774:	81a3      	strh	r3, [r4, #12]
 8006776:	2300      	movs	r3, #0
 8006778:	6063      	str	r3, [r4, #4]
 800677a:	6923      	ldr	r3, [r4, #16]
 800677c:	6023      	str	r3, [r4, #0]
 800677e:	89a3      	ldrh	r3, [r4, #12]
 8006780:	f043 0308 	orr.w	r3, r3, #8
 8006784:	81a3      	strh	r3, [r4, #12]
 8006786:	6923      	ldr	r3, [r4, #16]
 8006788:	b94b      	cbnz	r3, 800679e <__swsetup_r+0x7a>
 800678a:	89a3      	ldrh	r3, [r4, #12]
 800678c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006790:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006794:	d003      	beq.n	800679e <__swsetup_r+0x7a>
 8006796:	4621      	mov	r1, r4
 8006798:	4628      	mov	r0, r5
 800679a:	f000 f883 	bl	80068a4 <__smakebuf_r>
 800679e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067a2:	f013 0201 	ands.w	r2, r3, #1
 80067a6:	d00a      	beq.n	80067be <__swsetup_r+0x9a>
 80067a8:	2200      	movs	r2, #0
 80067aa:	60a2      	str	r2, [r4, #8]
 80067ac:	6962      	ldr	r2, [r4, #20]
 80067ae:	4252      	negs	r2, r2
 80067b0:	61a2      	str	r2, [r4, #24]
 80067b2:	6922      	ldr	r2, [r4, #16]
 80067b4:	b942      	cbnz	r2, 80067c8 <__swsetup_r+0xa4>
 80067b6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80067ba:	d1c5      	bne.n	8006748 <__swsetup_r+0x24>
 80067bc:	bd38      	pop	{r3, r4, r5, pc}
 80067be:	0799      	lsls	r1, r3, #30
 80067c0:	bf58      	it	pl
 80067c2:	6962      	ldrpl	r2, [r4, #20]
 80067c4:	60a2      	str	r2, [r4, #8]
 80067c6:	e7f4      	b.n	80067b2 <__swsetup_r+0x8e>
 80067c8:	2000      	movs	r0, #0
 80067ca:	e7f7      	b.n	80067bc <__swsetup_r+0x98>
 80067cc:	20000034 	.word	0x20000034

080067d0 <_raise_r>:
 80067d0:	291f      	cmp	r1, #31
 80067d2:	b538      	push	{r3, r4, r5, lr}
 80067d4:	4605      	mov	r5, r0
 80067d6:	460c      	mov	r4, r1
 80067d8:	d904      	bls.n	80067e4 <_raise_r+0x14>
 80067da:	2316      	movs	r3, #22
 80067dc:	6003      	str	r3, [r0, #0]
 80067de:	f04f 30ff 	mov.w	r0, #4294967295
 80067e2:	bd38      	pop	{r3, r4, r5, pc}
 80067e4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80067e6:	b112      	cbz	r2, 80067ee <_raise_r+0x1e>
 80067e8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80067ec:	b94b      	cbnz	r3, 8006802 <_raise_r+0x32>
 80067ee:	4628      	mov	r0, r5
 80067f0:	f000 f830 	bl	8006854 <_getpid_r>
 80067f4:	4622      	mov	r2, r4
 80067f6:	4601      	mov	r1, r0
 80067f8:	4628      	mov	r0, r5
 80067fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80067fe:	f000 b817 	b.w	8006830 <_kill_r>
 8006802:	2b01      	cmp	r3, #1
 8006804:	d00a      	beq.n	800681c <_raise_r+0x4c>
 8006806:	1c59      	adds	r1, r3, #1
 8006808:	d103      	bne.n	8006812 <_raise_r+0x42>
 800680a:	2316      	movs	r3, #22
 800680c:	6003      	str	r3, [r0, #0]
 800680e:	2001      	movs	r0, #1
 8006810:	e7e7      	b.n	80067e2 <_raise_r+0x12>
 8006812:	2100      	movs	r1, #0
 8006814:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006818:	4620      	mov	r0, r4
 800681a:	4798      	blx	r3
 800681c:	2000      	movs	r0, #0
 800681e:	e7e0      	b.n	80067e2 <_raise_r+0x12>

08006820 <raise>:
 8006820:	4b02      	ldr	r3, [pc, #8]	@ (800682c <raise+0xc>)
 8006822:	4601      	mov	r1, r0
 8006824:	6818      	ldr	r0, [r3, #0]
 8006826:	f7ff bfd3 	b.w	80067d0 <_raise_r>
 800682a:	bf00      	nop
 800682c:	20000034 	.word	0x20000034

08006830 <_kill_r>:
 8006830:	b538      	push	{r3, r4, r5, lr}
 8006832:	4d07      	ldr	r5, [pc, #28]	@ (8006850 <_kill_r+0x20>)
 8006834:	2300      	movs	r3, #0
 8006836:	4604      	mov	r4, r0
 8006838:	4608      	mov	r0, r1
 800683a:	4611      	mov	r1, r2
 800683c:	602b      	str	r3, [r5, #0]
 800683e:	f7fa fd38 	bl	80012b2 <_kill>
 8006842:	1c43      	adds	r3, r0, #1
 8006844:	d102      	bne.n	800684c <_kill_r+0x1c>
 8006846:	682b      	ldr	r3, [r5, #0]
 8006848:	b103      	cbz	r3, 800684c <_kill_r+0x1c>
 800684a:	6023      	str	r3, [r4, #0]
 800684c:	bd38      	pop	{r3, r4, r5, pc}
 800684e:	bf00      	nop
 8006850:	20000684 	.word	0x20000684

08006854 <_getpid_r>:
 8006854:	f7fa bd25 	b.w	80012a2 <_getpid>

08006858 <__swhatbuf_r>:
 8006858:	b570      	push	{r4, r5, r6, lr}
 800685a:	460c      	mov	r4, r1
 800685c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006860:	2900      	cmp	r1, #0
 8006862:	b096      	sub	sp, #88	@ 0x58
 8006864:	4615      	mov	r5, r2
 8006866:	461e      	mov	r6, r3
 8006868:	da0d      	bge.n	8006886 <__swhatbuf_r+0x2e>
 800686a:	89a3      	ldrh	r3, [r4, #12]
 800686c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006870:	f04f 0100 	mov.w	r1, #0
 8006874:	bf14      	ite	ne
 8006876:	2340      	movne	r3, #64	@ 0x40
 8006878:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800687c:	2000      	movs	r0, #0
 800687e:	6031      	str	r1, [r6, #0]
 8006880:	602b      	str	r3, [r5, #0]
 8006882:	b016      	add	sp, #88	@ 0x58
 8006884:	bd70      	pop	{r4, r5, r6, pc}
 8006886:	466a      	mov	r2, sp
 8006888:	f000 f848 	bl	800691c <_fstat_r>
 800688c:	2800      	cmp	r0, #0
 800688e:	dbec      	blt.n	800686a <__swhatbuf_r+0x12>
 8006890:	9901      	ldr	r1, [sp, #4]
 8006892:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006896:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800689a:	4259      	negs	r1, r3
 800689c:	4159      	adcs	r1, r3
 800689e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80068a2:	e7eb      	b.n	800687c <__swhatbuf_r+0x24>

080068a4 <__smakebuf_r>:
 80068a4:	898b      	ldrh	r3, [r1, #12]
 80068a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80068a8:	079d      	lsls	r5, r3, #30
 80068aa:	4606      	mov	r6, r0
 80068ac:	460c      	mov	r4, r1
 80068ae:	d507      	bpl.n	80068c0 <__smakebuf_r+0x1c>
 80068b0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80068b4:	6023      	str	r3, [r4, #0]
 80068b6:	6123      	str	r3, [r4, #16]
 80068b8:	2301      	movs	r3, #1
 80068ba:	6163      	str	r3, [r4, #20]
 80068bc:	b003      	add	sp, #12
 80068be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80068c0:	ab01      	add	r3, sp, #4
 80068c2:	466a      	mov	r2, sp
 80068c4:	f7ff ffc8 	bl	8006858 <__swhatbuf_r>
 80068c8:	9f00      	ldr	r7, [sp, #0]
 80068ca:	4605      	mov	r5, r0
 80068cc:	4639      	mov	r1, r7
 80068ce:	4630      	mov	r0, r6
 80068d0:	f7ff fabc 	bl	8005e4c <_malloc_r>
 80068d4:	b948      	cbnz	r0, 80068ea <__smakebuf_r+0x46>
 80068d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068da:	059a      	lsls	r2, r3, #22
 80068dc:	d4ee      	bmi.n	80068bc <__smakebuf_r+0x18>
 80068de:	f023 0303 	bic.w	r3, r3, #3
 80068e2:	f043 0302 	orr.w	r3, r3, #2
 80068e6:	81a3      	strh	r3, [r4, #12]
 80068e8:	e7e2      	b.n	80068b0 <__smakebuf_r+0xc>
 80068ea:	89a3      	ldrh	r3, [r4, #12]
 80068ec:	6020      	str	r0, [r4, #0]
 80068ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068f2:	81a3      	strh	r3, [r4, #12]
 80068f4:	9b01      	ldr	r3, [sp, #4]
 80068f6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80068fa:	b15b      	cbz	r3, 8006914 <__smakebuf_r+0x70>
 80068fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006900:	4630      	mov	r0, r6
 8006902:	f000 f81d 	bl	8006940 <_isatty_r>
 8006906:	b128      	cbz	r0, 8006914 <__smakebuf_r+0x70>
 8006908:	89a3      	ldrh	r3, [r4, #12]
 800690a:	f023 0303 	bic.w	r3, r3, #3
 800690e:	f043 0301 	orr.w	r3, r3, #1
 8006912:	81a3      	strh	r3, [r4, #12]
 8006914:	89a3      	ldrh	r3, [r4, #12]
 8006916:	431d      	orrs	r5, r3
 8006918:	81a5      	strh	r5, [r4, #12]
 800691a:	e7cf      	b.n	80068bc <__smakebuf_r+0x18>

0800691c <_fstat_r>:
 800691c:	b538      	push	{r3, r4, r5, lr}
 800691e:	4d07      	ldr	r5, [pc, #28]	@ (800693c <_fstat_r+0x20>)
 8006920:	2300      	movs	r3, #0
 8006922:	4604      	mov	r4, r0
 8006924:	4608      	mov	r0, r1
 8006926:	4611      	mov	r1, r2
 8006928:	602b      	str	r3, [r5, #0]
 800692a:	f7fa fd22 	bl	8001372 <_fstat>
 800692e:	1c43      	adds	r3, r0, #1
 8006930:	d102      	bne.n	8006938 <_fstat_r+0x1c>
 8006932:	682b      	ldr	r3, [r5, #0]
 8006934:	b103      	cbz	r3, 8006938 <_fstat_r+0x1c>
 8006936:	6023      	str	r3, [r4, #0]
 8006938:	bd38      	pop	{r3, r4, r5, pc}
 800693a:	bf00      	nop
 800693c:	20000684 	.word	0x20000684

08006940 <_isatty_r>:
 8006940:	b538      	push	{r3, r4, r5, lr}
 8006942:	4d06      	ldr	r5, [pc, #24]	@ (800695c <_isatty_r+0x1c>)
 8006944:	2300      	movs	r3, #0
 8006946:	4604      	mov	r4, r0
 8006948:	4608      	mov	r0, r1
 800694a:	602b      	str	r3, [r5, #0]
 800694c:	f7fa fd21 	bl	8001392 <_isatty>
 8006950:	1c43      	adds	r3, r0, #1
 8006952:	d102      	bne.n	800695a <_isatty_r+0x1a>
 8006954:	682b      	ldr	r3, [r5, #0]
 8006956:	b103      	cbz	r3, 800695a <_isatty_r+0x1a>
 8006958:	6023      	str	r3, [r4, #0]
 800695a:	bd38      	pop	{r3, r4, r5, pc}
 800695c:	20000684 	.word	0x20000684

08006960 <_init>:
 8006960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006962:	bf00      	nop
 8006964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006966:	bc08      	pop	{r3}
 8006968:	469e      	mov	lr, r3
 800696a:	4770      	bx	lr

0800696c <_fini>:
 800696c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800696e:	bf00      	nop
 8006970:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006972:	bc08      	pop	{r3}
 8006974:	469e      	mov	lr, r3
 8006976:	4770      	bx	lr
